
Irec_tracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e794  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000694  0800e968  0800e968  0001e968  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800effc  0800effc  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800effc  0800effc  0001effc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f004  0800f004  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f004  0800f004  0001f004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f008  0800f008  0001f008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f00c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001154  200001f8  0800f204  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000134c  0800f204  0002134c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173a3  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c51  00000000  00000000  000375cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012a0  00000000  00000000  0003b220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e0  00000000  00000000  0003c4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027c60  00000000  00000000  0003d5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7e7  00000000  00000000  00065200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddf86  00000000  00000000  000829e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016096d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062a8  00000000  00000000  001609c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f8 	.word	0x200001f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e94c 	.word	0x0800e94c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001fc 	.word	0x200001fc
 800020c:	0800e94c 	.word	0x0800e94c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <HAL_UART_RxCpltCallback>:
ErrorCode error = NO_ERROR_STATE; // UU

//============================= Callback section

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]

    if (huart == &GPS_UART_HNDLR)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a07      	ldr	r2, [pc, #28]	; (8001060 <HAL_UART_RxCpltCallback+0x28>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d105      	bne.n	8001054 <HAL_UART_RxCpltCallback+0x1c>
    {
        g_GnssRx_Flag = true;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_UART_RxCpltCallback+0x2c>)
 800104a:	2201      	movs	r2, #1
 800104c:	701a      	strb	r2, [r3, #0]
        g_openFixedDataTransmition = true;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <HAL_UART_RxCpltCallback+0x30>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
        is_updated_uart4 = 1;
        HAL_UART_Receive_DMA(&GPS_UART_HNDLR, mosfet_buffer, 3);
    }
    */
    // HAL_UART_Transmit(&huart1, m_rxData, strlen(m_rxData), 100);
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	200011c4 	.word	0x200011c4
 8001064:	20000214 	.word	0x20000214
 8001068:	20000215 	.word	0x20000215

0800106c <UsrGpsL86Init>:

//============================= Initial section

void UsrGpsL86Init(UART_HandleTypeDef *huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_DMA(huart, (uint8_t *)m_rxData, DMA_READ_DEF_SIZE);
 8001074:	f240 228a 	movw	r2, #650	; 0x28a
 8001078:	4903      	ldr	r1, [pc, #12]	; (8001088 <UsrGpsL86Init+0x1c>)
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f004 fd08 	bl	8005a90 <HAL_UART_Receive_DMA>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200002e8 	.word	0x200002e8

0800108c <Usr_GpsL86GetValues>:

//============================= public L86 mechanism

void Usr_GpsL86GetValues(S_GPS_L86_DATA *gpsData_)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    getRmc();
 8001094:	f000 f83a 	bl	800110c <getRmc>
    getGGA();
 8001098:	f000 f930 	bl	80012fc <getGGA>
    if (rmcValidFlag)
 800109c:	4b18      	ldr	r3, [pc, #96]	; (8001100 <Usr_GpsL86GetValues+0x74>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d002      	beq.n	80010ac <Usr_GpsL86GetValues+0x20>
    {
        rmcValidFlag = false;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <Usr_GpsL86GetValues+0x74>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	701a      	strb	r2, [r3, #0]
    }
    formatLatLong();
 80010ac:	f000 f8ac 	bl	8001208 <formatLatLong>

    gpsData_->lat = gpsData.lat;
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	601a      	str	r2, [r3, #0]
    gpsData_->lon = gpsData.lon;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	605a      	str	r2, [r3, #4]
    gpsData_->hdop = gpsData.hdop;
 80010c0:	4b10      	ldr	r3, [pc, #64]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	625a      	str	r2, [r3, #36]	; 0x24
    gpsData_->speedKN = gpsData.speedKN;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	609a      	str	r2, [r3, #8]
    gpsData_->satInUse = gpsData.satInUse;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	621a      	str	r2, [r3, #32]
    gpsData_->timeDateBuf = gpsData.timeDateBuf;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010da:	68da      	ldr	r2, [r3, #12]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	60da      	str	r2, [r3, #12]
    gpsData_->fixQualityID = gpsData.fixQualityID;
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010e2:	69da      	ldr	r2, [r3, #28]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	61da      	str	r2, [r3, #28]
    gpsData_->altitudeInMeter = gpsData.altitudeInMeter;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <Usr_GpsL86GetValues+0x78>)
 80010ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	629a      	str	r2, [r3, #40]	; 0x28
    UsrGpsL86Init(&GPS_UART_HNDLR);
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <Usr_GpsL86GetValues+0x7c>)
 80010f2:	f7ff ffbb 	bl	800106c <UsrGpsL86Init>
}
 80010f6:	bf00      	nop
 80010f8:	3708      	adds	r7, #8
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000216 	.word	0x20000216
 8001104:	20000af0 	.word	0x20000af0
 8001108:	200011c4 	.word	0x200011c4

0800110c <getRmc>:
*/



_io void getRmc(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
    if (g_GnssRx_Flag)
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <getRmc+0xc4>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	2b00      	cmp	r3, #0
 800111a:	d055      	beq.n	80011c8 <getRmc+0xbc>
    {
        MsgIndex = 0;
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <getRmc+0xc8>)
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8001122:	492d      	ldr	r1, [pc, #180]	; (80011d8 <getRmc+0xcc>)
 8001124:	482d      	ldr	r0, [pc, #180]	; (80011dc <getRmc+0xd0>)
 8001126:	f009 fa5c 	bl	800a5e2 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GNRMC");
 800112a:	492d      	ldr	r1, [pc, #180]	; (80011e0 <getRmc+0xd4>)
 800112c:	482b      	ldr	r0, [pc, #172]	; (80011dc <getRmc+0xd0>)
 800112e:	f009 fa60 	bl	800a5f2 <strstr>
 8001132:	4603      	mov	r3, r0
 8001134:	4a2b      	ldr	r2, [pc, #172]	; (80011e4 <getRmc+0xd8>)
 8001136:	6013      	str	r3, [r2, #0]
        if (*ptr == 'G')
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <getRmc+0xd8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b47      	cmp	r3, #71	; 0x47
 8001140:	d13f      	bne.n	80011c2 <getRmc+0xb6>
        {
            while (1)
            {
                gpsPayload[MsgIndex] = *ptr;
 8001142:	4b28      	ldr	r3, [pc, #160]	; (80011e4 <getRmc+0xd8>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <getRmc+0xc8>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	7811      	ldrb	r1, [r2, #0]
 800114c:	4a26      	ldr	r2, [pc, #152]	; (80011e8 <getRmc+0xdc>)
 800114e:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001150:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <getRmc+0xc8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	3301      	adds	r3, #1
 8001156:	4a1f      	ldr	r2, [pc, #124]	; (80011d4 <getRmc+0xc8>)
 8001158:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800115a:	4b22      	ldr	r3, [pc, #136]	; (80011e4 <getRmc+0xd8>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a1d      	ldr	r2, [pc, #116]	; (80011d4 <getRmc+0xc8>)
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	441a      	add	r2, r3
 8001164:	4b1f      	ldr	r3, [pc, #124]	; (80011e4 <getRmc+0xd8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800116c:	4b1d      	ldr	r3, [pc, #116]	; (80011e4 <getRmc+0xd8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b0a      	cmp	r3, #10
 8001174:	d003      	beq.n	800117e <getRmc+0x72>
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <getRmc+0xc8>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b5a      	cmp	r3, #90	; 0x5a
 800117c:	dde1      	ble.n	8001142 <getRmc+0x36>
                {
                    MsgIndex = 0;
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <getRmc+0xc8>)
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
                    // memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
                    //  memset(m_rxData, 0, sizeof(m_rxData));

                    if (strlen(gpsPayload) > 10)
 8001184:	4818      	ldr	r0, [pc, #96]	; (80011e8 <getRmc+0xdc>)
 8001186:	f7ff f843 	bl	8000210 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	2b0a      	cmp	r3, #10
 800118e:	d913      	bls.n	80011b8 <getRmc+0xac>
                    {
						char x;
						sscanf(gpsPayload, "GNRMC,%f,A,%f,%c,%f,%c,%f,", &gpsData.timeDateBuf, &m_nonFormattedLat, &x, &m_nonFormattedLon, &gpsData.east_west, &gpsData.speedKN);
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <getRmc+0xe0>)
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <getRmc+0xe4>)
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <getRmc+0xe8>)
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	1dfb      	adds	r3, r7, #7
 800119e:	9300      	str	r3, [sp, #0]
 80011a0:	4b15      	ldr	r3, [pc, #84]	; (80011f8 <getRmc+0xec>)
 80011a2:	4a16      	ldr	r2, [pc, #88]	; (80011fc <getRmc+0xf0>)
 80011a4:	4916      	ldr	r1, [pc, #88]	; (8001200 <getRmc+0xf4>)
 80011a6:	4810      	ldr	r0, [pc, #64]	; (80011e8 <getRmc+0xdc>)
 80011a8:	f009 f9aa 	bl	800a500 <siscanf>
						rmcValidFlag = true;
 80011ac:	4b15      	ldr	r3, [pc, #84]	; (8001204 <getRmc+0xf8>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	701a      	strb	r2, [r3, #0]
						formatLatLong();
 80011b2:	f000 f829 	bl	8001208 <formatLatLong>
                    else
                    {
                        // dataErr Log
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80011b6:	e004      	b.n	80011c2 <getRmc+0xb6>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80011b8:	2264      	movs	r2, #100	; 0x64
 80011ba:	2100      	movs	r1, #0
 80011bc:	480a      	ldr	r0, [pc, #40]	; (80011e8 <getRmc+0xdc>)
 80011be:	f008 faf7 	bl	80097b0 <memset>
                }
            }
        }
        g_GnssRx_Flag = false;
 80011c2:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <getRmc+0xc4>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
    }
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20000214 	.word	0x20000214
 80011d4:	20000218 	.word	0x20000218
 80011d8:	200002e8 	.word	0x200002e8
 80011dc:	200006e8 	.word	0x200006e8
 80011e0:	0800e968 	.word	0x0800e968
 80011e4:	2000021c 	.word	0x2000021c
 80011e8:	20000220 	.word	0x20000220
 80011ec:	20000af8 	.word	0x20000af8
 80011f0:	20000b20 	.word	0x20000b20
 80011f4:	20000aec 	.word	0x20000aec
 80011f8:	20000ae8 	.word	0x20000ae8
 80011fc:	20000afc 	.word	0x20000afc
 8001200:	0800e970 	.word	0x0800e970
 8001204:	20000216 	.word	0x20000216

08001208 <formatLatLong>:



_io void formatLatLong(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
    int degrees = (int)m_nonFormattedLat / 100;        // dec
 800120e:	4b36      	ldr	r3, [pc, #216]	; (80012e8 <formatLatLong+0xe0>)
 8001210:	edd3 7a00 	vldr	s15, [r3]
 8001214:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001218:	ee17 1a90 	vmov	r1, s15
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <formatLatLong+0xe4>)
 800121e:	fb83 2301 	smull	r2, r3, r3, r1
 8001222:	115a      	asrs	r2, r3, #5
 8001224:	17cb      	asrs	r3, r1, #31
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	607b      	str	r3, [r7, #4]
    float minutes = m_nonFormattedLat - degrees * 100; // min
 800122a:	4b2f      	ldr	r3, [pc, #188]	; (80012e8 <formatLatLong+0xe0>)
 800122c:	ed93 7a00 	vldr	s14, [r3]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2264      	movs	r2, #100	; 0x64
 8001234:	fb02 f303 	mul.w	r3, r2, r3
 8001238:	ee07 3a90 	vmov	s15, r3
 800123c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001240:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001244:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lat = degrees + (minutes / 60);            // dec to deg
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	ee07 3a90 	vmov	s15, r3
 800124e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001252:	edd7 6a00 	vldr	s13, [r7]
 8001256:	ed9f 6a26 	vldr	s12, [pc, #152]	; 80012f0 <formatLatLong+0xe8>
 800125a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800125e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <formatLatLong+0xec>)
 8001264:	edc3 7a00 	vstr	s15, [r3]

    degrees = (int)m_nonFormattedLon / 100;
 8001268:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <formatLatLong+0xf0>)
 800126a:	edd3 7a00 	vldr	s15, [r3]
 800126e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001272:	ee17 1a90 	vmov	r1, s15
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <formatLatLong+0xe4>)
 8001278:	fb83 2301 	smull	r2, r3, r3, r1
 800127c:	115a      	asrs	r2, r3, #5
 800127e:	17cb      	asrs	r3, r1, #31
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	607b      	str	r3, [r7, #4]
    minutes = m_nonFormattedLon - degrees * 100;
 8001284:	4b1c      	ldr	r3, [pc, #112]	; (80012f8 <formatLatLong+0xf0>)
 8001286:	ed93 7a00 	vldr	s14, [r3]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2264      	movs	r2, #100	; 0x64
 800128e:	fb02 f303 	mul.w	r3, r2, r3
 8001292:	ee07 3a90 	vmov	s15, r3
 8001296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800129a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800129e:	edc7 7a00 	vstr	s15, [r7]
    gpsData.lon = degrees + (minutes / 60);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ac:	edd7 6a00 	vldr	s13, [r7]
 80012b0:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 80012f0 <formatLatLong+0xe8>
 80012b4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	4b0d      	ldr	r3, [pc, #52]	; (80012f4 <formatLatLong+0xec>)
 80012be:	edc3 7a01 	vstr	s15, [r3, #4]
	if(gpsData.east_west == 'W')
 80012c2:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <formatLatLong+0xec>)
 80012c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80012c8:	2b57      	cmp	r3, #87	; 0x57
 80012ca:	d107      	bne.n	80012dc <formatLatLong+0xd4>
	{
		gpsData.lon = gpsData.lon * -1;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <formatLatLong+0xec>)
 80012ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80012d2:	eef1 7a67 	vneg.f32	s15, s15
 80012d6:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <formatLatLong+0xec>)
 80012d8:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	20000ae8 	.word	0x20000ae8
 80012ec:	51eb851f 	.word	0x51eb851f
 80012f0:	42700000 	.word	0x42700000
 80012f4:	20000af0 	.word	0x20000af0
 80012f8:	20000aec 	.word	0x20000aec

080012fc <getGGA>:

_io void getGGA(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af06      	add	r7, sp, #24
    if (g_openFixedDataTransmition)
 8001302:	4b3a      	ldr	r3, [pc, #232]	; (80013ec <getGGA+0xf0>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d06c      	beq.n	80013e6 <getGGA+0xea>
    {
        MsgIndex = 0;
 800130c:	4b38      	ldr	r3, [pc, #224]	; (80013f0 <getGGA+0xf4>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]
        strcpy(m_gpsTransmitBuf, (char *)(m_rxData));
 8001312:	4938      	ldr	r1, [pc, #224]	; (80013f4 <getGGA+0xf8>)
 8001314:	4838      	ldr	r0, [pc, #224]	; (80013f8 <getGGA+0xfc>)
 8001316:	f009 f964 	bl	800a5e2 <strcpy>
        ptr = strstr(m_gpsTransmitBuf, "GPGGA");
 800131a:	4938      	ldr	r1, [pc, #224]	; (80013fc <getGGA+0x100>)
 800131c:	4836      	ldr	r0, [pc, #216]	; (80013f8 <getGGA+0xfc>)
 800131e:	f009 f968 	bl	800a5f2 <strstr>
 8001322:	4603      	mov	r3, r0
 8001324:	4a36      	ldr	r2, [pc, #216]	; (8001400 <getGGA+0x104>)
 8001326:	6013      	str	r3, [r2, #0]

        if (*ptr == 'G')
 8001328:	4b35      	ldr	r3, [pc, #212]	; (8001400 <getGGA+0x104>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b47      	cmp	r3, #71	; 0x47
 8001330:	d14a      	bne.n	80013c8 <getGGA+0xcc>
        {
            while (1)
            {
                gpsGGAPayload[MsgIndex] = *ptr;
 8001332:	4b33      	ldr	r3, [pc, #204]	; (8001400 <getGGA+0x104>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	4b2e      	ldr	r3, [pc, #184]	; (80013f0 <getGGA+0xf4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	7811      	ldrb	r1, [r2, #0]
 800133c:	4a31      	ldr	r2, [pc, #196]	; (8001404 <getGGA+0x108>)
 800133e:	54d1      	strb	r1, [r2, r3]
                MsgIndex++;
 8001340:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <getGGA+0xf4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	3301      	adds	r3, #1
 8001346:	4a2a      	ldr	r2, [pc, #168]	; (80013f0 <getGGA+0xf4>)
 8001348:	6013      	str	r3, [r2, #0]
                *ptr = *(ptr + MsgIndex);
 800134a:	4b2d      	ldr	r3, [pc, #180]	; (8001400 <getGGA+0x104>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <getGGA+0xf4>)
 8001350:	6812      	ldr	r2, [r2, #0]
 8001352:	441a      	add	r2, r3
 8001354:	4b2a      	ldr	r3, [pc, #168]	; (8001400 <getGGA+0x104>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	701a      	strb	r2, [r3, #0]
                if (*ptr == '\n' || MsgIndex > _max_message_size)
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <getGGA+0x104>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b0a      	cmp	r3, #10
 8001364:	d003      	beq.n	800136e <getGGA+0x72>
 8001366:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <getGGA+0xf4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2b5a      	cmp	r3, #90	; 0x5a
 800136c:	dde1      	ble.n	8001332 <getGGA+0x36>
                {
                    MsgIndex = 0;
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <getGGA+0xf4>)
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
                    memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 8001374:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001378:	2100      	movs	r1, #0
 800137a:	481f      	ldr	r0, [pc, #124]	; (80013f8 <getGGA+0xfc>)
 800137c:	f008 fa18 	bl	80097b0 <memset>
                    memset(m_rxData, 0, sizeof(m_rxData));
 8001380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001384:	2100      	movs	r1, #0
 8001386:	481b      	ldr	r0, [pc, #108]	; (80013f4 <getGGA+0xf8>)
 8001388:	f008 fa12 	bl	80097b0 <memset>

                    if (strlen(gpsGGAPayload) > 10)
 800138c:	481d      	ldr	r0, [pc, #116]	; (8001404 <getGGA+0x108>)
 800138e:	f7fe ff3f 	bl	8000210 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	2b0a      	cmp	r3, #10
 8001396:	d912      	bls.n	80013be <getGGA+0xc2>
                    {
                        sscanf(gpsGGAPayload, "GPGGA,%f,%f,N,%f,W,%d,%d,%f,%f,M,%f,M,", &gpsData.fixedTime, &gpsData.fixedLatBaseFormat, &gpsData.fixedLonBaseFormat, &gpsData.fixQualityID, &gpsData.satInUse, &gpsData.hdop, &gpsData.altitudeInMeter, &gpsData.WGS84);
 8001398:	4b1b      	ldr	r3, [pc, #108]	; (8001408 <getGGA+0x10c>)
 800139a:	9305      	str	r3, [sp, #20]
 800139c:	4b1b      	ldr	r3, [pc, #108]	; (800140c <getGGA+0x110>)
 800139e:	9304      	str	r3, [sp, #16]
 80013a0:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <getGGA+0x114>)
 80013a2:	9303      	str	r3, [sp, #12]
 80013a4:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <getGGA+0x118>)
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <getGGA+0x11c>)
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	4b1b      	ldr	r3, [pc, #108]	; (800141c <getGGA+0x120>)
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <getGGA+0x124>)
 80013b2:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <getGGA+0x128>)
 80013b4:	491c      	ldr	r1, [pc, #112]	; (8001428 <getGGA+0x12c>)
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <getGGA+0x108>)
 80013b8:	f009 f8a2 	bl	800a500 <siscanf>
                    }
                    else
                    {
                        memset(gpsPayload, 0, sizeof(gpsPayload));
                    }
                    break;
 80013bc:	e004      	b.n	80013c8 <getGGA+0xcc>
                        memset(gpsPayload, 0, sizeof(gpsPayload));
 80013be:	2264      	movs	r2, #100	; 0x64
 80013c0:	2100      	movs	r1, #0
 80013c2:	481a      	ldr	r0, [pc, #104]	; (800142c <getGGA+0x130>)
 80013c4:	f008 f9f4 	bl	80097b0 <memset>
                }
            }
        }
        g_openFixedDataTransmition = false;
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <getGGA+0xf0>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	701a      	strb	r2, [r3, #0]
        memset(m_gpsTransmitBuf, 0, sizeof(m_gpsTransmitBuf));
 80013ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d2:	2100      	movs	r1, #0
 80013d4:	4808      	ldr	r0, [pc, #32]	; (80013f8 <getGGA+0xfc>)
 80013d6:	f008 f9eb 	bl	80097b0 <memset>
        memset(m_rxData, 0, sizeof(m_rxData));
 80013da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013de:	2100      	movs	r1, #0
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <getGGA+0xf8>)
 80013e2:	f008 f9e5 	bl	80097b0 <memset>
        // UsrGpsL86Init(&huart2);
    }
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000215 	.word	0x20000215
 80013f0:	20000218 	.word	0x20000218
 80013f4:	200002e8 	.word	0x200002e8
 80013f8:	200006e8 	.word	0x200006e8
 80013fc:	0800e98c 	.word	0x0800e98c
 8001400:	2000021c 	.word	0x2000021c
 8001404:	20000284 	.word	0x20000284
 8001408:	20000b1c 	.word	0x20000b1c
 800140c:	20000b18 	.word	0x20000b18
 8001410:	20000b14 	.word	0x20000b14
 8001414:	20000b10 	.word	0x20000b10
 8001418:	20000b0c 	.word	0x20000b0c
 800141c:	20000b08 	.word	0x20000b08
 8001420:	20000b04 	.word	0x20000b04
 8001424:	20000b00 	.word	0x20000b00
 8001428:	0800e994 	.word	0x0800e994
 800142c:	20000220 	.word	0x20000220

08001430 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001436:	463b      	mov	r3, r7
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
 8001440:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001444:	4a21      	ldr	r2, [pc, #132]	; (80014cc <MX_ADC1_Init+0x9c>)
 8001446:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001448:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_ADC1_Init+0x98>)
 800144a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800144e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_ADC1_Init+0x98>)
 800145e:	2200      	movs	r2, #0
 8001460:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001462:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146a:	4b17      	ldr	r3, [pc, #92]	; (80014c8 <MX_ADC1_Init+0x98>)
 800146c:	2200      	movs	r2, #0
 800146e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001470:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001472:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <MX_ADC1_Init+0xa0>)
 8001474:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001476:	4b14      	ldr	r3, [pc, #80]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800147c:	4b12      	ldr	r3, [pc, #72]	; (80014c8 <MX_ADC1_Init+0x98>)
 800147e:	2201      	movs	r2, #1
 8001480:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800148a:	4b0f      	ldr	r3, [pc, #60]	; (80014c8 <MX_ADC1_Init+0x98>)
 800148c:	2201      	movs	r2, #1
 800148e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001490:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_ADC1_Init+0x98>)
 8001492:	f001 fb33 	bl	8002afc <HAL_ADC_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800149c:	f000 fdea 	bl	8002074 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80014a0:	230b      	movs	r3, #11
 80014a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014a4:	2301      	movs	r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014ac:	463b      	mov	r3, r7
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_ADC1_Init+0x98>)
 80014b2:	f001 fcd1 	bl	8002e58 <HAL_ADC_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014bc:	f000 fdda 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000b24 	.word	0x20000b24
 80014cc:	40012000 	.word	0x40012000
 80014d0:	0f000001 	.word	0x0f000001

080014d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08a      	sub	sp, #40	; 0x28
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a17      	ldr	r2, [pc, #92]	; (8001550 <HAL_ADC_MspInit+0x7c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d127      	bne.n	8001546 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_ADC_MspInit+0x80>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	4a15      	ldr	r2, [pc, #84]	; (8001554 <HAL_ADC_MspInit+0x80>)
 8001500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001504:	6453      	str	r3, [r2, #68]	; 0x44
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_ADC_MspInit+0x80>)
 8001508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800150a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <HAL_ADC_MspInit+0x80>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a0e      	ldr	r2, [pc, #56]	; (8001554 <HAL_ADC_MspInit+0x80>)
 800151c:	f043 0304 	orr.w	r3, r3, #4
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_ADC_MspInit+0x80>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0304 	and.w	r3, r3, #4
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = VOLTAGE_Pin|CURRENT_Pin;
 800152e:	2306      	movs	r3, #6
 8001530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	4805      	ldr	r0, [pc, #20]	; (8001558 <HAL_ADC_MspInit+0x84>)
 8001542:	f002 fb97 	bl	8003c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3728      	adds	r7, #40	; 0x28
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	40012000 	.word	0x40012000
 8001554:	40023800 	.word	0x40023800
 8001558:	40020800 	.word	0x40020800

0800155c <calculateCRC>:
#include "main.h"

data_pack_t veriler;

static uint8_t calculateCRC()
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
	int check_sum = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 8001566:	2301      	movs	r3, #1
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	e00a      	b.n	8001582 <calculateCRC+0x26>
		check_sum += veriler.arr[i];
 800156c:	4a0d      	ldr	r2, [pc, #52]	; (80015a4 <calculateCRC+0x48>)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	4413      	add	r3, r2
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	461a      	mov	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	607b      	str	r3, [r7, #4]
	for(int i = 1; i < sizeof(veriler.dataYapi) - 3; i++){
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	3301      	adds	r3, #1
 8001580:	603b      	str	r3, [r7, #0]
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	2b3c      	cmp	r3, #60	; 0x3c
 8001586:	d9f1      	bls.n	800156c <calculateCRC+0x10>
	}
	return (uint8_t) (check_sum % 256);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	425a      	negs	r2, r3
 800158c:	b2db      	uxtb	r3, r3
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	bf58      	it	pl
 8001592:	4253      	negpl	r3, r2
 8001594:	b2db      	uxtb	r3, r3
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	20000b6c 	.word	0x20000b6c

080015a8 <packDatas>:


uint8_t* packDatas(S_GPS_L86_DATA *gps, uint16_t voltage )
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
	veriler.dataYapi.basla = 0xFF;
 80015b4:	4b64      	ldr	r3, [pc, #400]	; (8001748 <packDatas+0x1a0>)
 80015b6:	22ff      	movs	r2, #255	; 0xff
 80015b8:	701a      	strb	r2, [r3, #0]

	uint8_t min = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	73fb      	strb	r3, [r7, #15]
	uint8_t sec = 0;
 80015be:	2300      	movs	r3, #0
 80015c0:	73bb      	strb	r3, [r7, #14]
	int gpsTime = (int)gps->timeDateBuf;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	edd3 7a03 	vldr	s15, [r3, #12]
 80015c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015cc:	ee17 3a90 	vmov	r3, s15
 80015d0:	60bb      	str	r3, [r7, #8]
	sec = gpsTime % 100;
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	4a5d      	ldr	r2, [pc, #372]	; (800174c <packDatas+0x1a4>)
 80015d6:	fb82 1203 	smull	r1, r2, r2, r3
 80015da:	1151      	asrs	r1, r2, #5
 80015dc:	17da      	asrs	r2, r3, #31
 80015de:	1a8a      	subs	r2, r1, r2
 80015e0:	2164      	movs	r1, #100	; 0x64
 80015e2:	fb01 f202 	mul.w	r2, r1, r2
 80015e6:	1a9a      	subs	r2, r3, r2
 80015e8:	4613      	mov	r3, r2
 80015ea:	73bb      	strb	r3, [r7, #14]
	gpsTime /= 100;
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4a57      	ldr	r2, [pc, #348]	; (800174c <packDatas+0x1a4>)
 80015f0:	fb82 1203 	smull	r1, r2, r2, r3
 80015f4:	1152      	asrs	r2, r2, #5
 80015f6:	17db      	asrs	r3, r3, #31
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	60bb      	str	r3, [r7, #8]
	min = gpsTime % 100;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4a53      	ldr	r2, [pc, #332]	; (800174c <packDatas+0x1a4>)
 8001600:	fb82 1203 	smull	r1, r2, r2, r3
 8001604:	1151      	asrs	r1, r2, #5
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	1a8a      	subs	r2, r1, r2
 800160a:	2164      	movs	r1, #100	; 0x64
 800160c:	fb01 f202 	mul.w	r2, r1, r2
 8001610:	1a9a      	subs	r2, r3, r2
 8001612:	4613      	mov	r3, r2
 8001614:	73fb      	strb	r3, [r7, #15]
	min = (min << 2) | (sec >> 4);
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	b25a      	sxtb	r2, r3
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	091b      	lsrs	r3, r3, #4
 8001620:	b2db      	uxtb	r3, r3
 8001622:	b25b      	sxtb	r3, r3
 8001624:	4313      	orrs	r3, r2
 8001626:	b25b      	sxtb	r3, r3
 8001628:	73fb      	strb	r3, [r7, #15]
	sec = (sec << 4) | 0;
 800162a:	7bbb      	ldrb	r3, [r7, #14]
 800162c:	011b      	lsls	r3, r3, #4
 800162e:	73bb      	strb	r3, [r7, #14]
	veriler.dataYapi.zaman = min;
 8001630:	4a45      	ldr	r2, [pc, #276]	; (8001748 <packDatas+0x1a0>)
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	7053      	strb	r3, [r2, #1]
	veriler.dataYapi.durum = sec;
 8001636:	4a44      	ldr	r2, [pc, #272]	; (8001748 <packDatas+0x1a0>)
 8001638:	7bbb      	ldrb	r3, [r7, #14]
 800163a:	7093      	strb	r3, [r2, #2]

	veriler.dataYapi.voltaj = voltage;
 800163c:	4a42      	ldr	r2, [pc, #264]	; (8001748 <packDatas+0x1a0>)
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	8093      	strh	r3, [r2, #4]
	veriler.dataYapi.akim = 0;
 8001642:	4b41      	ldr	r3, [pc, #260]	; (8001748 <packDatas+0x1a0>)
 8001644:	2200      	movs	r2, #0
 8001646:	80da      	strh	r2, [r3, #6]

	veriler.dataYapi.sicaklik = 0.0;
 8001648:	4b3f      	ldr	r3, [pc, #252]	; (8001748 <packDatas+0x1a0>)
 800164a:	2200      	movs	r2, #0
 800164c:	70da      	strb	r2, [r3, #3]
	veriler.dataYapi.nem = 0.0;
 800164e:	4b3e      	ldr	r3, [pc, #248]	; (8001748 <packDatas+0x1a0>)
 8001650:	2200      	movs	r2, #0
 8001652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	veriler.dataYapi.yukseklik_p = gps->altitudeInMeter;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165a:	4a3b      	ldr	r2, [pc, #236]	; (8001748 <packDatas+0x1a0>)
 800165c:	6093      	str	r3, [r2, #8]

	veriler.dataYapi.maxAltitude = gps->altitudeInMeter  > veriler.dataYapi.maxAltitude ? gps->altitudeInMeter : veriler.dataYapi.maxAltitude;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001664:	4b38      	ldr	r3, [pc, #224]	; (8001748 <packDatas+0x1a0>)
 8001666:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001672:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167a:	dd08      	ble.n	800168e <packDatas+0xe6>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001682:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001686:	ee17 3a90 	vmov	r3, s15
 800168a:	b21b      	sxth	r3, r3
 800168c:	e00b      	b.n	80016a6 <packDatas+0xfe>
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <packDatas+0x1a0>)
 8001690:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001694:	ee07 3a90 	vmov	s15, r3
 8001698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016a0:	ee17 3a90 	vmov	r3, s15
 80016a4:	b21b      	sxth	r3, r3
 80016a6:	4a28      	ldr	r2, [pc, #160]	; (8001748 <packDatas+0x1a0>)
 80016a8:	8753      	strh	r3, [r2, #58]	; 0x3a

	veriler.dataYapi.yukseklik_gps = gps->altitudeInMeter;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ae:	4a26      	ldr	r2, [pc, #152]	; (8001748 <packDatas+0x1a0>)
 80016b0:	60d3      	str	r3, [r2, #12]

	veriler.dataYapi.lat = gps->lat;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a24      	ldr	r2, [pc, #144]	; (8001748 <packDatas+0x1a0>)
 80016b8:	6113      	str	r3, [r2, #16]
	veriler.dataYapi.lon = gps->lon;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a22      	ldr	r2, [pc, #136]	; (8001748 <packDatas+0x1a0>)
 80016c0:	6153      	str	r3, [r2, #20]

	veriler.dataYapi.gyroX = 0;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <packDatas+0x1a0>)
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
	veriler.dataYapi.gyroY = 0;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <packDatas+0x1a0>)
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	61da      	str	r2, [r3, #28]
	veriler.dataYapi.gyroZ = 0;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <packDatas+0x1a0>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]

	veriler.dataYapi.accX = 0;
 80016da:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <packDatas+0x1a0>)
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	625a      	str	r2, [r3, #36]	; 0x24
	veriler.dataYapi.accY = 0;
 80016e2:	4b19      	ldr	r3, [pc, #100]	; (8001748 <packDatas+0x1a0>)
 80016e4:	f04f 0200 	mov.w	r2, #0
 80016e8:	629a      	str	r2, [r3, #40]	; 0x28
	veriler.dataYapi.accZ = 0;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <packDatas+0x1a0>)
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	62da      	str	r2, [r3, #44]	; 0x2c

	veriler.dataYapi.uyduSayisi = ((uint8_t)gps->satInUse << 3) & 0;
 80016f2:	4b15      	ldr	r3, [pc, #84]	; (8001748 <packDatas+0x1a0>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	veriler.dataYapi.hiz = 0.0;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <packDatas+0x1a0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	871a      	strh	r2, [r3, #56]	; 0x38

	veriler.dataYapi.aci = 0.0;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <packDatas+0x1a0>)
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
	veriler.dataYapi.pitch = 0.0;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <packDatas+0x1a0>)
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	veriler.dataYapi.roll = 0.0;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <packDatas+0x1a0>)
 8001712:	2200      	movs	r2, #0
 8001714:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	veriler.dataYapi.yaw = 0.0;
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <packDatas+0x1a0>)
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	veriler.dataYapi.checkSum = calculateCRC();
 8001720:	f7ff ff1c 	bl	800155c <calculateCRC>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <packDatas+0x1a0>)
 800172a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	veriler.dataYapi.CR	= '\r';
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <packDatas+0x1a0>)
 8001730:	220d      	movs	r2, #13
 8001732:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
	veriler.dataYapi.LF	= '\n';
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <packDatas+0x1a0>)
 8001738:	220a      	movs	r2, #10
 800173a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
	return veriler.arr;
 800173e:	4b02      	ldr	r3, [pc, #8]	; (8001748 <packDatas+0x1a0>)
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000b6c 	.word	0x20000b6c
 800174c:	51eb851f 	.word	0x51eb851f

08001750 <data_logger_init>:
FRESULT fres; 	//Result after operations

//For file operation functions look at https://elm-chan.org/fsw/ff/00index_e.html

void data_logger_init()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b0cc      	sub	sp, #304	; 0x130
 8001754:	af00      	add	r7, sp, #0
	fres = f_mount(&FatFs, "", 1);
 8001756:	2201      	movs	r2, #1
 8001758:	4918      	ldr	r1, [pc, #96]	; (80017bc <data_logger_init+0x6c>)
 800175a:	4819      	ldr	r0, [pc, #100]	; (80017c0 <data_logger_init+0x70>)
 800175c:	f007 f978 	bl	8008a50 <f_mount>
 8001760:	4603      	mov	r3, r0
 8001762:	461a      	mov	r2, r3
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <data_logger_init+0x74>)
 8001766:	701a      	strb	r2, [r3, #0]
	fres = f_open(&fil, "tracker.csv", FA_WRITE | FA_OPEN_ALWAYS);
 8001768:	2212      	movs	r2, #18
 800176a:	4917      	ldr	r1, [pc, #92]	; (80017c8 <data_logger_init+0x78>)
 800176c:	4817      	ldr	r0, [pc, #92]	; (80017cc <data_logger_init+0x7c>)
 800176e:	f007 f9b5 	bl	8008adc <f_open>
 8001772:	4603      	mov	r3, r0
 8001774:	461a      	mov	r2, r3
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <data_logger_init+0x74>)
 8001778:	701a      	strb	r2, [r3, #0]
	f_lseek(&fil, f_size(&fil));
 800177a:	4b14      	ldr	r3, [pc, #80]	; (80017cc <data_logger_init+0x7c>)
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	4619      	mov	r1, r3
 8001780:	4812      	ldr	r0, [pc, #72]	; (80017cc <data_logger_init+0x7c>)
 8001782:	f007 fd86 	bl	8009292 <f_lseek>
	unsigned int file_res = 0;
 8001786:	2300      	movs	r3, #0
 8001788:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	uint8_t p_data[300];
	sprintf((char*) p_data, (char*)"Time,Altitude (m),Lat,Lon,Altitude pressure (m),Temperature (C),Humidity (%%)\n");
 800178c:	463b      	mov	r3, r7
 800178e:	4910      	ldr	r1, [pc, #64]	; (80017d0 <data_logger_init+0x80>)
 8001790:	4618      	mov	r0, r3
 8001792:	f008 fe95 	bl	800a4c0 <siprintf>
	f_write(&fil, (uint8_t*) p_data, strlen((char*)p_data), &file_res);
 8001796:	463b      	mov	r3, r7
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fd39 	bl	8000210 <strlen>
 800179e:	4602      	mov	r2, r0
 80017a0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80017a4:	4639      	mov	r1, r7
 80017a6:	4809      	ldr	r0, [pc, #36]	; (80017cc <data_logger_init+0x7c>)
 80017a8:	f007 fb56 	bl	8008e58 <f_write>
	f_close(&fil);
 80017ac:	4807      	ldr	r0, [pc, #28]	; (80017cc <data_logger_init+0x7c>)
 80017ae:	f007 fd46 	bl	800923e <f_close>
}
 80017b2:	bf00      	nop
 80017b4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	0800e9bc 	.word	0x0800e9bc
 80017c0:	20000bac 	.word	0x20000bac
 80017c4:	2000100c 	.word	0x2000100c
 80017c8:	0800e9c0 	.word	0x0800e9c0
 80017cc:	20000ddc 	.word	0x20000ddc
 80017d0:	0800e9cc 	.word	0x0800e9cc

080017d4 <log_datas>:

void log_datas(float altitude, float lat, float lon, float time, float altitude_pressure, float temperature, float humidity)
{
 80017d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017d8:	b0e6      	sub	sp, #408	; 0x198
 80017da:	af0c      	add	r7, sp, #48	; 0x30
 80017dc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017e0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80017e4:	ed83 0a00 	vstr	s0, [r3]
 80017e8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017ec:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80017f0:	edc3 0a00 	vstr	s1, [r3]
 80017f4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80017f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017fc:	ed83 1a00 	vstr	s2, [r3]
 8001800:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001804:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001808:	edc3 1a00 	vstr	s3, [r3]
 800180c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001810:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001814:	ed83 2a00 	vstr	s4, [r3]
 8001818:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800181c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001820:	edc3 2a00 	vstr	s5, [r3]
 8001824:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001828:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800182c:	ed83 3a00 	vstr	s6, [r3]
	fres = f_open(&fil, "tracker.csv", FA_WRITE | FA_OPEN_ALWAYS);
 8001830:	2212      	movs	r2, #18
 8001832:	493e      	ldr	r1, [pc, #248]	; (800192c <log_datas+0x158>)
 8001834:	483e      	ldr	r0, [pc, #248]	; (8001930 <log_datas+0x15c>)
 8001836:	f007 f951 	bl	8008adc <f_open>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	4b3d      	ldr	r3, [pc, #244]	; (8001934 <log_datas+0x160>)
 8001840:	701a      	strb	r2, [r3, #0]
	f_lseek(&fil, f_size(&fil));
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <log_datas+0x15c>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	4619      	mov	r1, r3
 8001848:	4839      	ldr	r0, [pc, #228]	; (8001930 <log_datas+0x15c>)
 800184a:	f007 fd22 	bl	8009292 <f_lseek>
	unsigned int file_res = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	uint8_t p_data[300];
	sprintf((char*) p_data, (char*)"%.0f,%.2f,%.6f,%.6f,%.2f,%.2f,%.2f\n", time, altitude, lat, lon,  altitude_pressure, temperature, humidity);
 8001854:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001858:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	f7fe fe93 	bl	8000588 <__aeabi_f2d>
 8001862:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001866:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800186a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800186e:	6818      	ldr	r0, [r3, #0]
 8001870:	f7fe fe8a 	bl	8000588 <__aeabi_f2d>
 8001874:	4680      	mov	r8, r0
 8001876:	4689      	mov	r9, r1
 8001878:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800187c:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001880:	6818      	ldr	r0, [r3, #0]
 8001882:	f7fe fe81 	bl	8000588 <__aeabi_f2d>
 8001886:	4682      	mov	sl, r0
 8001888:	468b      	mov	fp, r1
 800188a:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800188e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001892:	6818      	ldr	r0, [r3, #0]
 8001894:	f7fe fe78 	bl	8000588 <__aeabi_f2d>
 8001898:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800189c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018a0:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	f7fe fe6f 	bl	8000588 <__aeabi_f2d>
 80018aa:	e9c7 0100 	strd	r0, r1, [r7]
 80018ae:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018b2:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	f7fe fe66 	bl	8000588 <__aeabi_f2d>
 80018bc:	4604      	mov	r4, r0
 80018be:	460d      	mov	r5, r1
 80018c0:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80018c4:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018c8:	6818      	ldr	r0, [r3, #0]
 80018ca:	f7fe fe5d 	bl	8000588 <__aeabi_f2d>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80018d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80018da:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80018de:	ed97 7b00 	vldr	d7, [r7]
 80018e2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80018e6:	ed97 7b02 	vldr	d7, [r7, #8]
 80018ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80018ee:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80018f2:	e9cd 8900 	strd	r8, r9, [sp]
 80018f6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018fa:	490f      	ldr	r1, [pc, #60]	; (8001938 <log_datas+0x164>)
 80018fc:	f008 fde0 	bl	800a4c0 <siprintf>
	f_write(&fil, (uint8_t*) p_data, strlen((char*)p_data), &file_res);
 8001900:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fc83 	bl	8000210 <strlen>
 800190a:	4602      	mov	r2, r0
 800190c:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8001910:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001914:	4806      	ldr	r0, [pc, #24]	; (8001930 <log_datas+0x15c>)
 8001916:	f007 fa9f 	bl	8008e58 <f_write>
	f_close(&fil);
 800191a:	4805      	ldr	r0, [pc, #20]	; (8001930 <log_datas+0x15c>)
 800191c:	f007 fc8f 	bl	800923e <f_close>
}
 8001920:	bf00      	nop
 8001922:	f507 77b4 	add.w	r7, r7, #360	; 0x168
 8001926:	46bd      	mov	sp, r7
 8001928:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192c:	0800e9c0 	.word	0x0800e9c0
 8001930:	20000ddc 	.word	0x20000ddc
 8001934:	2000100c 	.word	0x2000100c
 8001938:	0800ea1c 	.word	0x0800ea1c

0800193c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	607b      	str	r3, [r7, #4]
 8001946:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <MX_DMA_Init+0x3c>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <MX_DMA_Init+0x3c>)
 800194c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <MX_DMA_Init+0x3c>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195a:	607b      	str	r3, [r7, #4]
 800195c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2100      	movs	r1, #0
 8001962:	200d      	movs	r0, #13
 8001964:	f001 fd81 	bl	800346a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001968:	200d      	movs	r0, #13
 800196a:	f001 fd9a 	bl	80034a2 <HAL_NVIC_EnableIRQ>

}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40023800 	.word	0x40023800

0800197c <e22_init>:
  * @param  lora_conf_struct: pointer to the lora configuration struct.
  * @param  huart: pointer to the uart handler typedef.
  * @retval None
  */
void e22_init(e22_conf_struct_t *lora_conf_struct, UART_HandleTypeDef* huart)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
	uint8_t data_packet[9] = {0};
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	f107 0310 	add.w	r3, r7, #16
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	711a      	strb	r2, [r3, #4]
	data_packet[0] = 0xC0;	//Set register command.
 8001994:	23c0      	movs	r3, #192	; 0xc0
 8001996:	733b      	strb	r3, [r7, #12]
	data_packet[1] = 0x03;	//Starting from byte 0x03
 8001998:	2303      	movs	r3, #3
 800199a:	737b      	strb	r3, [r7, #13]
	data_packet[2] = 0x06;	//6 bytes will be configured.
 800199c:	2306      	movs	r3, #6
 800199e:	73bb      	strb	r3, [r7, #14]
	data_packet[3] = lora_conf_struct->air_rate | lora_conf_struct->parity_bit << 3 | lora_conf_struct->baud_rate << 5;																									//Wireless air data rate（bps）, Serial parity bit, UART Serial port rate（bps).
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7c5b      	ldrb	r3, [r3, #17]
 80019a4:	b25a      	sxtb	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	7c1b      	ldrb	r3, [r3, #16]
 80019aa:	00db      	lsls	r3, r3, #3
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	4313      	orrs	r3, r2
 80019b0:	b25a      	sxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	7bdb      	ldrb	r3, [r3, #15]
 80019b6:	015b      	lsls	r3, r3, #5
 80019b8:	b25b      	sxtb	r3, r3
 80019ba:	4313      	orrs	r3, r2
 80019bc:	b25b      	sxtb	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	73fb      	strb	r3, [r7, #15]
	data_packet[4] = lora_conf_struct->power | lora_conf_struct->rssi_noise << 5 | lora_conf_struct->packet_size << 6;																									//Transmitting power, RSSI anbient noise enable, Sub packet settings.
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	7d1b      	ldrb	r3, [r3, #20]
 80019c6:	b25a      	sxtb	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	7cdb      	ldrb	r3, [r3, #19]
 80019cc:	015b      	lsls	r3, r3, #5
 80019ce:	b25b      	sxtb	r3, r3
 80019d0:	4313      	orrs	r3, r2
 80019d2:	b25a      	sxtb	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7c9b      	ldrb	r3, [r3, #18]
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	b25b      	sxtb	r3, r3
 80019dc:	4313      	orrs	r3, r2
 80019de:	b25b      	sxtb	r3, r3
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	743b      	strb	r3, [r7, #16]
	data_packet[5] = lora_conf_struct->channel;																																											//channel 0-83 (410.125 + CH *1M)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7d5b      	ldrb	r3, [r3, #21]
 80019e8:	747b      	strb	r3, [r7, #17]
	data_packet[6] = lora_conf_struct->wor_cycle | lora_conf_struct->wor << 3 | lora_conf_struct->lbt << 4 | lora_conf_struct->repeater_func << 5 | lora_conf_struct->mode << 6 | lora_conf_struct->rssi_enable << 7;	//WOR cycle time, WOR transceiver control, LBT enable, Repeater function, Transmission mode, Enable RSSI.
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	7edb      	ldrb	r3, [r3, #27]
 80019ee:	b25a      	sxtb	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	7e9b      	ldrb	r3, [r3, #26]
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7e5b      	ldrb	r3, [r3, #25]
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	b25b      	sxtb	r3, r3
 8001a04:	4313      	orrs	r3, r2
 8001a06:	b25a      	sxtb	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	7e1b      	ldrb	r3, [r3, #24]
 8001a0c:	015b      	lsls	r3, r3, #5
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25a      	sxtb	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	7ddb      	ldrb	r3, [r3, #23]
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	b25b      	sxtb	r3, r3
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7d9b      	ldrb	r3, [r3, #22]
 8001a24:	01db      	lsls	r3, r3, #7
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b25b      	sxtb	r3, r3
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	74bb      	strb	r3, [r7, #18]
	data_packet[7] = (uint8_t)(lora_conf_struct->key >> 8);																																								//high byte of key
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	8b9b      	ldrh	r3, [r3, #28]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	74fb      	strb	r3, [r7, #19]
	data_packet[8] = (uint8_t)(lora_conf_struct->key);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	8b9b      	ldrh	r3, [r3, #28]
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	753b      	strb	r3, [r7, #20]
																																								//low byte of key
	//For config mode M0 -> 0    M1 -> 1
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin, RESET);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6818      	ldr	r0, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	891b      	ldrh	r3, [r3, #8]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	f002 fb98 	bl	8004184 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin, SET);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6858      	ldr	r0, [r3, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	895b      	ldrh	r3, [r3, #10]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f002 fb90 	bl	8004184 <HAL_GPIO_WritePin>

	HAL_Delay(100);
 8001a64:	2064      	movs	r0, #100	; 0x64
 8001a66:	f001 f825 	bl	8002ab4 <HAL_Delay>

	//UART transmits the configuration datas.
	HAL_UART_Transmit(huart, data_packet, 9, 50);
 8001a6a:	f107 010c 	add.w	r1, r7, #12
 8001a6e:	2332      	movs	r3, #50	; 0x32
 8001a70:	2209      	movs	r2, #9
 8001a72:	6838      	ldr	r0, [r7, #0]
 8001a74:	f003 ff7a 	bl	800596c <HAL_UART_Transmit>
	HAL_Delay(50);
 8001a78:	2032      	movs	r0, #50	; 0x32
 8001a7a:	f001 f81b 	bl	8002ab4 <HAL_Delay>
}
 8001a7e:	bf00      	nop
 8001a80:	3718      	adds	r7, #24
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <e22_transmit>:
  * @param  data: Pointer to the data string.
  * @param  huart: Pointer to the uart handler typedef.
  * @retval None
  */
void e22_transmit(e22_conf_struct_t *lora_conf_struct, uint8_t* data, UART_HandleTypeDef* huart, uint16_t length)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	807b      	strh	r3, [r7, #2]
	//For normal working mode M0 -> 0    M1 -> 0
	HAL_GPIO_WritePin(lora_conf_struct->pins.m0_pin_port, lora_conf_struct->pins.m0_pin, RESET);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	891b      	ldrh	r3, [r3, #8]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f002 fb70 	bl	8004184 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lora_conf_struct->pins.m1_pin_port, lora_conf_struct->pins.m1_pin, RESET);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6858      	ldr	r0, [r3, #4]
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	895b      	ldrh	r3, [r3, #10]
 8001aac:	2200      	movs	r2, #0
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f002 fb68 	bl	8004184 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001ab4:	2014      	movs	r0, #20
 8001ab6:	f000 fffd 	bl	8002ab4 <HAL_Delay>

	HAL_UART_Transmit(huart, data, length, 100);
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	2364      	movs	r3, #100	; 0x64
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f003 ff53 	bl	800596c <HAL_UART_Transmit>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a45      	ldr	r2, [pc, #276]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b43      	ldr	r3, [pc, #268]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b3f      	ldr	r3, [pc, #252]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a3e      	ldr	r2, [pc, #248]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b0c:	f043 0304 	orr.w	r3, r3, #4
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0304 	and.w	r3, r3, #4
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a37      	ldr	r2, [pc, #220]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b35      	ldr	r3, [pc, #212]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b31      	ldr	r3, [pc, #196]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a29      	ldr	r2, [pc, #164]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b27      	ldr	r3, [pc, #156]	; (8001c04 <MX_GPIO_Init+0x134>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RF_M1_Pin|LED_Pin|SPI2_CS_Pin|RF_M0_Pin
 8001b72:	2200      	movs	r2, #0
 8001b74:	f241 411c 	movw	r1, #5148	; 0x141c
 8001b78:	4823      	ldr	r0, [pc, #140]	; (8001c08 <MX_GPIO_Init+0x138>)
 8001b7a:	f002 fb03 	bl	8004184 <HAL_GPIO_WritePin>
                          |BUZZER_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b84:	4821      	ldr	r0, [pc, #132]	; (8001c0c <MX_GPIO_Init+0x13c>)
 8001b86:	f002 fafd 	bl	8004184 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = RF_M1_Pin|LED_Pin|SPI2_CS_Pin|RF_M0_Pin
 8001b8a:	f241 431c 	movw	r3, #5148	; 0x141c
 8001b8e:	617b      	str	r3, [r7, #20]
                          |BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b90:	2301      	movs	r3, #1
 8001b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4819      	ldr	r0, [pc, #100]	; (8001c08 <MX_GPIO_Init+0x138>)
 8001ba4:	f002 f866 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RF_AUX_Pin;
 8001ba8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RF_AUX_GPIO_Port, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <MX_GPIO_Init+0x13c>)
 8001bbe:	f002 f859 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001bc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480c      	ldr	r0, [pc, #48]	; (8001c0c <MX_GPIO_Init+0x13c>)
 8001bdc:	f002 f84a 	bl	8003c74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CD_Pin;
 8001be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_CD_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4804      	ldr	r0, [pc, #16]	; (8001c08 <MX_GPIO_Init+0x138>)
 8001bf6:	f002 f83d 	bl	8003c74 <HAL_GPIO_Init>

}
 8001bfa:	bf00      	nop
 8001bfc:	3728      	adds	r7, #40	; 0x28
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020400 	.word	0x40020400
 8001c0c:	40020000 	.word	0x40020000

08001c10 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c14:	4b12      	ldr	r3, [pc, #72]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <MX_I2C1_Init+0x54>)
 8001c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c1a:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <MX_I2C1_Init+0x58>)
 8001c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c20:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c34:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c4c:	4804      	ldr	r0, [pc, #16]	; (8001c60 <MX_I2C1_Init+0x50>)
 8001c4e:	f002 fab3 	bl	80041b8 <HAL_I2C_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c58:	f000 fa0c 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20001010 	.word	0x20001010
 8001c64:	40005400 	.word	0x40005400
 8001c68:	000186a0 	.word	0x000186a0

08001c6c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b08a      	sub	sp, #40	; 0x28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 0314 	add.w	r3, r7, #20
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a19      	ldr	r2, [pc, #100]	; (8001cf0 <HAL_I2C_MspInit+0x84>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d12b      	bne.n	8001ce6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c8e:	2300      	movs	r3, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	4a17      	ldr	r2, [pc, #92]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001c98:	f043 0302 	orr.w	r3, r3, #2
 8001c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9e:	4b15      	ldr	r3, [pc, #84]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	613b      	str	r3, [r7, #16]
 8001ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001caa:	23c0      	movs	r3, #192	; 0xc0
 8001cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cae:	2312      	movs	r3, #18
 8001cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cbe:	f107 0314 	add.w	r3, r7, #20
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	480c      	ldr	r0, [pc, #48]	; (8001cf8 <HAL_I2C_MspInit+0x8c>)
 8001cc6:	f001 ffd5 	bl	8003c74 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a08      	ldr	r2, [pc, #32]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <HAL_I2C_MspInit+0x88>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001ce6:	bf00      	nop
 8001ce8:	3728      	adds	r7, #40	; 0x28
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40005400 	.word	0x40005400
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	00000000 	.word	0x00000000

08001d00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d06:	f000 fe63 	bl	80029d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d0a:	f000 f8ed 	bl	8001ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0e:	f7ff fedf 	bl	8001ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d12:	f7ff fe13 	bl	800193c <MX_DMA_Init>
  MX_UART4_Init();
 8001d16:	f000 fc5d 	bl	80025d4 <MX_UART4_Init>
  MX_UART5_Init();
 8001d1a:	f000 fc85 	bl	8002628 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8001d1e:	f000 fcad 	bl	800267c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001d22:	f7ff fb85 	bl	8001430 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001d26:	f7ff ff73 	bl	8001c10 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001d2a:	f000 f9a9 	bl	8002080 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001d2e:	f000 f9dd 	bl	80020ec <MX_SPI2_Init>
  MX_SPI3_Init();
 8001d32:	f000 fa11 	bl	8002158 <MX_SPI3_Init>
  MX_FATFS_Init();
 8001d36:	f004 fbff 	bl	8006538 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  data_logger_init();
 8001d3a:	f7ff fd09 	bl	8001750 <data_logger_init>

  lora_init();
 8001d3e:	f000 f93f 	bl	8001fc0 <lora_init>

  HAL_UART_Transmit(&GPS_UART_HNDLR, (uint8_t*)"$PMTK251,57600*2C\r\n", 19, 100);				// 57600 bps
 8001d42:	2364      	movs	r3, #100	; 0x64
 8001d44:	2213      	movs	r2, #19
 8001d46:	495e      	ldr	r1, [pc, #376]	; (8001ec0 <main+0x1c0>)
 8001d48:	485e      	ldr	r0, [pc, #376]	; (8001ec4 <main+0x1c4>)
 8001d4a:	f003 fe0f 	bl	800596c <HAL_UART_Transmit>
  HAL_Delay(10);
 8001d4e:	200a      	movs	r0, #10
 8001d50:	f000 feb0 	bl	8002ab4 <HAL_Delay>
  HAL_UART_DeInit(&GPS_UART_HNDLR);
 8001d54:	485b      	ldr	r0, [pc, #364]	; (8001ec4 <main+0x1c4>)
 8001d56:	f003 fdda 	bl	800590e <HAL_UART_DeInit>
  HAL_Delay(10);
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	f000 feaa 	bl	8002ab4 <HAL_Delay>
  GPS_UART_HNDLR.Init.BaudRate = 57600;
 8001d60:	4b58      	ldr	r3, [pc, #352]	; (8001ec4 <main+0x1c4>)
 8001d62:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001d66:	605a      	str	r2, [r3, #4]
  HAL_UART_Init(&GPS_UART_HNDLR);
 8001d68:	4856      	ldr	r0, [pc, #344]	; (8001ec4 <main+0x1c4>)
 8001d6a:	f003 fd83 	bl	8005874 <HAL_UART_Init>
  HAL_Delay(10);
 8001d6e:	200a      	movs	r0, #10
 8001d70:	f000 fea0 	bl	8002ab4 <HAL_Delay>

  for(int i = 0; i < 6; i++)
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	e012      	b.n	8001da0 <main+0xa0>
  {
	  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	2110      	movs	r1, #16
 8001d7e:	4852      	ldr	r0, [pc, #328]	; (8001ec8 <main+0x1c8>)
 8001d80:	f002 fa00 	bl	8004184 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001d84:	2032      	movs	r0, #50	; 0x32
 8001d86:	f000 fe95 	bl	8002ab4 <HAL_Delay>
	  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	484e      	ldr	r0, [pc, #312]	; (8001ec8 <main+0x1c8>)
 8001d90:	f002 f9f8 	bl	8004184 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001d94:	2032      	movs	r0, #50	; 0x32
 8001d96:	f000 fe8d 	bl	8002ab4 <HAL_Delay>
  for(int i = 0; i < 6; i++)
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3301      	adds	r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	dde9      	ble.n	8001d7a <main+0x7a>
  }
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_SET);
 8001da6:	2201      	movs	r2, #1
 8001da8:	2110      	movs	r1, #16
 8001daa:	4847      	ldr	r0, [pc, #284]	; (8001ec8 <main+0x1c8>)
 8001dac:	f002 f9ea 	bl	8004184 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8001db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001db4:	f000 fe7e 	bl	8002ab4 <HAL_Delay>
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2110      	movs	r1, #16
 8001dbc:	4842      	ldr	r0, [pc, #264]	; (8001ec8 <main+0x1c8>)
 8001dbe:	f002 f9e1 	bl	8004184 <HAL_GPIO_WritePin>

  UsrGpsL86Init(&GPS_UART_HNDLR);
 8001dc2:	4840      	ldr	r0, [pc, #256]	; (8001ec4 <main+0x1c4>)
 8001dc4:	f7ff f952 	bl	800106c <UsrGpsL86Init>

  HAL_ADC_Start(&hadc1);
 8001dc8:	4840      	ldr	r0, [pc, #256]	; (8001ecc <main+0x1cc>)
 8001dca:	f000 fedb 	bl	8002b84 <HAL_ADC_Start>
	          rx = (uint8_t)(GPS_UART_HNDLR.Instance->DR);
	          HAL_UART_Transmit(&TTL_UART_HNDLR, &rx, 1, 10); // echo
	      }
	  }
*/
	  HAL_ADC_Start(&hadc1);
 8001dce:	483f      	ldr	r0, [pc, #252]	; (8001ecc <main+0x1cc>)
 8001dd0:	f000 fed8 	bl	8002b84 <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 50);
 8001dd4:	2132      	movs	r1, #50	; 0x32
 8001dd6:	483d      	ldr	r0, [pc, #244]	; (8001ecc <main+0x1cc>)
 8001dd8:	f000 ffa6 	bl	8002d28 <HAL_ADC_PollForConversion>
	 uint32_t voltage_raw = HAL_ADC_GetValue(&hadc1);
 8001ddc:	483b      	ldr	r0, [pc, #236]	; (8001ecc <main+0x1cc>)
 8001dde:	f001 f82e 	bl	8002e3e <HAL_ADC_GetValue>
 8001de2:	60b8      	str	r0, [r7, #8]
	 uint16_t voltage = (uint16_t)(((float)voltage_raw * 13.2 / 4096) * 100);
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	ee07 3a90 	vmov	s15, r3
 8001dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dee:	ee17 0a90 	vmov	r0, s15
 8001df2:	f7fe fbc9 	bl	8000588 <__aeabi_f2d>
 8001df6:	a330      	add	r3, pc, #192	; (adr r3, 8001eb8 <main+0x1b8>)
 8001df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dfc:	f7fe fc1c 	bl	8000638 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	4b30      	ldr	r3, [pc, #192]	; (8001ed0 <main+0x1d0>)
 8001e0e:	f7fe fd3d 	bl	800088c <__aeabi_ddiv>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4610      	mov	r0, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ed4 <main+0x1d4>)
 8001e20:	f7fe fc0a 	bl	8000638 <__aeabi_dmul>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fedc 	bl	8000be8 <__aeabi_d2uiz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	80fb      	strh	r3, [r7, #6]
	 Usr_GpsL86GetValues(&gnss_data);
 8001e34:	4828      	ldr	r0, [pc, #160]	; (8001ed8 <main+0x1d8>)
 8001e36:	f7ff f929 	bl	800108c <Usr_GpsL86GetValues>
	 uint8_t *datas = packDatas(&gnss_data, voltage);
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4826      	ldr	r0, [pc, #152]	; (8001ed8 <main+0x1d8>)
 8001e40:	f7ff fbb2 	bl	80015a8 <packDatas>
 8001e44:	6038      	str	r0, [r7, #0]
	 e22_transmit(&lora_1, datas, &LORA_UART_HNDLR, 64);
 8001e46:	2340      	movs	r3, #64	; 0x40
 8001e48:	4a24      	ldr	r2, [pc, #144]	; (8001edc <main+0x1dc>)
 8001e4a:	6839      	ldr	r1, [r7, #0]
 8001e4c:	4824      	ldr	r0, [pc, #144]	; (8001ee0 <main+0x1e0>)
 8001e4e:	f7ff fe1a 	bl	8001a86 <e22_transmit>
	 log_datas(gnss_data.altitudeInMeter, gnss_data.lat, gnss_data.lon, gnss_data.timeDateBuf, 0, 0, 0);
 8001e52:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <main+0x1d8>)
 8001e54:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001e58:	4b1f      	ldr	r3, [pc, #124]	; (8001ed8 <main+0x1d8>)
 8001e5a:	ed93 7a00 	vldr	s14, [r3]
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <main+0x1d8>)
 8001e60:	edd3 6a01 	vldr	s13, [r3, #4]
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <main+0x1d8>)
 8001e66:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e6a:	ed9f 3a1e 	vldr	s6, [pc, #120]	; 8001ee4 <main+0x1e4>
 8001e6e:	eddf 2a1d 	vldr	s5, [pc, #116]	; 8001ee4 <main+0x1e4>
 8001e72:	ed9f 2a1c 	vldr	s4, [pc, #112]	; 8001ee4 <main+0x1e4>
 8001e76:	eef0 1a46 	vmov.f32	s3, s12
 8001e7a:	eeb0 1a66 	vmov.f32	s2, s13
 8001e7e:	eef0 0a47 	vmov.f32	s1, s14
 8001e82:	eeb0 0a67 	vmov.f32	s0, s15
 8001e86:	f7ff fca5 	bl	80017d4 <log_datas>
	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e90:	480d      	ldr	r0, [pc, #52]	; (8001ec8 <main+0x1c8>)
 8001e92:	f002 f977 	bl	8004184 <HAL_GPIO_WritePin>
	 HAL_Delay(100);
 8001e96:	2064      	movs	r0, #100	; 0x64
 8001e98:	f000 fe0c 	bl	8002ab4 <HAL_Delay>
	 HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ea2:	4809      	ldr	r0, [pc, #36]	; (8001ec8 <main+0x1c8>)
 8001ea4:	f002 f96e 	bl	8004184 <HAL_GPIO_WritePin>
	 HAL_Delay(900);
 8001ea8:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001eac:	f000 fe02 	bl	8002ab4 <HAL_Delay>
  {
 8001eb0:	e78d      	b.n	8001dce <main+0xce>
 8001eb2:	bf00      	nop
 8001eb4:	f3af 8000 	nop.w
 8001eb8:	66666666 	.word	0x66666666
 8001ebc:	402a6666 	.word	0x402a6666
 8001ec0:	0800ea40 	.word	0x0800ea40
 8001ec4:	200011c4 	.word	0x200011c4
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	20000b24 	.word	0x20000b24
 8001ed0:	40b00000 	.word	0x40b00000
 8001ed4:	40590000 	.word	0x40590000
 8001ed8:	20001084 	.word	0x20001084
 8001edc:	2000124c 	.word	0x2000124c
 8001ee0:	20001064 	.word	0x20001064
 8001ee4:	00000000 	.word	0x00000000

08001ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b094      	sub	sp, #80	; 0x50
 8001eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eee:	f107 031c 	add.w	r3, r7, #28
 8001ef2:	2234      	movs	r2, #52	; 0x34
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f007 fc5a 	bl	80097b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001efc:	f107 0308 	add.w	r3, r7, #8
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
 8001f10:	4b29      	ldr	r3, [pc, #164]	; (8001fb8 <SystemClock_Config+0xd0>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	4a28      	ldr	r2, [pc, #160]	; (8001fb8 <SystemClock_Config+0xd0>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f1c:	4b26      	ldr	r3, [pc, #152]	; (8001fb8 <SystemClock_Config+0xd0>)
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	607b      	str	r3, [r7, #4]
 8001f26:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	603b      	str	r3, [r7, #0]
 8001f2c:	4b23      	ldr	r3, [pc, #140]	; (8001fbc <SystemClock_Config+0xd4>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f34:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <SystemClock_Config+0xd4>)
 8001f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <SystemClock_Config+0xd4>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f44:	603b      	str	r3, [r7, #0]
 8001f46:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f50:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f52:	2302      	movs	r3, #2
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 90;
 8001f60:	235a      	movs	r3, #90	; 0x5a
 8001f62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f64:	2302      	movs	r3, #2
 8001f66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fdad 	bl	8004ad4 <HAL_RCC_OscConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001f80:	f000 f878 	bl	8002074 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f84:	230f      	movs	r3, #15
 8001f86:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f9a:	f107 0308 	add.w	r3, r7, #8
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fa4d 	bl	8004440 <HAL_RCC_ClockConfig>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001fac:	f000 f862 	bl	8002074 <Error_Handler>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3750      	adds	r7, #80	; 0x50
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	40007000 	.word	0x40007000

08001fc0 <lora_init>:

/* USER CODE BEGIN 4 */

void lora_init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
	HAL_Delay(50);
 8001fc4:	2032      	movs	r0, #50	; 0x32
 8001fc6:	f000 fd75 	bl	8002ab4 <HAL_Delay>
	lora_1.baud_rate 		= 	E22_BAUD_RATE_115200;
 8001fca:	4b27      	ldr	r3, [pc, #156]	; (8002068 <lora_init+0xa8>)
 8001fcc:	2207      	movs	r2, #7
 8001fce:	73da      	strb	r2, [r3, #15]
	lora_1.parity_bit		=	E22_PARITY_8N1;
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <lora_init+0xa8>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	741a      	strb	r2, [r3, #16]
	lora_1.air_rate			=	E22_AIR_DATA_RATE_38400;
 8001fd6:	4b24      	ldr	r3, [pc, #144]	; (8002068 <lora_init+0xa8>)
 8001fd8:	2206      	movs	r2, #6
 8001fda:	745a      	strb	r2, [r3, #17]
	lora_1.packet_size		=	E22_PACKET_SIZE_64;
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <lora_init+0xa8>)
 8001fde:	2202      	movs	r2, #2
 8001fe0:	749a      	strb	r2, [r3, #18]
	lora_1.rssi_noise		=	E22_RSSI_NOISE_DISABLE;
 8001fe2:	4b21      	ldr	r3, [pc, #132]	; (8002068 <lora_init+0xa8>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	74da      	strb	r2, [r3, #19]
	lora_1.power			=	E22_TRANSMITTING_POWER_22;
 8001fe8:	4b1f      	ldr	r3, [pc, #124]	; (8002068 <lora_init+0xa8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	751a      	strb	r2, [r3, #20]
	lora_1.rssi_enable		=	E22_ENABLE_RSSI_DISABLE;
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <lora_init+0xa8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	759a      	strb	r2, [r3, #22]
	lora_1.mode				= 	E22_TRANSMISSION_MODE_TRANSPARENT;
 8001ff4:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <lora_init+0xa8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	75da      	strb	r2, [r3, #23]
	lora_1.repeater_func	=	E22_REPEATER_FUNC_DISABLE;
 8001ffa:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <lora_init+0xa8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	761a      	strb	r2, [r3, #24]
	lora_1.lbt				=	E22_LBT_DISABLE;
 8002000:	4b19      	ldr	r3, [pc, #100]	; (8002068 <lora_init+0xa8>)
 8002002:	2200      	movs	r2, #0
 8002004:	765a      	strb	r2, [r3, #25]
	lora_1.wor				=	E22_WOR_RECEIVER;
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <lora_init+0xa8>)
 8002008:	2200      	movs	r2, #0
 800200a:	769a      	strb	r2, [r3, #26]
	lora_1.wor_cycle		=	E22_WOR_CYCLE_1000;
 800200c:	4b16      	ldr	r3, [pc, #88]	; (8002068 <lora_init+0xa8>)
 800200e:	2201      	movs	r2, #1
 8002010:	76da      	strb	r2, [r3, #27]
	lora_1.channel			=	(uint8_t)19;
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <lora_init+0xa8>)
 8002014:	2213      	movs	r2, #19
 8002016:	755a      	strb	r2, [r3, #21]
	lora_1.key				=	0;
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <lora_init+0xa8>)
 800201a:	2200      	movs	r2, #0
 800201c:	839a      	strh	r2, [r3, #28]

	lora_1.pins.m0_pin		=	RF_M0_Pin;
 800201e:	4b12      	ldr	r3, [pc, #72]	; (8002068 <lora_init+0xa8>)
 8002020:	2208      	movs	r2, #8
 8002022:	811a      	strh	r2, [r3, #8]
	lora_1.pins.m0_pin_port	=	RF_M0_GPIO_Port;
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <lora_init+0xa8>)
 8002026:	4a11      	ldr	r2, [pc, #68]	; (800206c <lora_init+0xac>)
 8002028:	601a      	str	r2, [r3, #0]
	lora_1.pins.m1_pin		=	RF_M1_Pin;
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <lora_init+0xa8>)
 800202c:	2204      	movs	r2, #4
 800202e:	815a      	strh	r2, [r3, #10]
	lora_1.pins.m1_pin_port	=	RF_M1_GPIO_Port;
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <lora_init+0xa8>)
 8002032:	4a0e      	ldr	r2, [pc, #56]	; (800206c <lora_init+0xac>)
 8002034:	605a      	str	r2, [r3, #4]

	e22_init(&lora_1, &LORA_UART_HNDLR);
 8002036:	490e      	ldr	r1, [pc, #56]	; (8002070 <lora_init+0xb0>)
 8002038:	480b      	ldr	r0, [pc, #44]	; (8002068 <lora_init+0xa8>)
 800203a:	f7ff fc9f 	bl	800197c <e22_init>
	HAL_Delay(10);
 800203e:	200a      	movs	r0, #10
 8002040:	f000 fd38 	bl	8002ab4 <HAL_Delay>
	HAL_UART_DeInit(&LORA_UART_HNDLR);
 8002044:	480a      	ldr	r0, [pc, #40]	; (8002070 <lora_init+0xb0>)
 8002046:	f003 fc62 	bl	800590e <HAL_UART_DeInit>
	HAL_Delay(10);
 800204a:	200a      	movs	r0, #10
 800204c:	f000 fd32 	bl	8002ab4 <HAL_Delay>
	LORA_UART_HNDLR.Init.BaudRate = 115200;
 8002050:	4b07      	ldr	r3, [pc, #28]	; (8002070 <lora_init+0xb0>)
 8002052:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002056:	605a      	str	r2, [r3, #4]
	HAL_UART_Init(&LORA_UART_HNDLR);
 8002058:	4805      	ldr	r0, [pc, #20]	; (8002070 <lora_init+0xb0>)
 800205a:	f003 fc0b 	bl	8005874 <HAL_UART_Init>
	HAL_Delay(10);
 800205e:	200a      	movs	r0, #10
 8002060:	f000 fd28 	bl	8002ab4 <HAL_Delay>

}
 8002064:	bf00      	nop
 8002066:	bd80      	pop	{r7, pc}
 8002068:	20001064 	.word	0x20001064
 800206c:	40020400 	.word	0x40020400
 8002070:	2000124c 	.word	0x2000124c

08002074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002074:	b480      	push	{r7}
 8002076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002078:	b672      	cpsid	i
}
 800207a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800207c:	e7fe      	b.n	800207c <Error_Handler+0x8>
	...

08002080 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002084:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <MX_SPI1_Init+0x64>)
 8002086:	4a18      	ldr	r2, [pc, #96]	; (80020e8 <MX_SPI1_Init+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <MX_SPI1_Init+0x64>)
 800208c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002092:	4b14      	ldr	r3, [pc, #80]	; (80020e4 <MX_SPI1_Init+0x64>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <MX_SPI1_Init+0x64>)
 800209a:	2200      	movs	r2, #0
 800209c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800209e:	4b11      	ldr	r3, [pc, #68]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a4:	4b0f      	ldr	r3, [pc, #60]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020aa:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020b2:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020b4:	2230      	movs	r2, #48	; 0x30
 80020b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c4:	4b07      	ldr	r3, [pc, #28]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020cc:	220a      	movs	r2, #10
 80020ce:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020d0:	4804      	ldr	r0, [pc, #16]	; (80020e4 <MX_SPI1_Init+0x64>)
 80020d2:	f002 ff9d 	bl	8005010 <HAL_SPI_Init>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d001      	beq.n	80020e0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020dc:	f7ff ffca 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020e0:	bf00      	nop
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	200010b8 	.word	0x200010b8
 80020e8:	40013000 	.word	0x40013000

080020ec <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80020f0:	4b17      	ldr	r3, [pc, #92]	; (8002150 <MX_SPI2_Init+0x64>)
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <MX_SPI2_Init+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020f6:	4b16      	ldr	r3, [pc, #88]	; (8002150 <MX_SPI2_Init+0x64>)
 80020f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80020fc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020fe:	4b14      	ldr	r3, [pc, #80]	; (8002150 <MX_SPI2_Init+0x64>)
 8002100:	2200      	movs	r2, #0
 8002102:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <MX_SPI2_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800210a:	4b11      	ldr	r3, [pc, #68]	; (8002150 <MX_SPI2_Init+0x64>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <MX_SPI2_Init+0x64>)
 8002112:	2200      	movs	r2, #0
 8002114:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002116:	4b0e      	ldr	r3, [pc, #56]	; (8002150 <MX_SPI2_Init+0x64>)
 8002118:	f44f 7200 	mov.w	r2, #512	; 0x200
 800211c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800211e:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <MX_SPI2_Init+0x64>)
 8002120:	2200      	movs	r2, #0
 8002122:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002124:	4b0a      	ldr	r3, [pc, #40]	; (8002150 <MX_SPI2_Init+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <MX_SPI2_Init+0x64>)
 800212c:	2200      	movs	r2, #0
 800212e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002130:	4b07      	ldr	r3, [pc, #28]	; (8002150 <MX_SPI2_Init+0x64>)
 8002132:	2200      	movs	r2, #0
 8002134:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <MX_SPI2_Init+0x64>)
 8002138:	220a      	movs	r2, #10
 800213a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800213c:	4804      	ldr	r0, [pc, #16]	; (8002150 <MX_SPI2_Init+0x64>)
 800213e:	f002 ff67 	bl	8005010 <HAL_SPI_Init>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002148:	f7ff ff94 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20001110 	.word	0x20001110
 8002154:	40003800 	.word	0x40003800

08002158 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800215c:	4b17      	ldr	r3, [pc, #92]	; (80021bc <MX_SPI3_Init+0x64>)
 800215e:	4a18      	ldr	r2, [pc, #96]	; (80021c0 <MX_SPI3_Init+0x68>)
 8002160:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002162:	4b16      	ldr	r3, [pc, #88]	; (80021bc <MX_SPI3_Init+0x64>)
 8002164:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002168:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <MX_SPI3_Init+0x64>)
 800216c:	2200      	movs	r2, #0
 800216e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_SPI3_Init+0x64>)
 8002172:	2200      	movs	r2, #0
 8002174:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_SPI3_Init+0x64>)
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_SPI3_Init+0x64>)
 800217e:	2200      	movs	r2, #0
 8002180:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_SPI3_Init+0x64>)
 8002184:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002188:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800218a:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_SPI3_Init+0x64>)
 800218c:	2200      	movs	r2, #0
 800218e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <MX_SPI3_Init+0x64>)
 8002192:	2200      	movs	r2, #0
 8002194:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_SPI3_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <MX_SPI3_Init+0x64>)
 800219e:	2200      	movs	r2, #0
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_SPI3_Init+0x64>)
 80021a4:	220a      	movs	r2, #10
 80021a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <MX_SPI3_Init+0x64>)
 80021aa:	f002 ff31 	bl	8005010 <HAL_SPI_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80021b4:	f7ff ff5e 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20001168 	.word	0x20001168
 80021c0:	40003c00 	.word	0x40003c00

080021c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08e      	sub	sp, #56	; 0x38
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a5b      	ldr	r2, [pc, #364]	; (8002350 <HAL_SPI_MspInit+0x18c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12c      	bne.n	8002240 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	623b      	str	r3, [r7, #32]
 80021ea:	4b5a      	ldr	r3, [pc, #360]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80021ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ee:	4a59      	ldr	r2, [pc, #356]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80021f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80021f4:	6453      	str	r3, [r2, #68]	; 0x44
 80021f6:	4b57      	ldr	r3, [pc, #348]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fe:	623b      	str	r3, [r7, #32]
 8002200:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
 8002206:	4b53      	ldr	r3, [pc, #332]	; (8002354 <HAL_SPI_MspInit+0x190>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	4a52      	ldr	r2, [pc, #328]	; (8002354 <HAL_SPI_MspInit+0x190>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	; 0x30
 8002212:	4b50      	ldr	r3, [pc, #320]	; (8002354 <HAL_SPI_MspInit+0x190>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800221e:	23e0      	movs	r3, #224	; 0xe0
 8002220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002222:	2302      	movs	r3, #2
 8002224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002226:	2301      	movs	r3, #1
 8002228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800222e:	2305      	movs	r3, #5
 8002230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	4619      	mov	r1, r3
 8002238:	4847      	ldr	r0, [pc, #284]	; (8002358 <HAL_SPI_MspInit+0x194>)
 800223a:	f001 fd1b 	bl	8003c74 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800223e:	e082      	b.n	8002346 <HAL_SPI_MspInit+0x182>
  else if(spiHandle->Instance==SPI2)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a45      	ldr	r2, [pc, #276]	; (800235c <HAL_SPI_MspInit+0x198>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d12d      	bne.n	80022a6 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	4b41      	ldr	r3, [pc, #260]	; (8002354 <HAL_SPI_MspInit+0x190>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	4a40      	ldr	r2, [pc, #256]	; (8002354 <HAL_SPI_MspInit+0x190>)
 8002254:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002258:	6413      	str	r3, [r2, #64]	; 0x40
 800225a:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <HAL_SPI_MspInit+0x190>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002262:	61bb      	str	r3, [r7, #24]
 8002264:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4b3a      	ldr	r3, [pc, #232]	; (8002354 <HAL_SPI_MspInit+0x190>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226e:	4a39      	ldr	r2, [pc, #228]	; (8002354 <HAL_SPI_MspInit+0x190>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	6313      	str	r3, [r2, #48]	; 0x30
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <HAL_SPI_MspInit+0x190>)
 8002278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002282:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002286:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228c:	2300      	movs	r3, #0
 800228e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002290:	2303      	movs	r3, #3
 8002292:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002294:	2305      	movs	r3, #5
 8002296:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002298:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800229c:	4619      	mov	r1, r3
 800229e:	4830      	ldr	r0, [pc, #192]	; (8002360 <HAL_SPI_MspInit+0x19c>)
 80022a0:	f001 fce8 	bl	8003c74 <HAL_GPIO_Init>
}
 80022a4:	e04f      	b.n	8002346 <HAL_SPI_MspInit+0x182>
  else if(spiHandle->Instance==SPI3)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a2e      	ldr	r2, [pc, #184]	; (8002364 <HAL_SPI_MspInit+0x1a0>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d14a      	bne.n	8002346 <HAL_SPI_MspInit+0x182>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b8:	4a26      	ldr	r2, [pc, #152]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022be:	6413      	str	r3, [r2, #64]	; 0x40
 80022c0:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022d6:	f043 0304 	orr.w	r3, r3, #4
 80022da:	6313      	str	r3, [r2, #48]	; 0x30
 80022dc:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022f2:	f043 0302 	orr.w	r3, r3, #2
 80022f6:	6313      	str	r3, [r2, #48]	; 0x30
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_SPI_MspInit+0x190>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	f003 0302 	and.w	r3, r3, #2
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002304:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800230e:	2301      	movs	r3, #1
 8002310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002316:	2306      	movs	r3, #6
 8002318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800231e:	4619      	mov	r1, r3
 8002320:	4811      	ldr	r0, [pc, #68]	; (8002368 <HAL_SPI_MspInit+0x1a4>)
 8002322:	f001 fca7 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002326:	2320      	movs	r3, #32
 8002328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232a:	2302      	movs	r3, #2
 800232c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800232e:	2301      	movs	r3, #1
 8002330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002332:	2303      	movs	r3, #3
 8002334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002336:	2306      	movs	r3, #6
 8002338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800233e:	4619      	mov	r1, r3
 8002340:	4807      	ldr	r0, [pc, #28]	; (8002360 <HAL_SPI_MspInit+0x19c>)
 8002342:	f001 fc97 	bl	8003c74 <HAL_GPIO_Init>
}
 8002346:	bf00      	nop
 8002348:	3738      	adds	r7, #56	; 0x38
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40013000 	.word	0x40013000
 8002354:	40023800 	.word	0x40023800
 8002358:	40020000 	.word	0x40020000
 800235c:	40003800 	.word	0x40003800
 8002360:	40020400 	.word	0x40020400
 8002364:	40003c00 	.word	0x40003c00
 8002368:	40020800 	.word	0x40020800

0800236c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <HAL_MspInit+0x4c>)
 8002378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237a:	4a0f      	ldr	r2, [pc, #60]	; (80023b8 <HAL_MspInit+0x4c>)
 800237c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002380:	6453      	str	r3, [r2, #68]	; 0x44
 8002382:	4b0d      	ldr	r3, [pc, #52]	; (80023b8 <HAL_MspInit+0x4c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	603b      	str	r3, [r7, #0]
 8002392:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <HAL_MspInit+0x4c>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <HAL_MspInit+0x4c>)
 8002398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800239c:	6413      	str	r3, [r2, #64]	; 0x40
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_MspInit+0x4c>)
 80023a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a6:	603b      	str	r3, [r7, #0]
 80023a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	40023800 	.word	0x40023800

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <NMI_Handler+0x4>

080023c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023c2:	b480      	push	{r7}
 80023c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c6:	e7fe      	b.n	80023c6 <HardFault_Handler+0x4>

080023c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023cc:	e7fe      	b.n	80023cc <MemManage_Handler+0x4>

080023ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ce:	b480      	push	{r7}
 80023d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d2:	e7fe      	b.n	80023d2 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	e7fe      	b.n	80023d8 <UsageFault_Handler+0x4>

080023da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023de:	bf00      	nop
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ec:	bf00      	nop
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002408:	f000 fb34 	bl	8002a74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}

08002410 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002414:	4802      	ldr	r0, [pc, #8]	; (8002420 <DMA1_Stream2_IRQHandler+0x10>)
 8002416:	f001 f9c3 	bl	80037a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20001290 	.word	0x20001290

08002424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
	return 1;
 8002428:	2301      	movs	r3, #1
}
 800242a:	4618      	mov	r0, r3
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <_kill>:

int _kill(int pid, int sig)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800243e:	f007 f98d 	bl	800975c <__errno>
 8002442:	4603      	mov	r3, r0
 8002444:	2216      	movs	r2, #22
 8002446:	601a      	str	r2, [r3, #0]
	return -1;
 8002448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800244c:	4618      	mov	r0, r3
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_exit>:

void _exit (int status)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800245c:	f04f 31ff 	mov.w	r1, #4294967295
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f7ff ffe7 	bl	8002434 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002466:	e7fe      	b.n	8002466 <_exit+0x12>

08002468 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e00a      	b.n	8002490 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800247a:	f3af 8000 	nop.w
 800247e:	4601      	mov	r1, r0
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	60ba      	str	r2, [r7, #8]
 8002486:	b2ca      	uxtb	r2, r1
 8002488:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3301      	adds	r3, #1
 800248e:	617b      	str	r3, [r7, #20]
 8002490:	697a      	ldr	r2, [r7, #20]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	429a      	cmp	r2, r3
 8002496:	dbf0      	blt.n	800247a <_read+0x12>
	}

return len;
 8002498:	687b      	ldr	r3, [r7, #4]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
 80024b2:	e009      	b.n	80024c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	60ba      	str	r2, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	3301      	adds	r3, #1
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	dbf1      	blt.n	80024b4 <_write+0x12>
	}
	return len;
 80024d0:	687b      	ldr	r3, [r7, #4]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3718      	adds	r7, #24
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <_close>:

int _close(int file)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
	return -1;
 80024e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002502:	605a      	str	r2, [r3, #4]
	return 0;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <_isatty>:

int _isatty(int file)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
	return 1;
 800251a:	2301      	movs	r3, #1
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	60f8      	str	r0, [r7, #12]
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
	return 0;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3714      	adds	r7, #20
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800254c:	4a14      	ldr	r2, [pc, #80]	; (80025a0 <_sbrk+0x5c>)
 800254e:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <_sbrk+0x60>)
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <_sbrk+0x64>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <_sbrk+0x64>)
 8002562:	4a12      	ldr	r2, [pc, #72]	; (80025ac <_sbrk+0x68>)
 8002564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002566:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <_sbrk+0x64>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4413      	add	r3, r2
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	429a      	cmp	r2, r3
 8002572:	d207      	bcs.n	8002584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002574:	f007 f8f2 	bl	800975c <__errno>
 8002578:	4603      	mov	r3, r0
 800257a:	220c      	movs	r2, #12
 800257c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800257e:	f04f 33ff 	mov.w	r3, #4294967295
 8002582:	e009      	b.n	8002598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002584:	4b08      	ldr	r3, [pc, #32]	; (80025a8 <_sbrk+0x64>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800258a:	4b07      	ldr	r3, [pc, #28]	; (80025a8 <_sbrk+0x64>)
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4413      	add	r3, r2
 8002592:	4a05      	ldr	r2, [pc, #20]	; (80025a8 <_sbrk+0x64>)
 8002594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002596:	68fb      	ldr	r3, [r7, #12]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3718      	adds	r7, #24
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20020000 	.word	0x20020000
 80025a4:	00000400 	.word	0x00000400
 80025a8:	200011c0 	.word	0x200011c0
 80025ac:	20001350 	.word	0x20001350

080025b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <SystemInit+0x20>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	4a05      	ldr	r2, [pc, #20]	; (80025d0 <SystemInit+0x20>)
 80025bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <MX_UART4_Init>:
UART_HandleTypeDef huart1;
DMA_HandleTypeDef hdma_uart4_rx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_UART4_Init+0x4c>)
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <MX_UART4_Init+0x50>)
 80025dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_UART4_Init+0x4c>)
 80025e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80025e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_UART4_Init+0x4c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <MX_UART4_Init+0x4c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MX_UART4_Init+0x4c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <MX_UART4_Init+0x4c>)
 80025fa:	220c      	movs	r2, #12
 80025fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <MX_UART4_Init+0x4c>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <MX_UART4_Init+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800260a:	4805      	ldr	r0, [pc, #20]	; (8002620 <MX_UART4_Init+0x4c>)
 800260c:	f003 f932 	bl	8005874 <HAL_UART_Init>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002616:	f7ff fd2d 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800261a:	bf00      	nop
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	200011c4 	.word	0x200011c4
 8002624:	40004c00 	.word	0x40004c00

08002628 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800262c:	4b11      	ldr	r3, [pc, #68]	; (8002674 <MX_UART5_Init+0x4c>)
 800262e:	4a12      	ldr	r2, [pc, #72]	; (8002678 <MX_UART5_Init+0x50>)
 8002630:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002632:	4b10      	ldr	r3, [pc, #64]	; (8002674 <MX_UART5_Init+0x4c>)
 8002634:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002638:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800263a:	4b0e      	ldr	r3, [pc, #56]	; (8002674 <MX_UART5_Init+0x4c>)
 800263c:	2200      	movs	r2, #0
 800263e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002640:	4b0c      	ldr	r3, [pc, #48]	; (8002674 <MX_UART5_Init+0x4c>)
 8002642:	2200      	movs	r2, #0
 8002644:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002646:	4b0b      	ldr	r3, [pc, #44]	; (8002674 <MX_UART5_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800264c:	4b09      	ldr	r3, [pc, #36]	; (8002674 <MX_UART5_Init+0x4c>)
 800264e:	220c      	movs	r2, #12
 8002650:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002652:	4b08      	ldr	r3, [pc, #32]	; (8002674 <MX_UART5_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <MX_UART5_Init+0x4c>)
 800265a:	2200      	movs	r2, #0
 800265c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800265e:	4805      	ldr	r0, [pc, #20]	; (8002674 <MX_UART5_Init+0x4c>)
 8002660:	f003 f908 	bl	8005874 <HAL_UART_Init>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800266a:	f7ff fd03 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800266e:	bf00      	nop
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20001208 	.word	0x20001208
 8002678:	40005000 	.word	0x40005000

0800267c <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002680:	4b11      	ldr	r3, [pc, #68]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 8002682:	4a12      	ldr	r2, [pc, #72]	; (80026cc <MX_USART1_UART_Init+0x50>)
 8002684:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 8002688:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800268c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800268e:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 8002690:	2200      	movs	r2, #0
 8002692:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 8002696:	2200      	movs	r2, #0
 8002698:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800269a:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 80026a2:	220c      	movs	r2, #12
 80026a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <MX_USART1_UART_Init+0x4c>)
 80026b4:	f003 f8de 	bl	8005874 <HAL_UART_Init>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80026be:	f7ff fcd9 	bl	8002074 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000124c 	.word	0x2000124c
 80026cc:	40011000 	.word	0x40011000

080026d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08e      	sub	sp, #56	; 0x38
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	609a      	str	r2, [r3, #8]
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a72      	ldr	r2, [pc, #456]	; (80028b8 <HAL_UART_MspInit+0x1e8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d15a      	bne.n	80027a8 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	623b      	str	r3, [r7, #32]
 80026f6:	4b71      	ldr	r3, [pc, #452]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a70      	ldr	r2, [pc, #448]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80026fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b6e      	ldr	r3, [pc, #440]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800270e:	2300      	movs	r3, #0
 8002710:	61fb      	str	r3, [r7, #28]
 8002712:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	4a69      	ldr	r2, [pc, #420]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 8002718:	f043 0301 	orr.w	r3, r3, #1
 800271c:	6313      	str	r3, [r2, #48]	; 0x30
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	f003 0301 	and.w	r3, r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800272a:	2303      	movs	r3, #3
 800272c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272e:	2302      	movs	r3, #2
 8002730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002736:	2303      	movs	r3, #3
 8002738:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800273a:	2308      	movs	r3, #8
 800273c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800273e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002742:	4619      	mov	r1, r3
 8002744:	485e      	ldr	r0, [pc, #376]	; (80028c0 <HAL_UART_MspInit+0x1f0>)
 8002746:	f001 fa95 	bl	8003c74 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800274a:	4b5e      	ldr	r3, [pc, #376]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 800274c:	4a5e      	ldr	r2, [pc, #376]	; (80028c8 <HAL_UART_MspInit+0x1f8>)
 800274e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002750:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 8002752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002756:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002758:	4b5a      	ldr	r3, [pc, #360]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800275e:	4b59      	ldr	r3, [pc, #356]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002764:	4b57      	ldr	r3, [pc, #348]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 8002766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800276a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800276c:	4b55      	ldr	r3, [pc, #340]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 800276e:	2200      	movs	r2, #0
 8002770:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002772:	4b54      	ldr	r3, [pc, #336]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8002778:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 800277a:	2200      	movs	r2, #0
 800277c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800277e:	4b51      	ldr	r3, [pc, #324]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 8002780:	2200      	movs	r2, #0
 8002782:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 8002786:	2200      	movs	r2, #0
 8002788:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800278a:	484e      	ldr	r0, [pc, #312]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 800278c:	f000 fea4 	bl	80034d8 <HAL_DMA_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8002796:	f7ff fc6d 	bl	8002074 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a49      	ldr	r2, [pc, #292]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 800279e:	639a      	str	r2, [r3, #56]	; 0x38
 80027a0:	4a48      	ldr	r2, [pc, #288]	; (80028c4 <HAL_UART_MspInit+0x1f4>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80027a6:	e082      	b.n	80028ae <HAL_UART_MspInit+0x1de>
  else if(uartHandle->Instance==UART5)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a47      	ldr	r2, [pc, #284]	; (80028cc <HAL_UART_MspInit+0x1fc>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d14b      	bne.n	800284a <HAL_UART_MspInit+0x17a>
    __HAL_RCC_UART5_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	4b41      	ldr	r3, [pc, #260]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	4a40      	ldr	r2, [pc, #256]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c0:	6413      	str	r3, [r2, #64]	; 0x40
 80027c2:	4b3e      	ldr	r3, [pc, #248]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
 80027d2:	4b3a      	ldr	r3, [pc, #232]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a39      	ldr	r2, [pc, #228]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027d8:	f043 0304 	orr.w	r3, r3, #4
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b37      	ldr	r3, [pc, #220]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
 80027ee:	4b33      	ldr	r3, [pc, #204]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4a32      	ldr	r2, [pc, #200]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027f4:	f043 0308 	orr.w	r3, r3, #8
 80027f8:	6313      	str	r3, [r2, #48]	; 0x30
 80027fa:	4b30      	ldr	r3, [pc, #192]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002806:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002814:	2303      	movs	r3, #3
 8002816:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002818:	2308      	movs	r3, #8
 800281a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800281c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002820:	4619      	mov	r1, r3
 8002822:	482b      	ldr	r0, [pc, #172]	; (80028d0 <HAL_UART_MspInit+0x200>)
 8002824:	f001 fa26 	bl	8003c74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002828:	2304      	movs	r3, #4
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002838:	2308      	movs	r3, #8
 800283a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	4824      	ldr	r0, [pc, #144]	; (80028d4 <HAL_UART_MspInit+0x204>)
 8002844:	f001 fa16 	bl	8003c74 <HAL_GPIO_Init>
}
 8002848:	e031      	b.n	80028ae <HAL_UART_MspInit+0x1de>
  else if(uartHandle->Instance==USART1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_UART_MspInit+0x208>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d12c      	bne.n	80028ae <HAL_UART_MspInit+0x1de>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
 8002858:	4b18      	ldr	r3, [pc, #96]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 800285a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800285c:	4a17      	ldr	r2, [pc, #92]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 800285e:	f043 0310 	orr.w	r3, r3, #16
 8002862:	6453      	str	r3, [r2, #68]	; 0x44
 8002864:	4b15      	ldr	r3, [pc, #84]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	f003 0310 	and.w	r3, r3, #16
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	4b11      	ldr	r3, [pc, #68]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	4a10      	ldr	r2, [pc, #64]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6313      	str	r3, [r2, #48]	; 0x30
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_UART_MspInit+0x1ec>)
 8002882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800288c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002890:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289a:	2303      	movs	r3, #3
 800289c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800289e:	2307      	movs	r3, #7
 80028a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028a6:	4619      	mov	r1, r3
 80028a8:	4805      	ldr	r0, [pc, #20]	; (80028c0 <HAL_UART_MspInit+0x1f0>)
 80028aa:	f001 f9e3 	bl	8003c74 <HAL_GPIO_Init>
}
 80028ae:	bf00      	nop
 80028b0:	3738      	adds	r7, #56	; 0x38
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40004c00 	.word	0x40004c00
 80028bc:	40023800 	.word	0x40023800
 80028c0:	40020000 	.word	0x40020000
 80028c4:	20001290 	.word	0x20001290
 80028c8:	40026040 	.word	0x40026040
 80028cc:	40005000 	.word	0x40005000
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40011000 	.word	0x40011000

080028dc <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==UART4)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a1d      	ldr	r2, [pc, #116]	; (8002960 <HAL_UART_MspDeInit+0x84>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d10f      	bne.n	800290e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN UART4_MspDeInit 0 */

  /* USER CODE END UART4_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_UART4_CLK_DISABLE();
 80028ee:	4b1d      	ldr	r3, [pc, #116]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 80028f4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80028f8:	6413      	str	r3, [r2, #64]	; 0x40

    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 80028fa:	2103      	movs	r1, #3
 80028fc:	481a      	ldr	r0, [pc, #104]	; (8002968 <HAL_UART_MspDeInit+0x8c>)
 80028fe:	f001 fb4d 	bl	8003f9c <HAL_GPIO_DeInit>

    /* UART4 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fe94 	bl	8003634 <HAL_DMA_DeInit>

  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800290c:	e024      	b.n	8002958 <HAL_UART_MspDeInit+0x7c>
  else if(uartHandle->Instance==UART5)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a16      	ldr	r2, [pc, #88]	; (800296c <HAL_UART_MspDeInit+0x90>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d10f      	bne.n	8002938 <HAL_UART_MspDeInit+0x5c>
    __HAL_RCC_UART5_CLK_DISABLE();
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a11      	ldr	r2, [pc, #68]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 800291e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8002924:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002928:	4811      	ldr	r0, [pc, #68]	; (8002970 <HAL_UART_MspDeInit+0x94>)
 800292a:	f001 fb37 	bl	8003f9c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_2);
 800292e:	2104      	movs	r1, #4
 8002930:	4810      	ldr	r0, [pc, #64]	; (8002974 <HAL_UART_MspDeInit+0x98>)
 8002932:	f001 fb33 	bl	8003f9c <HAL_GPIO_DeInit>
}
 8002936:	e00f      	b.n	8002958 <HAL_UART_MspDeInit+0x7c>
  else if(uartHandle->Instance==USART1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a0e      	ldr	r2, [pc, #56]	; (8002978 <HAL_UART_MspDeInit+0x9c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d10a      	bne.n	8002958 <HAL_UART_MspDeInit+0x7c>
    __HAL_RCC_USART1_CLK_DISABLE();
 8002942:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 8002944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002946:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_UART_MspDeInit+0x88>)
 8002948:	f023 0310 	bic.w	r3, r3, #16
 800294c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800294e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002952:	4805      	ldr	r0, [pc, #20]	; (8002968 <HAL_UART_MspDeInit+0x8c>)
 8002954:	f001 fb22 	bl	8003f9c <HAL_GPIO_DeInit>
}
 8002958:	bf00      	nop
 800295a:	3708      	adds	r7, #8
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40004c00 	.word	0x40004c00
 8002964:	40023800 	.word	0x40023800
 8002968:	40020000 	.word	0x40020000
 800296c:	40005000 	.word	0x40005000
 8002970:	40020800 	.word	0x40020800
 8002974:	40020c00 	.word	0x40020c00
 8002978:	40011000 	.word	0x40011000

0800297c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800297c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002980:	480d      	ldr	r0, [pc, #52]	; (80029b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002982:	490e      	ldr	r1, [pc, #56]	; (80029bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a0b      	ldr	r2, [pc, #44]	; (80029c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002998:	4c0b      	ldr	r4, [pc, #44]	; (80029c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029a6:	f7ff fe03 	bl	80025b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029aa:	f006 fedd 	bl	8009768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ae:	f7ff f9a7 	bl	8001d00 <main>
  bx  lr    
 80029b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029b4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029bc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80029c0:	0800f00c 	.word	0x0800f00c
  ldr r2, =_sbss
 80029c4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80029c8:	2000134c 	.word	0x2000134c

080029cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029cc:	e7fe      	b.n	80029cc <ADC_IRQHandler>
	...

080029d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029d4:	4b0e      	ldr	r3, [pc, #56]	; (8002a10 <HAL_Init+0x40>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a0d      	ldr	r2, [pc, #52]	; (8002a10 <HAL_Init+0x40>)
 80029da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029de:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	; (8002a10 <HAL_Init+0x40>)
 80029e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a07      	ldr	r2, [pc, #28]	; (8002a10 <HAL_Init+0x40>)
 80029f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029f8:	2003      	movs	r0, #3
 80029fa:	f000 fd2b 	bl	8003454 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029fe:	200f      	movs	r0, #15
 8002a00:	f000 f808 	bl	8002a14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a04:	f7ff fcb2 	bl	800236c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023c00 	.word	0x40023c00

08002a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a1c:	4b12      	ldr	r3, [pc, #72]	; (8002a68 <HAL_InitTick+0x54>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <HAL_InitTick+0x58>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 fd43 	bl	80034be <HAL_SYSTICK_Config>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00e      	b.n	8002a60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2b0f      	cmp	r3, #15
 8002a46:	d80a      	bhi.n	8002a5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f000 fd0b 	bl	800346a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a54:	4a06      	ldr	r2, [pc, #24]	; (8002a70 <HAL_InitTick+0x5c>)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	e000      	b.n	8002a60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	20000000 	.word	0x20000000
 8002a6c:	20000008 	.word	0x20000008
 8002a70:	20000004 	.word	0x20000004

08002a74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_IncTick+0x20>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_IncTick+0x24>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4413      	add	r3, r2
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <HAL_IncTick+0x24>)
 8002a86:	6013      	str	r3, [r2, #0]
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000008 	.word	0x20000008
 8002a98:	200012f0 	.word	0x200012f0

08002a9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8002aa0:	4b03      	ldr	r3, [pc, #12]	; (8002ab0 <HAL_GetTick+0x14>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	200012f0 	.word	0x200012f0

08002ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002abc:	f7ff ffee 	bl	8002a9c <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002acc:	d005      	beq.n	8002ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_Delay+0x44>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ada:	bf00      	nop
 8002adc:	f7ff ffde 	bl	8002a9c <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	68fa      	ldr	r2, [r7, #12]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d8f7      	bhi.n	8002adc <HAL_Delay+0x28>
  {
  }
}
 8002aec:	bf00      	nop
 8002aee:	bf00      	nop
 8002af0:	3710      	adds	r7, #16
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e033      	b.n	8002b7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d109      	bne.n	8002b2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe fcda 	bl	80014d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f003 0310 	and.w	r3, r3, #16
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d118      	bne.n	8002b6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002b42:	f023 0302 	bic.w	r3, r3, #2
 8002b46:	f043 0202 	orr.w	r2, r3, #2
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fab4 	bl	80030bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f023 0303 	bic.w	r3, r3, #3
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
 8002b6a:	e001      	b.n	8002b70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d101      	bne.n	8002b9e <HAL_ADC_Start+0x1a>
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	e0b2      	b.n	8002d04 <HAL_ADC_Start+0x180>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d018      	beq.n	8002be6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0201 	orr.w	r2, r2, #1
 8002bc2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bc4:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <HAL_ADC_Start+0x18c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a52      	ldr	r2, [pc, #328]	; (8002d14 <HAL_ADC_Start+0x190>)
 8002bca:	fba2 2303 	umull	r2, r3, r2, r3
 8002bce:	0c9a      	lsrs	r2, r3, #18
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	4413      	add	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002bd8:	e002      	b.n	8002be0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	3b01      	subs	r3, #1
 8002bde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1f9      	bne.n	8002bda <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d17a      	bne.n	8002cea <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c32:	d106      	bne.n	8002c42 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f023 0206 	bic.w	r2, r3, #6
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c50:	4b31      	ldr	r3, [pc, #196]	; (8002d18 <HAL_ADC_Start+0x194>)
 8002c52:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002c5c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d12a      	bne.n	8002cc0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a2b      	ldr	r2, [pc, #172]	; (8002d1c <HAL_ADC_Start+0x198>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d015      	beq.n	8002ca0 <HAL_ADC_Start+0x11c>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a29      	ldr	r2, [pc, #164]	; (8002d20 <HAL_ADC_Start+0x19c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d105      	bne.n	8002c8a <HAL_ADC_Start+0x106>
 8002c7e:	4b26      	ldr	r3, [pc, #152]	; (8002d18 <HAL_ADC_Start+0x194>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a25      	ldr	r2, [pc, #148]	; (8002d24 <HAL_ADC_Start+0x1a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d136      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <HAL_ADC_Start+0x194>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0310 	and.w	r3, r3, #16
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d130      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d129      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cbc:	609a      	str	r2, [r3, #8]
 8002cbe:	e020      	b.n	8002d02 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_ADC_Start+0x198>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d11b      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d114      	bne.n	8002d02 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ce6:	609a      	str	r2, [r3, #8]
 8002ce8:	e00b      	b.n	8002d02 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0210 	orr.w	r2, r3, #16
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfa:	f043 0201 	orr.w	r2, r3, #1
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3714      	adds	r7, #20
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	20000000 	.word	0x20000000
 8002d14:	431bde83 	.word	0x431bde83
 8002d18:	40012300 	.word	0x40012300
 8002d1c:	40012000 	.word	0x40012000
 8002d20:	40012100 	.word	0x40012100
 8002d24:	40012200 	.word	0x40012200

08002d28 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d44:	d113      	bne.n	8002d6e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002d50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d54:	d10b      	bne.n	8002d6e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	f043 0220 	orr.w	r2, r3, #32
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e063      	b.n	8002e36 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002d6e:	f7ff fe95 	bl	8002a9c <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d74:	e021      	b.n	8002dba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d01d      	beq.n	8002dba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d007      	beq.n	8002d94 <HAL_ADC_PollForConversion+0x6c>
 8002d84:	f7ff fe8a 	bl	8002a9c <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d212      	bcs.n	8002dba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d00b      	beq.n	8002dba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da6:	f043 0204 	orr.w	r2, r3, #4
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e03d      	b.n	8002e36 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d1d6      	bne.n	8002d76 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f06f 0212 	mvn.w	r2, #18
 8002dd0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d123      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d11f      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d006      	beq.n	8002e10 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d111      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x1c>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e113      	b.n	800309c <HAL_ADC_ConfigChannel+0x244>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d925      	bls.n	8002ed0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	3b1e      	subs	r3, #30
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68d9      	ldr	r1, [r3, #12]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4403      	add	r3, r0
 8002ec2:	3b1e      	subs	r3, #30
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	e022      	b.n	8002f16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43da      	mvns	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6919      	ldr	r1, [r3, #16]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4403      	add	r3, r0
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d824      	bhi.n	8002f68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3b05      	subs	r3, #5
 8002f30:	221f      	movs	r2, #31
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	3b05      	subs	r3, #5
 8002f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
 8002f66:	e04c      	b.n	8003002 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	d824      	bhi.n	8002fba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b23      	subs	r3, #35	; 0x23
 8002f82:	221f      	movs	r2, #31
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	3b23      	subs	r3, #35	; 0x23
 8002fac:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb8:	e023      	b.n	8003002 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b41      	subs	r3, #65	; 0x41
 8002fcc:	221f      	movs	r2, #31
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	400a      	ands	r2, r1
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b41      	subs	r3, #65	; 0x41
 8002ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003002:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_ADC_ConfigChannel+0x250>)
 8003004:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a28      	ldr	r2, [pc, #160]	; (80030ac <HAL_ADC_ConfigChannel+0x254>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d10f      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x1d8>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b12      	cmp	r3, #18
 8003016:	d10b      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a1d      	ldr	r2, [pc, #116]	; (80030ac <HAL_ADC_ConfigChannel+0x254>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d12b      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x23a>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a1c      	ldr	r2, [pc, #112]	; (80030b0 <HAL_ADC_ConfigChannel+0x258>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d003      	beq.n	800304c <HAL_ADC_ConfigChannel+0x1f4>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2b11      	cmp	r3, #17
 800304a:	d122      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a11      	ldr	r2, [pc, #68]	; (80030b0 <HAL_ADC_ConfigChannel+0x258>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d111      	bne.n	8003092 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800306e:	4b11      	ldr	r3, [pc, #68]	; (80030b4 <HAL_ADC_ConfigChannel+0x25c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a11      	ldr	r2, [pc, #68]	; (80030b8 <HAL_ADC_ConfigChannel+0x260>)
 8003074:	fba2 2303 	umull	r2, r3, r2, r3
 8003078:	0c9a      	lsrs	r2, r3, #18
 800307a:	4613      	mov	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4413      	add	r3, r2
 8003080:	005b      	lsls	r3, r3, #1
 8003082:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003084:	e002      	b.n	800308c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	3b01      	subs	r3, #1
 800308a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f9      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40012300 	.word	0x40012300
 80030ac:	40012000 	.word	0x40012000
 80030b0:	10000012 	.word	0x10000012
 80030b4:	20000000 	.word	0x20000000
 80030b8:	431bde83 	.word	0x431bde83

080030bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030c4:	4b79      	ldr	r3, [pc, #484]	; (80032ac <ADC_Init+0x1f0>)
 80030c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	685a      	ldr	r2, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	431a      	orrs	r2, r3
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6859      	ldr	r1, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	021a      	lsls	r2, r3, #8
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003114:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6859      	ldr	r1, [r3, #4]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	430a      	orrs	r2, r1
 8003126:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003136:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6899      	ldr	r1, [r3, #8]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314e:	4a58      	ldr	r2, [pc, #352]	; (80032b0 <ADC_Init+0x1f4>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d022      	beq.n	800319a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003162:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6899      	ldr	r1, [r3, #8]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003184:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6899      	ldr	r1, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	e00f      	b.n	80031ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 0202 	bic.w	r2, r2, #2
 80031c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6899      	ldr	r1, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7e1b      	ldrb	r3, [r3, #24]
 80031d4:	005a      	lsls	r2, r3, #1
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003206:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6859      	ldr	r1, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	3b01      	subs	r3, #1
 8003214:	035a      	lsls	r2, r3, #13
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	e007      	b.n	8003230 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800322e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800323e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	3b01      	subs	r3, #1
 800324c:	051a      	lsls	r2, r3, #20
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003264:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6899      	ldr	r1, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003272:	025a      	lsls	r2, r3, #9
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	689a      	ldr	r2, [r3, #8]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6899      	ldr	r1, [r3, #8]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	029a      	lsls	r2, r3, #10
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr
 80032ac:	40012300 	.word	0x40012300
 80032b0:	0f000001 	.word	0x0f000001

080032b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b085      	sub	sp, #20
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032d0:	4013      	ands	r3, r2
 80032d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032e6:	4a04      	ldr	r2, [pc, #16]	; (80032f8 <__NVIC_SetPriorityGrouping+0x44>)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	60d3      	str	r3, [r2, #12]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003300:	4b04      	ldr	r3, [pc, #16]	; (8003314 <__NVIC_GetPriorityGrouping+0x18>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	0a1b      	lsrs	r3, r3, #8
 8003306:	f003 0307 	and.w	r3, r3, #7
}
 800330a:	4618      	mov	r0, r3
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	e000ed00 	.word	0xe000ed00

08003318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	4603      	mov	r3, r0
 8003320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003326:	2b00      	cmp	r3, #0
 8003328:	db0b      	blt.n	8003342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800332a:	79fb      	ldrb	r3, [r7, #7]
 800332c:	f003 021f 	and.w	r2, r3, #31
 8003330:	4907      	ldr	r1, [pc, #28]	; (8003350 <__NVIC_EnableIRQ+0x38>)
 8003332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003336:	095b      	lsrs	r3, r3, #5
 8003338:	2001      	movs	r0, #1
 800333a:	fa00 f202 	lsl.w	r2, r0, r2
 800333e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	e000e100 	.word	0xe000e100

08003354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	6039      	str	r1, [r7, #0]
 800335e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	db0a      	blt.n	800337e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	490c      	ldr	r1, [pc, #48]	; (80033a0 <__NVIC_SetPriority+0x4c>)
 800336e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003372:	0112      	lsls	r2, r2, #4
 8003374:	b2d2      	uxtb	r2, r2
 8003376:	440b      	add	r3, r1
 8003378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800337c:	e00a      	b.n	8003394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	b2da      	uxtb	r2, r3
 8003382:	4908      	ldr	r1, [pc, #32]	; (80033a4 <__NVIC_SetPriority+0x50>)
 8003384:	79fb      	ldrb	r3, [r7, #7]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	3b04      	subs	r3, #4
 800338c:	0112      	lsls	r2, r2, #4
 800338e:	b2d2      	uxtb	r2, r2
 8003390:	440b      	add	r3, r1
 8003392:	761a      	strb	r2, [r3, #24]
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr
 80033a0:	e000e100 	.word	0xe000e100
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b089      	sub	sp, #36	; 0x24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f1c3 0307 	rsb	r3, r3, #7
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	bf28      	it	cs
 80033c6:	2304      	movcs	r3, #4
 80033c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3304      	adds	r3, #4
 80033ce:	2b06      	cmp	r3, #6
 80033d0:	d902      	bls.n	80033d8 <NVIC_EncodePriority+0x30>
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3b03      	subs	r3, #3
 80033d6:	e000      	b.n	80033da <NVIC_EncodePriority+0x32>
 80033d8:	2300      	movs	r3, #0
 80033da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	f04f 32ff 	mov.w	r2, #4294967295
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43da      	mvns	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	401a      	ands	r2, r3
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033f0:	f04f 31ff 	mov.w	r1, #4294967295
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa01 f303 	lsl.w	r3, r1, r3
 80033fa:	43d9      	mvns	r1, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003400:	4313      	orrs	r3, r2
         );
}
 8003402:	4618      	mov	r0, r3
 8003404:	3724      	adds	r7, #36	; 0x24
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
	...

08003410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b082      	sub	sp, #8
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3b01      	subs	r3, #1
 800341c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003420:	d301      	bcc.n	8003426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003422:	2301      	movs	r3, #1
 8003424:	e00f      	b.n	8003446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003426:	4a0a      	ldr	r2, [pc, #40]	; (8003450 <SysTick_Config+0x40>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	3b01      	subs	r3, #1
 800342c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800342e:	210f      	movs	r1, #15
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	f7ff ff8e 	bl	8003354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <SysTick_Config+0x40>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800343e:	4b04      	ldr	r3, [pc, #16]	; (8003450 <SysTick_Config+0x40>)
 8003440:	2207      	movs	r2, #7
 8003442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	e000e010 	.word	0xe000e010

08003454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff29 	bl	80032b4 <__NVIC_SetPriorityGrouping>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800346a:	b580      	push	{r7, lr}
 800346c:	b086      	sub	sp, #24
 800346e:	af00      	add	r7, sp, #0
 8003470:	4603      	mov	r3, r0
 8003472:	60b9      	str	r1, [r7, #8]
 8003474:	607a      	str	r2, [r7, #4]
 8003476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003478:	2300      	movs	r3, #0
 800347a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800347c:	f7ff ff3e 	bl	80032fc <__NVIC_GetPriorityGrouping>
 8003480:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	6978      	ldr	r0, [r7, #20]
 8003488:	f7ff ff8e 	bl	80033a8 <NVIC_EncodePriority>
 800348c:	4602      	mov	r2, r0
 800348e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003492:	4611      	mov	r1, r2
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff ff5d 	bl	8003354 <__NVIC_SetPriority>
}
 800349a:	bf00      	nop
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	4603      	mov	r3, r0
 80034aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff ff31 	bl	8003318 <__NVIC_EnableIRQ>
}
 80034b6:	bf00      	nop
 80034b8:	3708      	adds	r7, #8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b082      	sub	sp, #8
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ffa2 	bl	8003410 <SysTick_Config>
 80034cc:	4603      	mov	r3, r0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034e4:	f7ff fada 	bl	8002a9c <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e099      	b.n	8003628 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2202      	movs	r2, #2
 80034f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0201 	bic.w	r2, r2, #1
 8003512:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003514:	e00f      	b.n	8003536 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003516:	f7ff fac1 	bl	8002a9c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b05      	cmp	r3, #5
 8003522:	d908      	bls.n	8003536 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2203      	movs	r2, #3
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e078      	b.n	8003628 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e8      	bne.n	8003516 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4b38      	ldr	r3, [pc, #224]	; (8003630 <HAL_DMA_Init+0x158>)
 8003550:	4013      	ands	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003562:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800356e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800357a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a1b      	ldr	r3, [r3, #32]
 8003580:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	4313      	orrs	r3, r2
 8003586:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2b04      	cmp	r3, #4
 800358e:	d107      	bne.n	80035a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003598:	4313      	orrs	r3, r2
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	4313      	orrs	r3, r2
 800359e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f023 0307 	bic.w	r3, r3, #7
 80035b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	4313      	orrs	r3, r2
 80035c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d117      	bne.n	80035fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	697a      	ldr	r2, [r7, #20]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00e      	beq.n	80035fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f000 facd 	bl	8003b7c <DMA_CheckFifoParam>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2240      	movs	r2, #64	; 0x40
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035f6:	2301      	movs	r3, #1
 80035f8:	e016      	b.n	8003628 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f000 fa84 	bl	8003b10 <DMA_CalcBaseAndBitshift>
 8003608:	4603      	mov	r3, r0
 800360a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003610:	223f      	movs	r2, #63	; 0x3f
 8003612:	409a      	lsls	r2, r3
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2201      	movs	r2, #1
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	f010803f 	.word	0xf010803f

08003634 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e050      	b.n	80036e8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d101      	bne.n	8003656 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003652:	2302      	movs	r3, #2
 8003654:	e048      	b.n	80036e8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0201 	bic.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2200      	movs	r2, #0
 8003674:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2200      	movs	r2, #0
 8003684:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2200      	movs	r2, #0
 800368c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2221      	movs	r2, #33	; 0x21
 8003694:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa3a 	bl	8003b10 <DMA_CalcBaseAndBitshift>
 800369c:	4603      	mov	r3, r0
 800369e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	223f      	movs	r2, #63	; 0x3f
 80036ca:	409a      	lsls	r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
 80036fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_DMA_Start_IT+0x26>
 8003712:	2302      	movs	r3, #2
 8003714:	e040      	b.n	8003798 <HAL_DMA_Start_IT+0xa8>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b01      	cmp	r3, #1
 8003728:	d12f      	bne.n	800378a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68b9      	ldr	r1, [r7, #8]
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f9b8 	bl	8003ab4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003748:	223f      	movs	r2, #63	; 0x3f
 800374a:	409a      	lsls	r2, r3
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0216 	orr.w	r2, r2, #22
 800375e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0208 	orr.w	r2, r2, #8
 8003776:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e005      	b.n	8003796 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003792:	2302      	movs	r3, #2
 8003794:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003796:	7dfb      	ldrb	r3, [r7, #23]
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b086      	sub	sp, #24
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037ac:	4b8e      	ldr	r3, [pc, #568]	; (80039e8 <HAL_DMA_IRQHandler+0x248>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a8e      	ldr	r2, [pc, #568]	; (80039ec <HAL_DMA_IRQHandler+0x24c>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	0a9b      	lsrs	r3, r3, #10
 80037b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ca:	2208      	movs	r2, #8
 80037cc:	409a      	lsls	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	4013      	ands	r3, r2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d01a      	beq.n	800380c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d013      	beq.n	800380c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 0204 	bic.w	r2, r2, #4
 80037f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	2208      	movs	r2, #8
 80037fa:	409a      	lsls	r2, r3
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003804:	f043 0201 	orr.w	r2, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003810:	2201      	movs	r2, #1
 8003812:	409a      	lsls	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d012      	beq.n	8003842 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800382e:	2201      	movs	r2, #1
 8003830:	409a      	lsls	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800383a:	f043 0202 	orr.w	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003846:	2204      	movs	r2, #4
 8003848:	409a      	lsls	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d012      	beq.n	8003878 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003864:	2204      	movs	r2, #4
 8003866:	409a      	lsls	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003870:	f043 0204 	orr.w	r2, r3, #4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800387c:	2210      	movs	r2, #16
 800387e:	409a      	lsls	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4013      	ands	r3, r2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d043      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0308 	and.w	r3, r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	d03c      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800389a:	2210      	movs	r2, #16
 800389c:	409a      	lsls	r2, r3
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d018      	beq.n	80038e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d108      	bne.n	80038d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d024      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	4798      	blx	r3
 80038ce:	e01f      	b.n	8003910 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d01b      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
 80038e0:	e016      	b.n	8003910 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d107      	bne.n	8003900 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0208 	bic.w	r2, r2, #8
 80038fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003914:	2220      	movs	r2, #32
 8003916:	409a      	lsls	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4013      	ands	r3, r2
 800391c:	2b00      	cmp	r3, #0
 800391e:	f000 808f 	beq.w	8003a40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0310 	and.w	r3, r3, #16
 800392c:	2b00      	cmp	r3, #0
 800392e:	f000 8087 	beq.w	8003a40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	2220      	movs	r2, #32
 8003938:	409a      	lsls	r2, r3
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b05      	cmp	r3, #5
 8003948:	d136      	bne.n	80039b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 0216 	bic.w	r2, r2, #22
 8003958:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695a      	ldr	r2, [r3, #20]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003968:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	2b00      	cmp	r3, #0
 8003970:	d103      	bne.n	800397a <HAL_DMA_IRQHandler+0x1da>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0208 	bic.w	r2, r2, #8
 8003988:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800398e:	223f      	movs	r2, #63	; 0x3f
 8003990:	409a      	lsls	r2, r3
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d07e      	beq.n	8003aac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
        }
        return;
 80039b6:	e079      	b.n	8003aac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d01d      	beq.n	8003a02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10d      	bne.n	80039f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d031      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	4798      	blx	r3
 80039e4:	e02c      	b.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
 80039e6:	bf00      	nop
 80039e8:	20000000 	.word	0x20000000
 80039ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d023      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
 8003a00:	e01e      	b.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10f      	bne.n	8003a30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 0210 	bic.w	r2, r2, #16
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d032      	beq.n	8003aae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d022      	beq.n	8003a9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2205      	movs	r2, #5
 8003a58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0201 	bic.w	r2, r2, #1
 8003a6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d307      	bcc.n	8003a88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f2      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x2cc>
 8003a86:	e000      	b.n	8003a8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
 8003aaa:	e000      	b.n	8003aae <HAL_DMA_IRQHandler+0x30e>
        return;
 8003aac:	bf00      	nop
    }
  }
}
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ad0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b40      	cmp	r3, #64	; 0x40
 8003ae0:	d108      	bne.n	8003af4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68ba      	ldr	r2, [r7, #8]
 8003af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003af2:	e007      	b.n	8003b04 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	60da      	str	r2, [r3, #12]
}
 8003b04:	bf00      	nop
 8003b06:	3714      	adds	r7, #20
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0e:	4770      	bx	lr

08003b10 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	3b10      	subs	r3, #16
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <DMA_CalcBaseAndBitshift+0x64>)
 8003b22:	fba2 2303 	umull	r2, r3, r2, r3
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b2a:	4a13      	ldr	r2, [pc, #76]	; (8003b78 <DMA_CalcBaseAndBitshift+0x68>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	461a      	mov	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b03      	cmp	r3, #3
 8003b3c:	d909      	bls.n	8003b52 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b46:	f023 0303 	bic.w	r3, r3, #3
 8003b4a:	1d1a      	adds	r2, r3, #4
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b50:	e007      	b.n	8003b62 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b5a:	f023 0303 	bic.w	r3, r3, #3
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3714      	adds	r7, #20
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	aaaaaaab 	.word	0xaaaaaaab
 8003b78:	0800eabc 	.word	0x0800eabc

08003b7c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d11f      	bne.n	8003bd6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d856      	bhi.n	8003c4a <DMA_CheckFifoParam+0xce>
 8003b9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ba4 <DMA_CheckFifoParam+0x28>)
 8003b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba2:	bf00      	nop
 8003ba4:	08003bb5 	.word	0x08003bb5
 8003ba8:	08003bc7 	.word	0x08003bc7
 8003bac:	08003bb5 	.word	0x08003bb5
 8003bb0:	08003c4b 	.word	0x08003c4b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d046      	beq.n	8003c4e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc4:	e043      	b.n	8003c4e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bce:	d140      	bne.n	8003c52 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd4:	e03d      	b.n	8003c52 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bde:	d121      	bne.n	8003c24 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	2b03      	cmp	r3, #3
 8003be4:	d837      	bhi.n	8003c56 <DMA_CheckFifoParam+0xda>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <DMA_CheckFifoParam+0x70>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003bfd 	.word	0x08003bfd
 8003bf0:	08003c03 	.word	0x08003c03
 8003bf4:	08003bfd 	.word	0x08003bfd
 8003bf8:	08003c15 	.word	0x08003c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8003c00:	e030      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d025      	beq.n	8003c5a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c12:	e022      	b.n	8003c5a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c18:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c1c:	d11f      	bne.n	8003c5e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c22:	e01c      	b.n	8003c5e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d903      	bls.n	8003c32 <DMA_CheckFifoParam+0xb6>
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2b03      	cmp	r3, #3
 8003c2e:	d003      	beq.n	8003c38 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c30:	e018      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
      break;
 8003c36:	e015      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	73fb      	strb	r3, [r7, #15]
      break;
 8003c48:	e00b      	b.n	8003c62 <DMA_CheckFifoParam+0xe6>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e00a      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e008      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
 8003c54:	e006      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c56:	bf00      	nop
 8003c58:	e004      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e002      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c5e:	bf00      	nop
 8003c60:	e000      	b.n	8003c64 <DMA_CheckFifoParam+0xe8>
      break;
 8003c62:	bf00      	nop
    }
  } 
  
  return status; 
 8003c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop

08003c74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e165      	b.n	8003f5c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c90:	2201      	movs	r2, #1
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	697a      	ldr	r2, [r7, #20]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	f040 8154 	bne.w	8003f56 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d005      	beq.n	8003cc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc2:	2b02      	cmp	r3, #2
 8003cc4:	d130      	bne.n	8003d28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	005b      	lsls	r3, r3, #1
 8003cd0:	2203      	movs	r2, #3
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43db      	mvns	r3, r3
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 0201 	and.w	r2, r3, #1
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d017      	beq.n	8003d64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	2203      	movs	r2, #3
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	69fb      	ldr	r3, [r7, #28]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d123      	bne.n	8003db8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	08da      	lsrs	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3208      	adds	r2, #8
 8003d78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	220f      	movs	r2, #15
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	08da      	lsrs	r2, r3, #3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	3208      	adds	r2, #8
 8003db2:	69b9      	ldr	r1, [r7, #24]
 8003db4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 0203 	and.w	r2, r3, #3
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	005b      	lsls	r3, r3, #1
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80ae 	beq.w	8003f56 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	4b5d      	ldr	r3, [pc, #372]	; (8003f74 <HAL_GPIO_Init+0x300>)
 8003e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e02:	4a5c      	ldr	r2, [pc, #368]	; (8003f74 <HAL_GPIO_Init+0x300>)
 8003e04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e08:	6453      	str	r3, [r2, #68]	; 0x44
 8003e0a:	4b5a      	ldr	r3, [pc, #360]	; (8003f74 <HAL_GPIO_Init+0x300>)
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e16:	4a58      	ldr	r2, [pc, #352]	; (8003f78 <HAL_GPIO_Init+0x304>)
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	089b      	lsrs	r3, r3, #2
 8003e1c:	3302      	adds	r3, #2
 8003e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	f003 0303 	and.w	r3, r3, #3
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	220f      	movs	r2, #15
 8003e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e32:	43db      	mvns	r3, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4013      	ands	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a4f      	ldr	r2, [pc, #316]	; (8003f7c <HAL_GPIO_Init+0x308>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d025      	beq.n	8003e8e <HAL_GPIO_Init+0x21a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a4e      	ldr	r2, [pc, #312]	; (8003f80 <HAL_GPIO_Init+0x30c>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d01f      	beq.n	8003e8a <HAL_GPIO_Init+0x216>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a4d      	ldr	r2, [pc, #308]	; (8003f84 <HAL_GPIO_Init+0x310>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d019      	beq.n	8003e86 <HAL_GPIO_Init+0x212>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4c      	ldr	r2, [pc, #304]	; (8003f88 <HAL_GPIO_Init+0x314>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d013      	beq.n	8003e82 <HAL_GPIO_Init+0x20e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4b      	ldr	r2, [pc, #300]	; (8003f8c <HAL_GPIO_Init+0x318>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d00d      	beq.n	8003e7e <HAL_GPIO_Init+0x20a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4a      	ldr	r2, [pc, #296]	; (8003f90 <HAL_GPIO_Init+0x31c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d007      	beq.n	8003e7a <HAL_GPIO_Init+0x206>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a49      	ldr	r2, [pc, #292]	; (8003f94 <HAL_GPIO_Init+0x320>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d101      	bne.n	8003e76 <HAL_GPIO_Init+0x202>
 8003e72:	2306      	movs	r3, #6
 8003e74:	e00c      	b.n	8003e90 <HAL_GPIO_Init+0x21c>
 8003e76:	2307      	movs	r3, #7
 8003e78:	e00a      	b.n	8003e90 <HAL_GPIO_Init+0x21c>
 8003e7a:	2305      	movs	r3, #5
 8003e7c:	e008      	b.n	8003e90 <HAL_GPIO_Init+0x21c>
 8003e7e:	2304      	movs	r3, #4
 8003e80:	e006      	b.n	8003e90 <HAL_GPIO_Init+0x21c>
 8003e82:	2303      	movs	r3, #3
 8003e84:	e004      	b.n	8003e90 <HAL_GPIO_Init+0x21c>
 8003e86:	2302      	movs	r3, #2
 8003e88:	e002      	b.n	8003e90 <HAL_GPIO_Init+0x21c>
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <HAL_GPIO_Init+0x21c>
 8003e8e:	2300      	movs	r3, #0
 8003e90:	69fa      	ldr	r2, [r7, #28]
 8003e92:	f002 0203 	and.w	r2, r2, #3
 8003e96:	0092      	lsls	r2, r2, #2
 8003e98:	4093      	lsls	r3, r2
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ea0:	4935      	ldr	r1, [pc, #212]	; (8003f78 <HAL_GPIO_Init+0x304>)
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	089b      	lsrs	r3, r3, #2
 8003ea6:	3302      	adds	r3, #2
 8003ea8:	69ba      	ldr	r2, [r7, #24]
 8003eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eae:	4b3a      	ldr	r3, [pc, #232]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ed2:	4a31      	ldr	r2, [pc, #196]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003efc:	4a26      	ldr	r2, [pc, #152]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f02:	4b25      	ldr	r3, [pc, #148]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	43db      	mvns	r3, r3
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	4013      	ands	r3, r2
 8003f10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f26:	4a1c      	ldr	r2, [pc, #112]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f2c:	4b1a      	ldr	r3, [pc, #104]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f50:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <HAL_GPIO_Init+0x324>)
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	3301      	adds	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b0f      	cmp	r3, #15
 8003f60:	f67f ae96 	bls.w	8003c90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop
 8003f68:	3724      	adds	r7, #36	; 0x24
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40023800 	.word	0x40023800
 8003f78:	40013800 	.word	0x40013800
 8003f7c:	40020000 	.word	0x40020000
 8003f80:	40020400 	.word	0x40020400
 8003f84:	40020800 	.word	0x40020800
 8003f88:	40020c00 	.word	0x40020c00
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	40021400 	.word	0x40021400
 8003f94:	40021800 	.word	0x40021800
 8003f98:	40013c00 	.word	0x40013c00

08003f9c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b087      	sub	sp, #28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
 8003fb6:	e0c7      	b.n	8004148 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fb8:	2201      	movs	r2, #1
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	f040 80b7 	bne.w	8004142 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003fd4:	4a62      	ldr	r2, [pc, #392]	; (8004160 <HAL_GPIO_DeInit+0x1c4>)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	089b      	lsrs	r3, r3, #2
 8003fda:	3302      	adds	r3, #2
 8003fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fe0:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	220f      	movs	r2, #15
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	68ba      	ldr	r2, [r7, #8]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_GPIO_DeInit+0x1c8>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d025      	beq.n	800404a <HAL_GPIO_DeInit+0xae>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a59      	ldr	r2, [pc, #356]	; (8004168 <HAL_GPIO_DeInit+0x1cc>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01f      	beq.n	8004046 <HAL_GPIO_DeInit+0xaa>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a58      	ldr	r2, [pc, #352]	; (800416c <HAL_GPIO_DeInit+0x1d0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d019      	beq.n	8004042 <HAL_GPIO_DeInit+0xa6>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a57      	ldr	r2, [pc, #348]	; (8004170 <HAL_GPIO_DeInit+0x1d4>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_GPIO_DeInit+0xa2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a56      	ldr	r2, [pc, #344]	; (8004174 <HAL_GPIO_DeInit+0x1d8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00d      	beq.n	800403a <HAL_GPIO_DeInit+0x9e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a55      	ldr	r2, [pc, #340]	; (8004178 <HAL_GPIO_DeInit+0x1dc>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <HAL_GPIO_DeInit+0x9a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a54      	ldr	r2, [pc, #336]	; (800417c <HAL_GPIO_DeInit+0x1e0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_GPIO_DeInit+0x96>
 800402e:	2306      	movs	r3, #6
 8004030:	e00c      	b.n	800404c <HAL_GPIO_DeInit+0xb0>
 8004032:	2307      	movs	r3, #7
 8004034:	e00a      	b.n	800404c <HAL_GPIO_DeInit+0xb0>
 8004036:	2305      	movs	r3, #5
 8004038:	e008      	b.n	800404c <HAL_GPIO_DeInit+0xb0>
 800403a:	2304      	movs	r3, #4
 800403c:	e006      	b.n	800404c <HAL_GPIO_DeInit+0xb0>
 800403e:	2303      	movs	r3, #3
 8004040:	e004      	b.n	800404c <HAL_GPIO_DeInit+0xb0>
 8004042:	2302      	movs	r3, #2
 8004044:	e002      	b.n	800404c <HAL_GPIO_DeInit+0xb0>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_GPIO_DeInit+0xb0>
 800404a:	2300      	movs	r3, #0
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	f002 0203 	and.w	r2, r2, #3
 8004052:	0092      	lsls	r2, r2, #2
 8004054:	4093      	lsls	r3, r2
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	429a      	cmp	r2, r3
 800405a:	d132      	bne.n	80040c2 <HAL_GPIO_DeInit+0x126>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800405c:	4b48      	ldr	r3, [pc, #288]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	43db      	mvns	r3, r3
 8004064:	4946      	ldr	r1, [pc, #280]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 8004066:	4013      	ands	r3, r2
 8004068:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800406a:	4b45      	ldr	r3, [pc, #276]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 800406c:	685a      	ldr	r2, [r3, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	43db      	mvns	r3, r3
 8004072:	4943      	ldr	r1, [pc, #268]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 8004074:	4013      	ands	r3, r2
 8004076:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004078:	4b41      	ldr	r3, [pc, #260]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	43db      	mvns	r3, r3
 8004080:	493f      	ldr	r1, [pc, #252]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 8004082:	4013      	ands	r3, r2
 8004084:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004086:	4b3e      	ldr	r3, [pc, #248]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	43db      	mvns	r3, r3
 800408e:	493c      	ldr	r1, [pc, #240]	; (8004180 <HAL_GPIO_DeInit+0x1e4>)
 8004090:	4013      	ands	r3, r2
 8004092:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80040a4:	4a2e      	ldr	r2, [pc, #184]	; (8004160 <HAL_GPIO_DeInit+0x1c4>)
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	089b      	lsrs	r3, r3, #2
 80040aa:	3302      	adds	r3, #2
 80040ac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	43da      	mvns	r2, r3
 80040b4:	482a      	ldr	r0, [pc, #168]	; (8004160 <HAL_GPIO_DeInit+0x1c4>)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	089b      	lsrs	r3, r3, #2
 80040ba:	400a      	ands	r2, r1
 80040bc:	3302      	adds	r3, #2
 80040be:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	005b      	lsls	r3, r3, #1
 80040ca:	2103      	movs	r1, #3
 80040cc:	fa01 f303 	lsl.w	r3, r1, r3
 80040d0:	43db      	mvns	r3, r3
 80040d2:	401a      	ands	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	08da      	lsrs	r2, r3, #3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	3208      	adds	r2, #8
 80040e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	220f      	movs	r2, #15
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43db      	mvns	r3, r3
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	08d2      	lsrs	r2, r2, #3
 80040f8:	4019      	ands	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	3208      	adds	r2, #8
 80040fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	2103      	movs	r1, #3
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	43db      	mvns	r3, r3
 8004112:	401a      	ands	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	2101      	movs	r1, #1
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	fa01 f303 	lsl.w	r3, r1, r3
 8004124:	43db      	mvns	r3, r3
 8004126:	401a      	ands	r2, r3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2103      	movs	r1, #3
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	401a      	ands	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	3301      	adds	r3, #1
 8004146:	617b      	str	r3, [r7, #20]
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2b0f      	cmp	r3, #15
 800414c:	f67f af34 	bls.w	8003fb8 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40013800 	.word	0x40013800
 8004164:	40020000 	.word	0x40020000
 8004168:	40020400 	.word	0x40020400
 800416c:	40020800 	.word	0x40020800
 8004170:	40020c00 	.word	0x40020c00
 8004174:	40021000 	.word	0x40021000
 8004178:	40021400 	.word	0x40021400
 800417c:	40021800 	.word	0x40021800
 8004180:	40013c00 	.word	0x40013c00

08004184 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	460b      	mov	r3, r1
 800418e:	807b      	strh	r3, [r7, #2]
 8004190:	4613      	mov	r3, r2
 8004192:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004194:	787b      	ldrb	r3, [r7, #1]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800419a:	887a      	ldrh	r2, [r7, #2]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041a0:	e003      	b.n	80041aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	041a      	lsls	r2, r3, #16
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	619a      	str	r2, [r3, #24]
}
 80041aa:	bf00      	nop
 80041ac:	370c      	adds	r7, #12
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e12b      	b.n	8004422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d106      	bne.n	80041e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f7fd fd44 	bl	8001c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2224      	movs	r2, #36	; 0x24
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800420a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800421a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800421c:	f000 fa02 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8004220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	4a81      	ldr	r2, [pc, #516]	; (800442c <HAL_I2C_Init+0x274>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d807      	bhi.n	800423c <HAL_I2C_Init+0x84>
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4a80      	ldr	r2, [pc, #512]	; (8004430 <HAL_I2C_Init+0x278>)
 8004230:	4293      	cmp	r3, r2
 8004232:	bf94      	ite	ls
 8004234:	2301      	movls	r3, #1
 8004236:	2300      	movhi	r3, #0
 8004238:	b2db      	uxtb	r3, r3
 800423a:	e006      	b.n	800424a <HAL_I2C_Init+0x92>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	4a7d      	ldr	r2, [pc, #500]	; (8004434 <HAL_I2C_Init+0x27c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	bf94      	ite	ls
 8004244:	2301      	movls	r3, #1
 8004246:	2300      	movhi	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e0e7      	b.n	8004422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	4a78      	ldr	r2, [pc, #480]	; (8004438 <HAL_I2C_Init+0x280>)
 8004256:	fba2 2303 	umull	r2, r3, r2, r3
 800425a:	0c9b      	lsrs	r3, r3, #18
 800425c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6a1b      	ldr	r3, [r3, #32]
 8004278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a6a      	ldr	r2, [pc, #424]	; (800442c <HAL_I2C_Init+0x274>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d802      	bhi.n	800428c <HAL_I2C_Init+0xd4>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	3301      	adds	r3, #1
 800428a:	e009      	b.n	80042a0 <HAL_I2C_Init+0xe8>
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004292:	fb02 f303 	mul.w	r3, r2, r3
 8004296:	4a69      	ldr	r2, [pc, #420]	; (800443c <HAL_I2C_Init+0x284>)
 8004298:	fba2 2303 	umull	r2, r3, r2, r3
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	3301      	adds	r3, #1
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	430b      	orrs	r3, r1
 80042a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	495c      	ldr	r1, [pc, #368]	; (800442c <HAL_I2C_Init+0x274>)
 80042bc:	428b      	cmp	r3, r1
 80042be:	d819      	bhi.n	80042f4 <HAL_I2C_Init+0x13c>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	1e59      	subs	r1, r3, #1
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042d4:	400b      	ands	r3, r1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <HAL_I2C_Init+0x138>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	1e59      	subs	r1, r3, #1
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e8:	3301      	adds	r3, #1
 80042ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ee:	e051      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 80042f0:	2304      	movs	r3, #4
 80042f2:	e04f      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d111      	bne.n	8004320 <HAL_I2C_Init+0x168>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1e58      	subs	r0, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6859      	ldr	r1, [r3, #4]
 8004304:	460b      	mov	r3, r1
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	440b      	add	r3, r1
 800430a:	fbb0 f3f3 	udiv	r3, r0, r3
 800430e:	3301      	adds	r3, #1
 8004310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf0c      	ite	eq
 8004318:	2301      	moveq	r3, #1
 800431a:	2300      	movne	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	e012      	b.n	8004346 <HAL_I2C_Init+0x18e>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e58      	subs	r0, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	0099      	lsls	r1, r3, #2
 8004330:	440b      	add	r3, r1
 8004332:	fbb0 f3f3 	udiv	r3, r0, r3
 8004336:	3301      	adds	r3, #1
 8004338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800433c:	2b00      	cmp	r3, #0
 800433e:	bf0c      	ite	eq
 8004340:	2301      	moveq	r3, #1
 8004342:	2300      	movne	r3, #0
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <HAL_I2C_Init+0x196>
 800434a:	2301      	movs	r3, #1
 800434c:	e022      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d10e      	bne.n	8004374 <HAL_I2C_Init+0x1bc>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1e58      	subs	r0, r3, #1
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6859      	ldr	r1, [r3, #4]
 800435e:	460b      	mov	r3, r1
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	440b      	add	r3, r1
 8004364:	fbb0 f3f3 	udiv	r3, r0, r3
 8004368:	3301      	adds	r3, #1
 800436a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004372:	e00f      	b.n	8004394 <HAL_I2C_Init+0x1dc>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	1e58      	subs	r0, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6859      	ldr	r1, [r3, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	0099      	lsls	r1, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	fbb0 f3f3 	udiv	r3, r0, r3
 800438a:	3301      	adds	r3, #1
 800438c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	6809      	ldr	r1, [r1, #0]
 8004398:	4313      	orrs	r3, r2
 800439a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69da      	ldr	r2, [r3, #28]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	430a      	orrs	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6911      	ldr	r1, [r2, #16]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68d2      	ldr	r2, [r2, #12]
 80043ce:	4311      	orrs	r1, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6812      	ldr	r2, [r2, #0]
 80043d4:	430b      	orrs	r3, r1
 80043d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695a      	ldr	r2, [r3, #20]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f042 0201 	orr.w	r2, r2, #1
 8004402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2200      	movs	r2, #0
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	000186a0 	.word	0x000186a0
 8004430:	001e847f 	.word	0x001e847f
 8004434:	003d08ff 	.word	0x003d08ff
 8004438:	431bde83 	.word	0x431bde83
 800443c:	10624dd3 	.word	0x10624dd3

08004440 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0cc      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004454:	4b68      	ldr	r3, [pc, #416]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d90c      	bls.n	800447c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004462:	4b65      	ldr	r3, [pc, #404]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	683a      	ldr	r2, [r7, #0]
 8004466:	b2d2      	uxtb	r2, r2
 8004468:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446a:	4b63      	ldr	r3, [pc, #396]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	683a      	ldr	r2, [r7, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d001      	beq.n	800447c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0b8      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d020      	beq.n	80044ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d005      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004494:	4b59      	ldr	r3, [pc, #356]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	4a58      	ldr	r2, [pc, #352]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800449e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0308 	and.w	r3, r3, #8
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d005      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044ac:	4b53      	ldr	r3, [pc, #332]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	4a52      	ldr	r2, [pc, #328]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b50      	ldr	r3, [pc, #320]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	494d      	ldr	r1, [pc, #308]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d044      	beq.n	8004560 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044de:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d119      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e07f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d003      	beq.n	80044fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d107      	bne.n	800450e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044fe:	4b3f      	ldr	r3, [pc, #252]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d109      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e06f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800450e:	4b3b      	ldr	r3, [pc, #236]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e067      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800451e:	4b37      	ldr	r3, [pc, #220]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	f023 0203 	bic.w	r2, r3, #3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4934      	ldr	r1, [pc, #208]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	4313      	orrs	r3, r2
 800452e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004530:	f7fe fab4 	bl	8002a9c <HAL_GetTick>
 8004534:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004536:	e00a      	b.n	800454e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004538:	f7fe fab0 	bl	8002a9c <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	f241 3288 	movw	r2, #5000	; 0x1388
 8004546:	4293      	cmp	r3, r2
 8004548:	d901      	bls.n	800454e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e04f      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800454e:	4b2b      	ldr	r3, [pc, #172]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 020c 	and.w	r2, r3, #12
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	429a      	cmp	r2, r3
 800455e:	d1eb      	bne.n	8004538 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 030f 	and.w	r3, r3, #15
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	429a      	cmp	r2, r3
 800456c:	d20c      	bcs.n	8004588 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800456e:	4b22      	ldr	r3, [pc, #136]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	683a      	ldr	r2, [r7, #0]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <HAL_RCC_ClockConfig+0x1b8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 030f 	and.w	r3, r3, #15
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	429a      	cmp	r2, r3
 8004582:	d001      	beq.n	8004588 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e032      	b.n	80045ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f003 0304 	and.w	r3, r3, #4
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	4916      	ldr	r1, [pc, #88]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d009      	beq.n	80045c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b2:	4b12      	ldr	r3, [pc, #72]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	691b      	ldr	r3, [r3, #16]
 80045be:	00db      	lsls	r3, r3, #3
 80045c0:	490e      	ldr	r1, [pc, #56]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045c2:	4313      	orrs	r3, r2
 80045c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045c6:	f000 f855 	bl	8004674 <HAL_RCC_GetSysClockFreq>
 80045ca:	4602      	mov	r2, r0
 80045cc:	4b0b      	ldr	r3, [pc, #44]	; (80045fc <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	091b      	lsrs	r3, r3, #4
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	490a      	ldr	r1, [pc, #40]	; (8004600 <HAL_RCC_ClockConfig+0x1c0>)
 80045d8:	5ccb      	ldrb	r3, [r1, r3]
 80045da:	fa22 f303 	lsr.w	r3, r2, r3
 80045de:	4a09      	ldr	r2, [pc, #36]	; (8004604 <HAL_RCC_ClockConfig+0x1c4>)
 80045e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045e2:	4b09      	ldr	r3, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1c8>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe fa14 	bl	8002a14 <HAL_InitTick>

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40023c00 	.word	0x40023c00
 80045fc:	40023800 	.word	0x40023800
 8004600:	0800eaa4 	.word	0x0800eaa4
 8004604:	20000000 	.word	0x20000000
 8004608:	20000004 	.word	0x20000004

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b05      	ldr	r3, [pc, #20]	; (8004644 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a9b      	lsrs	r3, r3, #10
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4903      	ldr	r1, [pc, #12]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40023800 	.word	0x40023800
 8004648:	0800eab4 	.word	0x0800eab4

0800464c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004650:	f7ff ffdc 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004654:	4602      	mov	r2, r0
 8004656:	4b05      	ldr	r3, [pc, #20]	; (800466c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	0b5b      	lsrs	r3, r3, #13
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	4903      	ldr	r1, [pc, #12]	; (8004670 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004662:	5ccb      	ldrb	r3, [r1, r3]
 8004664:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004668:	4618      	mov	r0, r3
 800466a:	bd80      	pop	{r7, pc}
 800466c:	40023800 	.word	0x40023800
 8004670:	0800eab4 	.word	0x0800eab4

08004674 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004678:	b0ae      	sub	sp, #184	; 0xb8
 800467a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8004688:	2300      	movs	r3, #0
 800468a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800468e:	2300      	movs	r3, #0
 8004690:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800469a:	4bcb      	ldr	r3, [pc, #812]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	f003 030c 	and.w	r3, r3, #12
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	f200 8206 	bhi.w	8004ab4 <HAL_RCC_GetSysClockFreq+0x440>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	08004ab5 	.word	0x08004ab5
 80046b8:	08004ab5 	.word	0x08004ab5
 80046bc:	08004ab5 	.word	0x08004ab5
 80046c0:	080046ed 	.word	0x080046ed
 80046c4:	08004ab5 	.word	0x08004ab5
 80046c8:	08004ab5 	.word	0x08004ab5
 80046cc:	08004ab5 	.word	0x08004ab5
 80046d0:	080046f5 	.word	0x080046f5
 80046d4:	08004ab5 	.word	0x08004ab5
 80046d8:	08004ab5 	.word	0x08004ab5
 80046dc:	08004ab5 	.word	0x08004ab5
 80046e0:	080048e5 	.word	0x080048e5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046e4:	4bb9      	ldr	r3, [pc, #740]	; (80049cc <HAL_RCC_GetSysClockFreq+0x358>)
 80046e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80046ea:	e1e7      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046ec:	4bb8      	ldr	r3, [pc, #736]	; (80049d0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80046ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80046f2:	e1e3      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046f4:	4bb4      	ldr	r3, [pc, #720]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004700:	4bb1      	ldr	r3, [pc, #708]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d071      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470c:	4bae      	ldr	r3, [pc, #696]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	099b      	lsrs	r3, r3, #6
 8004712:	2200      	movs	r2, #0
 8004714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004718:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800471c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004724:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800472e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004732:	4622      	mov	r2, r4
 8004734:	462b      	mov	r3, r5
 8004736:	f04f 0000 	mov.w	r0, #0
 800473a:	f04f 0100 	mov.w	r1, #0
 800473e:	0159      	lsls	r1, r3, #5
 8004740:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004744:	0150      	lsls	r0, r2, #5
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4621      	mov	r1, r4
 800474c:	1a51      	subs	r1, r2, r1
 800474e:	6439      	str	r1, [r7, #64]	; 0x40
 8004750:	4629      	mov	r1, r5
 8004752:	eb63 0301 	sbc.w	r3, r3, r1
 8004756:	647b      	str	r3, [r7, #68]	; 0x44
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004764:	4649      	mov	r1, r9
 8004766:	018b      	lsls	r3, r1, #6
 8004768:	4641      	mov	r1, r8
 800476a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800476e:	4641      	mov	r1, r8
 8004770:	018a      	lsls	r2, r1, #6
 8004772:	4641      	mov	r1, r8
 8004774:	1a51      	subs	r1, r2, r1
 8004776:	63b9      	str	r1, [r7, #56]	; 0x38
 8004778:	4649      	mov	r1, r9
 800477a:	eb63 0301 	sbc.w	r3, r3, r1
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004780:	f04f 0200 	mov.w	r2, #0
 8004784:	f04f 0300 	mov.w	r3, #0
 8004788:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800478c:	4649      	mov	r1, r9
 800478e:	00cb      	lsls	r3, r1, #3
 8004790:	4641      	mov	r1, r8
 8004792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004796:	4641      	mov	r1, r8
 8004798:	00ca      	lsls	r2, r1, #3
 800479a:	4610      	mov	r0, r2
 800479c:	4619      	mov	r1, r3
 800479e:	4603      	mov	r3, r0
 80047a0:	4622      	mov	r2, r4
 80047a2:	189b      	adds	r3, r3, r2
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
 80047a6:	462b      	mov	r3, r5
 80047a8:	460a      	mov	r2, r1
 80047aa:	eb42 0303 	adc.w	r3, r2, r3
 80047ae:	637b      	str	r3, [r7, #52]	; 0x34
 80047b0:	f04f 0200 	mov.w	r2, #0
 80047b4:	f04f 0300 	mov.w	r3, #0
 80047b8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047bc:	4629      	mov	r1, r5
 80047be:	024b      	lsls	r3, r1, #9
 80047c0:	4621      	mov	r1, r4
 80047c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047c6:	4621      	mov	r1, r4
 80047c8:	024a      	lsls	r2, r1, #9
 80047ca:	4610      	mov	r0, r2
 80047cc:	4619      	mov	r1, r3
 80047ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047d2:	2200      	movs	r2, #0
 80047d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80047d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80047dc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80047e0:	f7fc fa72 	bl	8000cc8 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047ee:	e067      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047f0:	4b75      	ldr	r3, [pc, #468]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	099b      	lsrs	r3, r3, #6
 80047f6:	2200      	movs	r2, #0
 80047f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047fc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004804:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004808:	67bb      	str	r3, [r7, #120]	; 0x78
 800480a:	2300      	movs	r3, #0
 800480c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800480e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004812:	4622      	mov	r2, r4
 8004814:	462b      	mov	r3, r5
 8004816:	f04f 0000 	mov.w	r0, #0
 800481a:	f04f 0100 	mov.w	r1, #0
 800481e:	0159      	lsls	r1, r3, #5
 8004820:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004824:	0150      	lsls	r0, r2, #5
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	4621      	mov	r1, r4
 800482c:	1a51      	subs	r1, r2, r1
 800482e:	62b9      	str	r1, [r7, #40]	; 0x28
 8004830:	4629      	mov	r1, r5
 8004832:	eb63 0301 	sbc.w	r3, r3, r1
 8004836:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004838:	f04f 0200 	mov.w	r2, #0
 800483c:	f04f 0300 	mov.w	r3, #0
 8004840:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004844:	4649      	mov	r1, r9
 8004846:	018b      	lsls	r3, r1, #6
 8004848:	4641      	mov	r1, r8
 800484a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800484e:	4641      	mov	r1, r8
 8004850:	018a      	lsls	r2, r1, #6
 8004852:	4641      	mov	r1, r8
 8004854:	ebb2 0a01 	subs.w	sl, r2, r1
 8004858:	4649      	mov	r1, r9
 800485a:	eb63 0b01 	sbc.w	fp, r3, r1
 800485e:	f04f 0200 	mov.w	r2, #0
 8004862:	f04f 0300 	mov.w	r3, #0
 8004866:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800486a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800486e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004872:	4692      	mov	sl, r2
 8004874:	469b      	mov	fp, r3
 8004876:	4623      	mov	r3, r4
 8004878:	eb1a 0303 	adds.w	r3, sl, r3
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	462b      	mov	r3, r5
 8004880:	eb4b 0303 	adc.w	r3, fp, r3
 8004884:	627b      	str	r3, [r7, #36]	; 0x24
 8004886:	f04f 0200 	mov.w	r2, #0
 800488a:	f04f 0300 	mov.w	r3, #0
 800488e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004892:	4629      	mov	r1, r5
 8004894:	028b      	lsls	r3, r1, #10
 8004896:	4621      	mov	r1, r4
 8004898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800489c:	4621      	mov	r1, r4
 800489e:	028a      	lsls	r2, r1, #10
 80048a0:	4610      	mov	r0, r2
 80048a2:	4619      	mov	r1, r3
 80048a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048a8:	2200      	movs	r2, #0
 80048aa:	673b      	str	r3, [r7, #112]	; 0x70
 80048ac:	677a      	str	r2, [r7, #116]	; 0x74
 80048ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80048b2:	f7fc fa09 	bl	8000cc8 <__aeabi_uldivmod>
 80048b6:	4602      	mov	r2, r0
 80048b8:	460b      	mov	r3, r1
 80048ba:	4613      	mov	r3, r2
 80048bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048c0:	4b41      	ldr	r3, [pc, #260]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80048d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80048e2:	e0eb      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e4:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d06b      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fc:	4b32      	ldr	r3, [pc, #200]	; (80049c8 <HAL_RCC_GetSysClockFreq+0x354>)
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	099b      	lsrs	r3, r3, #6
 8004902:	2200      	movs	r2, #0
 8004904:	66bb      	str	r3, [r7, #104]	; 0x68
 8004906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004908:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800490a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800490e:	663b      	str	r3, [r7, #96]	; 0x60
 8004910:	2300      	movs	r3, #0
 8004912:	667b      	str	r3, [r7, #100]	; 0x64
 8004914:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004918:	4622      	mov	r2, r4
 800491a:	462b      	mov	r3, r5
 800491c:	f04f 0000 	mov.w	r0, #0
 8004920:	f04f 0100 	mov.w	r1, #0
 8004924:	0159      	lsls	r1, r3, #5
 8004926:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492a:	0150      	lsls	r0, r2, #5
 800492c:	4602      	mov	r2, r0
 800492e:	460b      	mov	r3, r1
 8004930:	4621      	mov	r1, r4
 8004932:	1a51      	subs	r1, r2, r1
 8004934:	61b9      	str	r1, [r7, #24]
 8004936:	4629      	mov	r1, r5
 8004938:	eb63 0301 	sbc.w	r3, r3, r1
 800493c:	61fb      	str	r3, [r7, #28]
 800493e:	f04f 0200 	mov.w	r2, #0
 8004942:	f04f 0300 	mov.w	r3, #0
 8004946:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800494a:	4659      	mov	r1, fp
 800494c:	018b      	lsls	r3, r1, #6
 800494e:	4651      	mov	r1, sl
 8004950:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004954:	4651      	mov	r1, sl
 8004956:	018a      	lsls	r2, r1, #6
 8004958:	4651      	mov	r1, sl
 800495a:	ebb2 0801 	subs.w	r8, r2, r1
 800495e:	4659      	mov	r1, fp
 8004960:	eb63 0901 	sbc.w	r9, r3, r1
 8004964:	f04f 0200 	mov.w	r2, #0
 8004968:	f04f 0300 	mov.w	r3, #0
 800496c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004970:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004974:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004978:	4690      	mov	r8, r2
 800497a:	4699      	mov	r9, r3
 800497c:	4623      	mov	r3, r4
 800497e:	eb18 0303 	adds.w	r3, r8, r3
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	462b      	mov	r3, r5
 8004986:	eb49 0303 	adc.w	r3, r9, r3
 800498a:	617b      	str	r3, [r7, #20]
 800498c:	f04f 0200 	mov.w	r2, #0
 8004990:	f04f 0300 	mov.w	r3, #0
 8004994:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004998:	4629      	mov	r1, r5
 800499a:	024b      	lsls	r3, r1, #9
 800499c:	4621      	mov	r1, r4
 800499e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a2:	4621      	mov	r1, r4
 80049a4:	024a      	lsls	r2, r1, #9
 80049a6:	4610      	mov	r0, r2
 80049a8:	4619      	mov	r1, r3
 80049aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049ae:	2200      	movs	r2, #0
 80049b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80049b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80049b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049b8:	f7fc f986 	bl	8000cc8 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049c6:	e065      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x420>
 80049c8:	40023800 	.word	0x40023800
 80049cc:	00f42400 	.word	0x00f42400
 80049d0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049d4:	4b3d      	ldr	r3, [pc, #244]	; (8004acc <HAL_RCC_GetSysClockFreq+0x458>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	099b      	lsrs	r3, r3, #6
 80049da:	2200      	movs	r2, #0
 80049dc:	4618      	mov	r0, r3
 80049de:	4611      	mov	r1, r2
 80049e0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049e4:	653b      	str	r3, [r7, #80]	; 0x50
 80049e6:	2300      	movs	r3, #0
 80049e8:	657b      	str	r3, [r7, #84]	; 0x54
 80049ea:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80049ee:	4642      	mov	r2, r8
 80049f0:	464b      	mov	r3, r9
 80049f2:	f04f 0000 	mov.w	r0, #0
 80049f6:	f04f 0100 	mov.w	r1, #0
 80049fa:	0159      	lsls	r1, r3, #5
 80049fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a00:	0150      	lsls	r0, r2, #5
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4641      	mov	r1, r8
 8004a08:	1a51      	subs	r1, r2, r1
 8004a0a:	60b9      	str	r1, [r7, #8]
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	eb63 0301 	sbc.w	r3, r3, r1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004a20:	4659      	mov	r1, fp
 8004a22:	018b      	lsls	r3, r1, #6
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	018a      	lsls	r2, r1, #6
 8004a2e:	4651      	mov	r1, sl
 8004a30:	1a54      	subs	r4, r2, r1
 8004a32:	4659      	mov	r1, fp
 8004a34:	eb63 0501 	sbc.w	r5, r3, r1
 8004a38:	f04f 0200 	mov.w	r2, #0
 8004a3c:	f04f 0300 	mov.w	r3, #0
 8004a40:	00eb      	lsls	r3, r5, #3
 8004a42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a46:	00e2      	lsls	r2, r4, #3
 8004a48:	4614      	mov	r4, r2
 8004a4a:	461d      	mov	r5, r3
 8004a4c:	4643      	mov	r3, r8
 8004a4e:	18e3      	adds	r3, r4, r3
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	464b      	mov	r3, r9
 8004a54:	eb45 0303 	adc.w	r3, r5, r3
 8004a58:	607b      	str	r3, [r7, #4]
 8004a5a:	f04f 0200 	mov.w	r2, #0
 8004a5e:	f04f 0300 	mov.w	r3, #0
 8004a62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a66:	4629      	mov	r1, r5
 8004a68:	028b      	lsls	r3, r1, #10
 8004a6a:	4621      	mov	r1, r4
 8004a6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a70:	4621      	mov	r1, r4
 8004a72:	028a      	lsls	r2, r1, #10
 8004a74:	4610      	mov	r0, r2
 8004a76:	4619      	mov	r1, r3
 8004a78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a80:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004a82:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a86:	f7fc f91f 	bl	8000cc8 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4613      	mov	r3, r2
 8004a90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <HAL_RCC_GetSysClockFreq+0x458>)
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	0f1b      	lsrs	r3, r3, #28
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004aa6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004ab2:	e003      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ab4:	4b06      	ldr	r3, [pc, #24]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004ab6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004aba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004abc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	37b8      	adds	r7, #184	; 0xb8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	00f42400 	.word	0x00f42400

08004ad4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e28d      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 8083 	beq.w	8004bfa <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004af4:	4b94      	ldr	r3, [pc, #592]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f003 030c 	and.w	r3, r3, #12
 8004afc:	2b04      	cmp	r3, #4
 8004afe:	d019      	beq.n	8004b34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b00:	4b91      	ldr	r3, [pc, #580]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b0c:	4b8e      	ldr	r3, [pc, #568]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b18:	d00c      	beq.n	8004b34 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4b8b      	ldr	r3, [pc, #556]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b22:	2b0c      	cmp	r3, #12
 8004b24:	d112      	bne.n	8004b4c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b26:	4b88      	ldr	r3, [pc, #544]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	4b84      	ldr	r3, [pc, #528]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05b      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x124>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d157      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e25a      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d106      	bne.n	8004b64 <HAL_RCC_OscConfig+0x90>
 8004b56:	4b7c      	ldr	r3, [pc, #496]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a7b      	ldr	r2, [pc, #492]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e01d      	b.n	8004ba0 <HAL_RCC_OscConfig+0xcc>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0xb4>
 8004b6e:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a75      	ldr	r2, [pc, #468]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b73      	ldr	r3, [pc, #460]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a72      	ldr	r2, [pc, #456]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0xcc>
 8004b88:	4b6f      	ldr	r3, [pc, #444]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a6e      	ldr	r2, [pc, #440]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b6c      	ldr	r3, [pc, #432]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a6b      	ldr	r2, [pc, #428]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fd ff78 	bl	8002a9c <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd ff74 	bl	8002a9c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e21f      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b61      	ldr	r3, [pc, #388]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xdc>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd0:	f7fd ff64 	bl	8002a9c <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fd ff60 	bl	8002a9c <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e20b      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	4b57      	ldr	r3, [pc, #348]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x104>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d06f      	beq.n	8004ce6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c06:	4b50      	ldr	r3, [pc, #320]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d017      	beq.n	8004c42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c12:	4b4d      	ldr	r3, [pc, #308]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c1e:	4b4a      	ldr	r3, [pc, #296]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00b      	beq.n	8004c42 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c2a:	4b47      	ldr	r3, [pc, #284]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004c32:	2b0c      	cmp	r3, #12
 8004c34:	d11c      	bne.n	8004c70 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c36:	4b44      	ldr	r3, [pc, #272]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d116      	bne.n	8004c70 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c42:	4b41      	ldr	r3, [pc, #260]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d005      	beq.n	8004c5a <HAL_RCC_OscConfig+0x186>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d001      	beq.n	8004c5a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e1d3      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c5a:	4b3b      	ldr	r3, [pc, #236]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	4937      	ldr	r1, [pc, #220]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6e:	e03a      	b.n	8004ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d020      	beq.n	8004cba <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c78:	4b34      	ldr	r3, [pc, #208]	; (8004d4c <HAL_RCC_OscConfig+0x278>)
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7e:	f7fd ff0d 	bl	8002a9c <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c86:	f7fd ff09 	bl	8002a9c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e1b4      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c98:	4b2b      	ldr	r3, [pc, #172]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca4:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	4925      	ldr	r1, [pc, #148]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	600b      	str	r3, [r1, #0]
 8004cb8:	e015      	b.n	8004ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cba:	4b24      	ldr	r3, [pc, #144]	; (8004d4c <HAL_RCC_OscConfig+0x278>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd feec 	bl	8002a9c <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc8:	f7fd fee8 	bl	8002a9c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e193      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cda:	4b1b      	ldr	r3, [pc, #108]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f0      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d036      	beq.n	8004d60 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d016      	beq.n	8004d28 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cfa:	4b15      	ldr	r3, [pc, #84]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d00:	f7fd fecc 	bl	8002a9c <HAL_GetTick>
 8004d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d06:	e008      	b.n	8004d1a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d08:	f7fd fec8 	bl	8002a9c <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	1ad3      	subs	r3, r2, r3
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e173      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d1a:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_OscConfig+0x274>)
 8004d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0f0      	beq.n	8004d08 <HAL_RCC_OscConfig+0x234>
 8004d26:	e01b      	b.n	8004d60 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d28:	4b09      	ldr	r3, [pc, #36]	; (8004d50 <HAL_RCC_OscConfig+0x27c>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2e:	f7fd feb5 	bl	8002a9c <HAL_GetTick>
 8004d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d34:	e00e      	b.n	8004d54 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d36:	f7fd feb1 	bl	8002a9c <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d907      	bls.n	8004d54 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e15c      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	42470000 	.word	0x42470000
 8004d50:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d54:	4b8a      	ldr	r3, [pc, #552]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1ea      	bne.n	8004d36 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0304 	and.w	r3, r3, #4
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 8097 	beq.w	8004e9c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d72:	4b83      	ldr	r3, [pc, #524]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10f      	bne.n	8004d9e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60bb      	str	r3, [r7, #8]
 8004d82:	4b7f      	ldr	r3, [pc, #508]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	4a7e      	ldr	r2, [pc, #504]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8e:	4b7c      	ldr	r3, [pc, #496]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9e:	4b79      	ldr	r3, [pc, #484]	; (8004f84 <HAL_RCC_OscConfig+0x4b0>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d118      	bne.n	8004ddc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004daa:	4b76      	ldr	r3, [pc, #472]	; (8004f84 <HAL_RCC_OscConfig+0x4b0>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a75      	ldr	r2, [pc, #468]	; (8004f84 <HAL_RCC_OscConfig+0x4b0>)
 8004db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db6:	f7fd fe71 	bl	8002a9c <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dbe:	f7fd fe6d 	bl	8002a9c <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e118      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd0:	4b6c      	ldr	r3, [pc, #432]	; (8004f84 <HAL_RCC_OscConfig+0x4b0>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d106      	bne.n	8004df2 <HAL_RCC_OscConfig+0x31e>
 8004de4:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a65      	ldr	r2, [pc, #404]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004dea:	f043 0301 	orr.w	r3, r3, #1
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
 8004df0:	e01c      	b.n	8004e2c <HAL_RCC_OscConfig+0x358>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x340>
 8004dfa:	4b61      	ldr	r3, [pc, #388]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a60      	ldr	r2, [pc, #384]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e00:	f043 0304 	orr.w	r3, r3, #4
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	4b5e      	ldr	r3, [pc, #376]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a5d      	ldr	r2, [pc, #372]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70
 8004e12:	e00b      	b.n	8004e2c <HAL_RCC_OscConfig+0x358>
 8004e14:	4b5a      	ldr	r3, [pc, #360]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	4a59      	ldr	r2, [pc, #356]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e20:	4b57      	ldr	r3, [pc, #348]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e24:	4a56      	ldr	r2, [pc, #344]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e26:	f023 0304 	bic.w	r3, r3, #4
 8004e2a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fd fe32 	bl	8002a9c <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3a:	e00a      	b.n	8004e52 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3c:	f7fd fe2e 	bl	8002a9c <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d901      	bls.n	8004e52 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004e4e:	2303      	movs	r3, #3
 8004e50:	e0d7      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e52:	4b4b      	ldr	r3, [pc, #300]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d0ee      	beq.n	8004e3c <HAL_RCC_OscConfig+0x368>
 8004e5e:	e014      	b.n	8004e8a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e60:	f7fd fe1c 	bl	8002a9c <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e68:	f7fd fe18 	bl	8002a9c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e0c1      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7e:	4b40      	ldr	r3, [pc, #256]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1ee      	bne.n	8004e68 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e8a:	7dfb      	ldrb	r3, [r7, #23]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d105      	bne.n	8004e9c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e90:	4b3b      	ldr	r3, [pc, #236]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004e96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e9a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 80ad 	beq.w	8005000 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ea6:	4b36      	ldr	r3, [pc, #216]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	f003 030c 	and.w	r3, r3, #12
 8004eae:	2b08      	cmp	r3, #8
 8004eb0:	d060      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d145      	bne.n	8004f46 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eba:	4b33      	ldr	r3, [pc, #204]	; (8004f88 <HAL_RCC_OscConfig+0x4b4>)
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fd fdec 	bl	8002a9c <HAL_GetTick>
 8004ec4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec6:	e008      	b.n	8004eda <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec8:	f7fd fde8 	bl	8002a9c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d901      	bls.n	8004eda <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e093      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eda:	4b29      	ldr	r3, [pc, #164]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1f0      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	69da      	ldr	r2, [r3, #28]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	431a      	orrs	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	019b      	lsls	r3, r3, #6
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efc:	085b      	lsrs	r3, r3, #1
 8004efe:	3b01      	subs	r3, #1
 8004f00:	041b      	lsls	r3, r3, #16
 8004f02:	431a      	orrs	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f08:	061b      	lsls	r3, r3, #24
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f10:	071b      	lsls	r3, r3, #28
 8004f12:	491b      	ldr	r1, [pc, #108]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f18:	4b1b      	ldr	r3, [pc, #108]	; (8004f88 <HAL_RCC_OscConfig+0x4b4>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1e:	f7fd fdbd 	bl	8002a9c <HAL_GetTick>
 8004f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f24:	e008      	b.n	8004f38 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f26:	f7fd fdb9 	bl	8002a9c <HAL_GetTick>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1ad3      	subs	r3, r2, r3
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e064      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f38:	4b11      	ldr	r3, [pc, #68]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0f0      	beq.n	8004f26 <HAL_RCC_OscConfig+0x452>
 8004f44:	e05c      	b.n	8005000 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f46:	4b10      	ldr	r3, [pc, #64]	; (8004f88 <HAL_RCC_OscConfig+0x4b4>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f4c:	f7fd fda6 	bl	8002a9c <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fd fda2 	bl	8002a9c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e04d      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCC_OscConfig+0x4ac>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1f0      	bne.n	8004f54 <HAL_RCC_OscConfig+0x480>
 8004f72:	e045      	b.n	8005000 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d107      	bne.n	8004f8c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e040      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
 8004f80:	40023800 	.word	0x40023800
 8004f84:	40007000 	.word	0x40007000
 8004f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f8c:	4b1f      	ldr	r3, [pc, #124]	; (800500c <HAL_RCC_OscConfig+0x538>)
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	d030      	beq.n	8004ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d129      	bne.n	8004ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d122      	bne.n	8004ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d119      	bne.n	8004ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d10f      	bne.n	8004ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d107      	bne.n	8004ffc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d001      	beq.n	8005000 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e000      	b.n	8005002 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	40023800 	.word	0x40023800

08005010 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e07b      	b.n	800511a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005026:	2b00      	cmp	r3, #0
 8005028:	d108      	bne.n	800503c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005032:	d009      	beq.n	8005048 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	61da      	str	r2, [r3, #28]
 800503a:	e005      	b.n	8005048 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005054:	b2db      	uxtb	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d106      	bne.n	8005068 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7fd f8ae 	bl	80021c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005090:	431a      	orrs	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509a:	431a      	orrs	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	691b      	ldr	r3, [r3, #16]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	431a      	orrs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	431a      	orrs	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a1b      	ldr	r3, [r3, #32]
 80050c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050cc:	ea42 0103 	orr.w	r1, r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	0c1b      	lsrs	r3, r3, #16
 80050e6:	f003 0104 	and.w	r1, r3, #4
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ee:	f003 0210 	and.w	r2, r3, #16
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	69da      	ldr	r2, [r3, #28]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005108:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	603b      	str	r3, [r7, #0]
 800512e:	4613      	mov	r3, r2
 8005130:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_SPI_Transmit+0x22>
 8005140:	2302      	movs	r3, #2
 8005142:	e126      	b.n	8005392 <HAL_SPI_Transmit+0x270>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800514c:	f7fd fca6 	bl	8002a9c <HAL_GetTick>
 8005150:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005152:	88fb      	ldrh	r3, [r7, #6]
 8005154:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b01      	cmp	r3, #1
 8005160:	d002      	beq.n	8005168 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005162:	2302      	movs	r3, #2
 8005164:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005166:	e10b      	b.n	8005380 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_SPI_Transmit+0x52>
 800516e:	88fb      	ldrh	r3, [r7, #6]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d102      	bne.n	800517a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005178:	e102      	b.n	8005380 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2203      	movs	r2, #3
 800517e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	88fa      	ldrh	r2, [r7, #6]
 8005192:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c0:	d10f      	bne.n	80051e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b40      	cmp	r3, #64	; 0x40
 80051ee:	d007      	beq.n	8005200 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005208:	d14b      	bne.n	80052a2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d002      	beq.n	8005218 <HAL_SPI_Transmit+0xf6>
 8005212:	8afb      	ldrh	r3, [r7, #22]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d13e      	bne.n	8005296 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521c:	881a      	ldrh	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005232:	b29b      	uxth	r3, r3
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800523c:	e02b      	b.n	8005296 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b02      	cmp	r3, #2
 800524a:	d112      	bne.n	8005272 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	881a      	ldrh	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	1c9a      	adds	r2, r3, #2
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005270:	e011      	b.n	8005296 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005272:	f7fd fc13 	bl	8002a9c <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	683a      	ldr	r2, [r7, #0]
 800527e:	429a      	cmp	r2, r3
 8005280:	d803      	bhi.n	800528a <HAL_SPI_Transmit+0x168>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005288:	d102      	bne.n	8005290 <HAL_SPI_Transmit+0x16e>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005294:	e074      	b.n	8005380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1ce      	bne.n	800523e <HAL_SPI_Transmit+0x11c>
 80052a0:	e04c      	b.n	800533c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_SPI_Transmit+0x18e>
 80052aa:	8afb      	ldrh	r3, [r7, #22]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d140      	bne.n	8005332 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	7812      	ldrb	r2, [r2, #0]
 80052bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	3b01      	subs	r3, #1
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052d6:	e02c      	b.n	8005332 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d113      	bne.n	800530e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	330c      	adds	r3, #12
 80052f0:	7812      	ldrb	r2, [r2, #0]
 80052f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005302:	b29b      	uxth	r3, r3
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	86da      	strh	r2, [r3, #54]	; 0x36
 800530c:	e011      	b.n	8005332 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800530e:	f7fd fbc5 	bl	8002a9c <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d803      	bhi.n	8005326 <HAL_SPI_Transmit+0x204>
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005324:	d102      	bne.n	800532c <HAL_SPI_Transmit+0x20a>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d102      	bne.n	8005332 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005330:	e026      	b.n	8005380 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005336:	b29b      	uxth	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1cd      	bne.n	80052d8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	6839      	ldr	r1, [r7, #0]
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fa55 	bl	80057f0 <SPI_EndRxTxTransaction>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800535a:	2300      	movs	r3, #0
 800535c:	613b      	str	r3, [r7, #16]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	613b      	str	r3, [r7, #16]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	613b      	str	r3, [r7, #16]
 800536e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005378:	2301      	movs	r3, #1
 800537a:	77fb      	strb	r3, [r7, #31]
 800537c:	e000      	b.n	8005380 <HAL_SPI_Transmit+0x25e>
  }

error:
 800537e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005390:	7ffb      	ldrb	r3, [r7, #31]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3720      	adds	r7, #32
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}

0800539a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b08c      	sub	sp, #48	; 0x30
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80053a8:	2301      	movs	r3, #1
 80053aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_SPI_TransmitReceive+0x26>
 80053bc:	2302      	movs	r3, #2
 80053be:	e18a      	b.n	80056d6 <HAL_SPI_TransmitReceive+0x33c>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053c8:	f7fd fb68 	bl	8002a9c <HAL_GetTick>
 80053cc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80053de:	887b      	ldrh	r3, [r7, #2]
 80053e0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80053e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d00f      	beq.n	800540a <HAL_SPI_TransmitReceive+0x70>
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053f0:	d107      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d103      	bne.n	8005402 <HAL_SPI_TransmitReceive+0x68>
 80053fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80053fe:	2b04      	cmp	r3, #4
 8005400:	d003      	beq.n	800540a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005402:	2302      	movs	r3, #2
 8005404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005408:	e15b      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <HAL_SPI_TransmitReceive+0x82>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_SPI_TransmitReceive+0x82>
 8005416:	887b      	ldrh	r3, [r7, #2]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005422:	e14e      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b04      	cmp	r3, #4
 800542e:	d003      	beq.n	8005438 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2205      	movs	r2, #5
 8005434:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2200      	movs	r2, #0
 800543c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	887a      	ldrh	r2, [r7, #2]
 8005448:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	887a      	ldrh	r2, [r7, #2]
 800544e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	887a      	ldrh	r2, [r7, #2]
 800545a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	887a      	ldrh	r2, [r7, #2]
 8005460:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d007      	beq.n	800548c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800548a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005494:	d178      	bne.n	8005588 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_SPI_TransmitReceive+0x10a>
 800549e:	8b7b      	ldrh	r3, [r7, #26]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d166      	bne.n	8005572 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a8:	881a      	ldrh	r2, [r3, #0]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b4:	1c9a      	adds	r2, r3, #2
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054be:	b29b      	uxth	r3, r3
 80054c0:	3b01      	subs	r3, #1
 80054c2:	b29a      	uxth	r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054c8:	e053      	b.n	8005572 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d11b      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x176>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054dc:	b29b      	uxth	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d016      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x176>
 80054e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d113      	bne.n	8005510 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ec:	881a      	ldrh	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f8:	1c9a      	adds	r2, r3, #2
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005502:	b29b      	uxth	r3, r3
 8005504:	3b01      	subs	r3, #1
 8005506:	b29a      	uxth	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	2b01      	cmp	r3, #1
 800551c:	d119      	bne.n	8005552 <HAL_SPI_TransmitReceive+0x1b8>
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005522:	b29b      	uxth	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	d014      	beq.n	8005552 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	b292      	uxth	r2, r2
 8005534:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	1c9a      	adds	r2, r3, #2
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005544:	b29b      	uxth	r3, r3
 8005546:	3b01      	subs	r3, #1
 8005548:	b29a      	uxth	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800554e:	2301      	movs	r3, #1
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005552:	f7fd faa3 	bl	8002a9c <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800555e:	429a      	cmp	r2, r3
 8005560:	d807      	bhi.n	8005572 <HAL_SPI_TransmitReceive+0x1d8>
 8005562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005568:	d003      	beq.n	8005572 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005570:	e0a7      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005576:	b29b      	uxth	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1a6      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x130>
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1a1      	bne.n	80054ca <HAL_SPI_TransmitReceive+0x130>
 8005586:	e07c      	b.n	8005682 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_SPI_TransmitReceive+0x1fc>
 8005590:	8b7b      	ldrh	r3, [r7, #26]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d16b      	bne.n	800566e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	330c      	adds	r3, #12
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055bc:	e057      	b.n	800566e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d11c      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x26c>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d017      	beq.n	8005606 <HAL_SPI_TransmitReceive+0x26c>
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d114      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	330c      	adds	r3, #12
 80055e6:	7812      	ldrb	r2, [r2, #0]
 80055e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ee:	1c5a      	adds	r2, r3, #1
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	3b01      	subs	r3, #1
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f003 0301 	and.w	r3, r3, #1
 8005610:	2b01      	cmp	r3, #1
 8005612:	d119      	bne.n	8005648 <HAL_SPI_TransmitReceive+0x2ae>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d014      	beq.n	8005648 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005644:	2301      	movs	r3, #1
 8005646:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005648:	f7fd fa28 	bl	8002a9c <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005654:	429a      	cmp	r2, r3
 8005656:	d803      	bhi.n	8005660 <HAL_SPI_TransmitReceive+0x2c6>
 8005658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565e:	d102      	bne.n	8005666 <HAL_SPI_TransmitReceive+0x2cc>
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	2b00      	cmp	r3, #0
 8005664:	d103      	bne.n	800566e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800566c:	e029      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005672:	b29b      	uxth	r3, r3
 8005674:	2b00      	cmp	r3, #0
 8005676:	d1a2      	bne.n	80055be <HAL_SPI_TransmitReceive+0x224>
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d19d      	bne.n	80055be <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005684:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f8b2 	bl	80057f0 <SPI_EndRxTxTransaction>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d006      	beq.n	80056a0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2220      	movs	r2, #32
 800569c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800569e:	e010      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10b      	bne.n	80056c0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80056a8:	2300      	movs	r3, #0
 80056aa:	617b      	str	r3, [r7, #20]
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	617b      	str	r3, [r7, #20]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	697b      	ldr	r3, [r7, #20]
 80056be:	e000      	b.n	80056c2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80056c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056d2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3730      	adds	r7, #48	; 0x30
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	603b      	str	r3, [r7, #0]
 80056ec:	4613      	mov	r3, r2
 80056ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80056f0:	f7fd f9d4 	bl	8002a9c <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	1a9b      	subs	r3, r3, r2
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	4413      	add	r3, r2
 80056fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005700:	f7fd f9cc 	bl	8002a9c <HAL_GetTick>
 8005704:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005706:	4b39      	ldr	r3, [pc, #228]	; (80057ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	015b      	lsls	r3, r3, #5
 800570c:	0d1b      	lsrs	r3, r3, #20
 800570e:	69fa      	ldr	r2, [r7, #28]
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005716:	e054      	b.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d050      	beq.n	80057c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005720:	f7fd f9bc 	bl	8002a9c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	429a      	cmp	r2, r3
 800572e:	d902      	bls.n	8005736 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d13d      	bne.n	80057b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800574e:	d111      	bne.n	8005774 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005758:	d004      	beq.n	8005764 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005762:	d107      	bne.n	8005774 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005772:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800577c:	d10f      	bne.n	800579e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800579c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e017      	b.n	80057e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d101      	bne.n	80057bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	3b01      	subs	r3, #1
 80057c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	689a      	ldr	r2, [r3, #8]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4013      	ands	r3, r2
 80057cc:	68ba      	ldr	r2, [r7, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	461a      	mov	r2, r3
 80057da:	79fb      	ldrb	r3, [r7, #7]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d19b      	bne.n	8005718 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	20000000 	.word	0x20000000

080057f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <SPI_EndRxTxTransaction+0x7c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1b      	ldr	r2, [pc, #108]	; (8005870 <SPI_EndRxTxTransaction+0x80>)
 8005802:	fba2 2303 	umull	r2, r3, r2, r3
 8005806:	0d5b      	lsrs	r3, r3, #21
 8005808:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581a:	d112      	bne.n	8005842 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2200      	movs	r2, #0
 8005824:	2180      	movs	r1, #128	; 0x80
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff ff5a 	bl	80056e0 <SPI_WaitFlagStateUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d016      	beq.n	8005860 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	f043 0220 	orr.w	r2, r3, #32
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e00f      	b.n	8005862 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00a      	beq.n	800585e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	3b01      	subs	r3, #1
 800584c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	689b      	ldr	r3, [r3, #8]
 8005854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005858:	2b80      	cmp	r3, #128	; 0x80
 800585a:	d0f2      	beq.n	8005842 <SPI_EndRxTxTransaction+0x52>
 800585c:	e000      	b.n	8005860 <SPI_EndRxTxTransaction+0x70>
        break;
 800585e:	bf00      	nop
  }

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	20000000 	.word	0x20000000
 8005870:	165e9f81 	.word	0x165e9f81

08005874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b082      	sub	sp, #8
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e03f      	b.n	8005906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	d106      	bne.n	80058a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fc ff18 	bl	80026d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2224      	movs	r2, #36	; 0x24
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fbc9 	bl	8006050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	691a      	ldr	r2, [r3, #16]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68da      	ldr	r2, [r3, #12]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2200      	movs	r2, #0
 80058f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2220      	movs	r2, #32
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e021      	b.n	8005964 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2224      	movs	r2, #36	; 0x24
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68da      	ldr	r2, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005936:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f7fc ffcf 	bl	80028dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b20      	cmp	r3, #32
 800598a:	d17c      	bne.n	8005a86 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d002      	beq.n	8005998 <HAL_UART_Transmit+0x2c>
 8005992:	88fb      	ldrh	r3, [r7, #6]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d101      	bne.n	800599c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	e075      	b.n	8005a88 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Transmit+0x3e>
 80059a6:	2302      	movs	r3, #2
 80059a8:	e06e      	b.n	8005a88 <HAL_UART_Transmit+0x11c>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2221      	movs	r2, #33	; 0x21
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059c0:	f7fd f86c 	bl	8002a9c <HAL_GetTick>
 80059c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	88fa      	ldrh	r2, [r7, #6]
 80059ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	88fa      	ldrh	r2, [r7, #6]
 80059d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059da:	d108      	bne.n	80059ee <HAL_UART_Transmit+0x82>
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d104      	bne.n	80059ee <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059e4:	2300      	movs	r3, #0
 80059e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e003      	b.n	80059f6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059fe:	e02a      	b.n	8005a56 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f988 	bl	8005d20 <UART_WaitOnFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e036      	b.n	8005a88 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10b      	bne.n	8005a38 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a2e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a30:	69bb      	ldr	r3, [r7, #24]
 8005a32:	3302      	adds	r3, #2
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	e007      	b.n	8005a48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	781a      	ldrb	r2, [r3, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	3301      	adds	r3, #1
 8005a46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	b29a      	uxth	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1cf      	bne.n	8005a00 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	9300      	str	r3, [sp, #0]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	2200      	movs	r2, #0
 8005a68:	2140      	movs	r1, #64	; 0x40
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 f958 	bl	8005d20 <UART_WaitOnFlagUntilTimeout>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e006      	b.n	8005a88 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2220      	movs	r2, #32
 8005a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e000      	b.n	8005a88 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a86:	2302      	movs	r3, #2
  }
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3720      	adds	r7, #32
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b20      	cmp	r3, #32
 8005aa8:	d11d      	bne.n	8005ae6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <HAL_UART_Receive_DMA+0x26>
 8005ab0:	88fb      	ldrh	r3, [r7, #6]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e016      	b.n	8005ae8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_UART_Receive_DMA+0x38>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e00f      	b.n	8005ae8 <HAL_UART_Receive_DMA+0x58>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	461a      	mov	r2, r3
 8005ada:	68b9      	ldr	r1, [r7, #8]
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f98d 	bl	8005dfc <UART_Start_Receive_DMA>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	e000      	b.n	8005ae8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ae6:	2302      	movs	r3, #2
  }
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	460b      	mov	r3, r1
 8005b22:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b09c      	sub	sp, #112	; 0x70
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d172      	bne.n	8005c32 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b4e:	2200      	movs	r2, #0
 8005b50:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	330c      	adds	r3, #12
 8005b58:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005b62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b72:	65ba      	str	r2, [r7, #88]	; 0x58
 8005b74:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e5      	bne.n	8005b52 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3314      	adds	r3, #20
 8005b8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3314      	adds	r3, #20
 8005ba4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ba6:	647a      	str	r2, [r7, #68]	; 0x44
 8005ba8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005bb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3314      	adds	r3, #20
 8005bc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bd0:	663b      	str	r3, [r7, #96]	; 0x60
 8005bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3314      	adds	r3, #20
 8005bd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005bda:	633a      	str	r2, [r7, #48]	; 0x30
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d119      	bne.n	8005c32 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	f023 0310 	bic.w	r3, r3, #16
 8005c14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005c1e:	61fa      	str	r2, [r7, #28]
 8005c20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	69b9      	ldr	r1, [r7, #24]
 8005c24:	69fa      	ldr	r2, [r7, #28]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e5      	bne.n	8005bfe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d106      	bne.n	8005c48 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c3e:	4619      	mov	r1, r3
 8005c40:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c42:	f7ff ff69 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c46:	e002      	b.n	8005c4e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8005c48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005c4a:	f7fb f9f5 	bl	8001038 <HAL_UART_RxCpltCallback>
}
 8005c4e:	bf00      	nop
 8005c50:	3770      	adds	r7, #112	; 0x70
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b084      	sub	sp, #16
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c62:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d108      	bne.n	8005c7e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c70:	085b      	lsrs	r3, r3, #1
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	4619      	mov	r1, r3
 8005c76:	68f8      	ldr	r0, [r7, #12]
 8005c78:	f7ff ff4e 	bl	8005b18 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c7c:	e002      	b.n	8005c84 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f7ff ff36 	bl	8005af0 <HAL_UART_RxHalfCpltCallback>
}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005c94:	2300      	movs	r3, #0
 8005c96:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca8:	2b80      	cmp	r3, #128	; 0x80
 8005caa:	bf0c      	ite	eq
 8005cac:	2301      	moveq	r3, #1
 8005cae:	2300      	movne	r3, #0
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	2b21      	cmp	r3, #33	; 0x21
 8005cbe:	d108      	bne.n	8005cd2 <UART_DMAError+0x46>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005ccc:	68b8      	ldr	r0, [r7, #8]
 8005cce:	f000 f933 	bl	8005f38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cdc:	2b40      	cmp	r3, #64	; 0x40
 8005cde:	bf0c      	ite	eq
 8005ce0:	2301      	moveq	r3, #1
 8005ce2:	2300      	movne	r3, #0
 8005ce4:	b2db      	uxtb	r3, r3
 8005ce6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	2b22      	cmp	r3, #34	; 0x22
 8005cf2:	d108      	bne.n	8005d06 <UART_DMAError+0x7a>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d005      	beq.n	8005d06 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d00:	68b8      	ldr	r0, [r7, #8]
 8005d02:	f000 f941 	bl	8005f88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d0a:	f043 0210 	orr.w	r2, r3, #16
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d12:	68b8      	ldr	r0, [r7, #8]
 8005d14:	f7ff fef6 	bl	8005b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d18:	bf00      	nop
 8005d1a:	3710      	adds	r7, #16
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b090      	sub	sp, #64	; 0x40
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d30:	e050      	b.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d38:	d04c      	beq.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d007      	beq.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8005d40:	f7fc feac 	bl	8002a9c <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d241      	bcs.n	8005dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d70:	637a      	str	r2, [r7, #52]	; 0x34
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	613b      	str	r3, [r7, #16]
   return(result);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3314      	adds	r3, #20
 8005da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005da4:	623a      	str	r2, [r7, #32]
 8005da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	69f9      	ldr	r1, [r7, #28]
 8005daa:	6a3a      	ldr	r2, [r7, #32]
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e5      	bne.n	8005d84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e00f      	b.n	8005df4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	bf0c      	ite	eq
 8005de4:	2301      	moveq	r3, #1
 8005de6:	2300      	movne	r3, #0
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	461a      	mov	r2, r3
 8005dec:	79fb      	ldrb	r3, [r7, #7]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d09f      	beq.n	8005d32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3740      	adds	r7, #64	; 0x40
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b098      	sub	sp, #96	; 0x60
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4613      	mov	r3, r2
 8005e08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	88fa      	ldrh	r2, [r7, #6]
 8005e14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2222      	movs	r2, #34	; 0x22
 8005e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	4a40      	ldr	r2, [pc, #256]	; (8005f2c <UART_Start_Receive_DMA+0x130>)
 8005e2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	4a3f      	ldr	r2, [pc, #252]	; (8005f30 <UART_Start_Receive_DMA+0x134>)
 8005e32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	4a3e      	ldr	r2, [pc, #248]	; (8005f34 <UART_Start_Receive_DMA+0x138>)
 8005e3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e40:	2200      	movs	r2, #0
 8005e42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005e44:	f107 0308 	add.w	r3, r7, #8
 8005e48:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	3304      	adds	r3, #4
 8005e54:	4619      	mov	r1, r3
 8005e56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	88fb      	ldrh	r3, [r7, #6]
 8005e5c:	f7fd fc48 	bl	80036f0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005e60:	2300      	movs	r3, #0
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	613b      	str	r3, [r7, #16]
 8005e74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d019      	beq.n	8005eba <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	330c      	adds	r3, #12
 8005ea4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ea6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eaa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005eac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005eae:	e841 2300 	strex	r3, r2, [r1]
 8005eb2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005eb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1e5      	bne.n	8005e86 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ecc:	f043 0301 	orr.w	r3, r3, #1
 8005ed0:	657b      	str	r3, [r7, #84]	; 0x54
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3314      	adds	r3, #20
 8005ed8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005eda:	63ba      	str	r2, [r7, #56]	; 0x38
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ee0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e5      	bne.n	8005eba <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3314      	adds	r3, #20
 8005ef4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	e853 3f00 	ldrex	r3, [r3]
 8005efc:	617b      	str	r3, [r7, #20]
   return(result);
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f04:	653b      	str	r3, [r7, #80]	; 0x50
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	3314      	adds	r3, #20
 8005f0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005f10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f12:	6a39      	ldr	r1, [r7, #32]
 8005f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f16:	e841 2300 	strex	r3, r2, [r1]
 8005f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1e5      	bne.n	8005eee <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3760      	adds	r7, #96	; 0x60
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	08005b31 	.word	0x08005b31
 8005f30:	08005c57 	.word	0x08005c57
 8005f34:	08005c8d 	.word	0x08005c8d

08005f38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b089      	sub	sp, #36	; 0x24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	330c      	adds	r3, #12
 8005f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	e853 3f00 	ldrex	r3, [r3]
 8005f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f56:	61fb      	str	r3, [r7, #28]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	330c      	adds	r3, #12
 8005f5e:	69fa      	ldr	r2, [r7, #28]
 8005f60:	61ba      	str	r2, [r7, #24]
 8005f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6979      	ldr	r1, [r7, #20]
 8005f66:	69ba      	ldr	r2, [r7, #24]
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e5      	bne.n	8005f40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2220      	movs	r2, #32
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005f7c:	bf00      	nop
 8005f7e:	3724      	adds	r7, #36	; 0x24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b095      	sub	sp, #84	; 0x54
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	330c      	adds	r3, #12
 8005f96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	330c      	adds	r3, #12
 8005fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fb0:	643a      	str	r2, [r7, #64]	; 0x40
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e5      	bne.n	8005f90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3314      	adds	r3, #20
 8005fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	f023 0301 	bic.w	r3, r3, #1
 8005fda:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3314      	adds	r3, #20
 8005fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fec:	e841 2300 	strex	r3, r2, [r1]
 8005ff0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1e5      	bne.n	8005fc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d119      	bne.n	8006034 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	330c      	adds	r3, #12
 8006006:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	e853 3f00 	ldrex	r3, [r3]
 800600e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f023 0310 	bic.w	r3, r3, #16
 8006016:	647b      	str	r3, [r7, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	330c      	adds	r3, #12
 800601e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006020:	61ba      	str	r2, [r7, #24]
 8006022:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006024:	6979      	ldr	r1, [r7, #20]
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	e841 2300 	strex	r3, r2, [r1]
 800602c:	613b      	str	r3, [r7, #16]
   return(result);
 800602e:	693b      	ldr	r3, [r7, #16]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1e5      	bne.n	8006000 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006042:	bf00      	nop
 8006044:	3754      	adds	r7, #84	; 0x54
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr
	...

08006050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006050:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006054:	b0c0      	sub	sp, #256	; 0x100
 8006056:	af00      	add	r7, sp, #0
 8006058:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800605c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800606c:	68d9      	ldr	r1, [r3, #12]
 800606e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	ea40 0301 	orr.w	r3, r0, r1
 8006078:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800607a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800607e:	689a      	ldr	r2, [r3, #8]
 8006080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	431a      	orrs	r2, r3
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	431a      	orrs	r2, r3
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006094:	69db      	ldr	r3, [r3, #28]
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800609c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060a8:	f021 010c 	bic.w	r1, r1, #12
 80060ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80060b6:	430b      	orrs	r3, r1
 80060b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	695b      	ldr	r3, [r3, #20]
 80060c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ca:	6999      	ldr	r1, [r3, #24]
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	ea40 0301 	orr.w	r3, r0, r1
 80060d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	4b8f      	ldr	r3, [pc, #572]	; (800631c <UART_SetConfig+0x2cc>)
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d005      	beq.n	80060f0 <UART_SetConfig+0xa0>
 80060e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4b8d      	ldr	r3, [pc, #564]	; (8006320 <UART_SetConfig+0x2d0>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d104      	bne.n	80060fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060f0:	f7fe faac 	bl	800464c <HAL_RCC_GetPCLK2Freq>
 80060f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80060f8:	e003      	b.n	8006102 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060fa:	f7fe fa93 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 80060fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006106:	69db      	ldr	r3, [r3, #28]
 8006108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800610c:	f040 810c 	bne.w	8006328 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006110:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006114:	2200      	movs	r2, #0
 8006116:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800611a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800611e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006122:	4622      	mov	r2, r4
 8006124:	462b      	mov	r3, r5
 8006126:	1891      	adds	r1, r2, r2
 8006128:	65b9      	str	r1, [r7, #88]	; 0x58
 800612a:	415b      	adcs	r3, r3
 800612c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800612e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006132:	4621      	mov	r1, r4
 8006134:	eb12 0801 	adds.w	r8, r2, r1
 8006138:	4629      	mov	r1, r5
 800613a:	eb43 0901 	adc.w	r9, r3, r1
 800613e:	f04f 0200 	mov.w	r2, #0
 8006142:	f04f 0300 	mov.w	r3, #0
 8006146:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800614a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800614e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006152:	4690      	mov	r8, r2
 8006154:	4699      	mov	r9, r3
 8006156:	4623      	mov	r3, r4
 8006158:	eb18 0303 	adds.w	r3, r8, r3
 800615c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006160:	462b      	mov	r3, r5
 8006162:	eb49 0303 	adc.w	r3, r9, r3
 8006166:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800616a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006176:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800617a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800617e:	460b      	mov	r3, r1
 8006180:	18db      	adds	r3, r3, r3
 8006182:	653b      	str	r3, [r7, #80]	; 0x50
 8006184:	4613      	mov	r3, r2
 8006186:	eb42 0303 	adc.w	r3, r2, r3
 800618a:	657b      	str	r3, [r7, #84]	; 0x54
 800618c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006190:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006194:	f7fa fd98 	bl	8000cc8 <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4b61      	ldr	r3, [pc, #388]	; (8006324 <UART_SetConfig+0x2d4>)
 800619e:	fba3 2302 	umull	r2, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	011c      	lsls	r4, r3, #4
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80061b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80061b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	64b9      	str	r1, [r7, #72]	; 0x48
 80061c0:	415b      	adcs	r3, r3
 80061c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80061c8:	4641      	mov	r1, r8
 80061ca:	eb12 0a01 	adds.w	sl, r2, r1
 80061ce:	4649      	mov	r1, r9
 80061d0:	eb43 0b01 	adc.w	fp, r3, r1
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80061e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80061e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061e8:	4692      	mov	sl, r2
 80061ea:	469b      	mov	fp, r3
 80061ec:	4643      	mov	r3, r8
 80061ee:	eb1a 0303 	adds.w	r3, sl, r3
 80061f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061f6:	464b      	mov	r3, r9
 80061f8:	eb4b 0303 	adc.w	r3, fp, r3
 80061fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800620c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006210:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006214:	460b      	mov	r3, r1
 8006216:	18db      	adds	r3, r3, r3
 8006218:	643b      	str	r3, [r7, #64]	; 0x40
 800621a:	4613      	mov	r3, r2
 800621c:	eb42 0303 	adc.w	r3, r2, r3
 8006220:	647b      	str	r3, [r7, #68]	; 0x44
 8006222:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006226:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800622a:	f7fa fd4d 	bl	8000cc8 <__aeabi_uldivmod>
 800622e:	4602      	mov	r2, r0
 8006230:	460b      	mov	r3, r1
 8006232:	4611      	mov	r1, r2
 8006234:	4b3b      	ldr	r3, [pc, #236]	; (8006324 <UART_SetConfig+0x2d4>)
 8006236:	fba3 2301 	umull	r2, r3, r3, r1
 800623a:	095b      	lsrs	r3, r3, #5
 800623c:	2264      	movs	r2, #100	; 0x64
 800623e:	fb02 f303 	mul.w	r3, r2, r3
 8006242:	1acb      	subs	r3, r1, r3
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800624a:	4b36      	ldr	r3, [pc, #216]	; (8006324 <UART_SetConfig+0x2d4>)
 800624c:	fba3 2302 	umull	r2, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006258:	441c      	add	r4, r3
 800625a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800625e:	2200      	movs	r2, #0
 8006260:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006264:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006268:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800626c:	4642      	mov	r2, r8
 800626e:	464b      	mov	r3, r9
 8006270:	1891      	adds	r1, r2, r2
 8006272:	63b9      	str	r1, [r7, #56]	; 0x38
 8006274:	415b      	adcs	r3, r3
 8006276:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006278:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800627c:	4641      	mov	r1, r8
 800627e:	1851      	adds	r1, r2, r1
 8006280:	6339      	str	r1, [r7, #48]	; 0x30
 8006282:	4649      	mov	r1, r9
 8006284:	414b      	adcs	r3, r1
 8006286:	637b      	str	r3, [r7, #52]	; 0x34
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006294:	4659      	mov	r1, fp
 8006296:	00cb      	lsls	r3, r1, #3
 8006298:	4651      	mov	r1, sl
 800629a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800629e:	4651      	mov	r1, sl
 80062a0:	00ca      	lsls	r2, r1, #3
 80062a2:	4610      	mov	r0, r2
 80062a4:	4619      	mov	r1, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	4642      	mov	r2, r8
 80062aa:	189b      	adds	r3, r3, r2
 80062ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062b0:	464b      	mov	r3, r9
 80062b2:	460a      	mov	r2, r1
 80062b4:	eb42 0303 	adc.w	r3, r2, r3
 80062b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80062bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80062c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80062cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80062d0:	460b      	mov	r3, r1
 80062d2:	18db      	adds	r3, r3, r3
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80062d6:	4613      	mov	r3, r2
 80062d8:	eb42 0303 	adc.w	r3, r2, r3
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80062e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80062e6:	f7fa fcef 	bl	8000cc8 <__aeabi_uldivmod>
 80062ea:	4602      	mov	r2, r0
 80062ec:	460b      	mov	r3, r1
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <UART_SetConfig+0x2d4>)
 80062f0:	fba3 1302 	umull	r1, r3, r3, r2
 80062f4:	095b      	lsrs	r3, r3, #5
 80062f6:	2164      	movs	r1, #100	; 0x64
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	3332      	adds	r3, #50	; 0x32
 8006302:	4a08      	ldr	r2, [pc, #32]	; (8006324 <UART_SetConfig+0x2d4>)
 8006304:	fba2 2303 	umull	r2, r3, r2, r3
 8006308:	095b      	lsrs	r3, r3, #5
 800630a:	f003 0207 	and.w	r2, r3, #7
 800630e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4422      	add	r2, r4
 8006316:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006318:	e105      	b.n	8006526 <UART_SetConfig+0x4d6>
 800631a:	bf00      	nop
 800631c:	40011000 	.word	0x40011000
 8006320:	40011400 	.word	0x40011400
 8006324:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800632c:	2200      	movs	r2, #0
 800632e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006332:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006336:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800633a:	4642      	mov	r2, r8
 800633c:	464b      	mov	r3, r9
 800633e:	1891      	adds	r1, r2, r2
 8006340:	6239      	str	r1, [r7, #32]
 8006342:	415b      	adcs	r3, r3
 8006344:	627b      	str	r3, [r7, #36]	; 0x24
 8006346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800634a:	4641      	mov	r1, r8
 800634c:	1854      	adds	r4, r2, r1
 800634e:	4649      	mov	r1, r9
 8006350:	eb43 0501 	adc.w	r5, r3, r1
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	f04f 0300 	mov.w	r3, #0
 800635c:	00eb      	lsls	r3, r5, #3
 800635e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006362:	00e2      	lsls	r2, r4, #3
 8006364:	4614      	mov	r4, r2
 8006366:	461d      	mov	r5, r3
 8006368:	4643      	mov	r3, r8
 800636a:	18e3      	adds	r3, r4, r3
 800636c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006370:	464b      	mov	r3, r9
 8006372:	eb45 0303 	adc.w	r3, r5, r3
 8006376:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006386:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006396:	4629      	mov	r1, r5
 8006398:	008b      	lsls	r3, r1, #2
 800639a:	4621      	mov	r1, r4
 800639c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063a0:	4621      	mov	r1, r4
 80063a2:	008a      	lsls	r2, r1, #2
 80063a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80063a8:	f7fa fc8e 	bl	8000cc8 <__aeabi_uldivmod>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4b60      	ldr	r3, [pc, #384]	; (8006534 <UART_SetConfig+0x4e4>)
 80063b2:	fba3 2302 	umull	r2, r3, r3, r2
 80063b6:	095b      	lsrs	r3, r3, #5
 80063b8:	011c      	lsls	r4, r3, #4
 80063ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80063c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80063cc:	4642      	mov	r2, r8
 80063ce:	464b      	mov	r3, r9
 80063d0:	1891      	adds	r1, r2, r2
 80063d2:	61b9      	str	r1, [r7, #24]
 80063d4:	415b      	adcs	r3, r3
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80063dc:	4641      	mov	r1, r8
 80063de:	1851      	adds	r1, r2, r1
 80063e0:	6139      	str	r1, [r7, #16]
 80063e2:	4649      	mov	r1, r9
 80063e4:	414b      	adcs	r3, r1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	f04f 0200 	mov.w	r2, #0
 80063ec:	f04f 0300 	mov.w	r3, #0
 80063f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f4:	4659      	mov	r1, fp
 80063f6:	00cb      	lsls	r3, r1, #3
 80063f8:	4651      	mov	r1, sl
 80063fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063fe:	4651      	mov	r1, sl
 8006400:	00ca      	lsls	r2, r1, #3
 8006402:	4610      	mov	r0, r2
 8006404:	4619      	mov	r1, r3
 8006406:	4603      	mov	r3, r0
 8006408:	4642      	mov	r2, r8
 800640a:	189b      	adds	r3, r3, r2
 800640c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006410:	464b      	mov	r3, r9
 8006412:	460a      	mov	r2, r1
 8006414:	eb42 0303 	adc.w	r3, r2, r3
 8006418:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800641c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	67bb      	str	r3, [r7, #120]	; 0x78
 8006426:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006428:	f04f 0200 	mov.w	r2, #0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006434:	4649      	mov	r1, r9
 8006436:	008b      	lsls	r3, r1, #2
 8006438:	4641      	mov	r1, r8
 800643a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800643e:	4641      	mov	r1, r8
 8006440:	008a      	lsls	r2, r1, #2
 8006442:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006446:	f7fa fc3f 	bl	8000cc8 <__aeabi_uldivmod>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4b39      	ldr	r3, [pc, #228]	; (8006534 <UART_SetConfig+0x4e4>)
 8006450:	fba3 1302 	umull	r1, r3, r3, r2
 8006454:	095b      	lsrs	r3, r3, #5
 8006456:	2164      	movs	r1, #100	; 0x64
 8006458:	fb01 f303 	mul.w	r3, r1, r3
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	3332      	adds	r3, #50	; 0x32
 8006462:	4a34      	ldr	r2, [pc, #208]	; (8006534 <UART_SetConfig+0x4e4>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	095b      	lsrs	r3, r3, #5
 800646a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800646e:	441c      	add	r4, r3
 8006470:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006474:	2200      	movs	r2, #0
 8006476:	673b      	str	r3, [r7, #112]	; 0x70
 8006478:	677a      	str	r2, [r7, #116]	; 0x74
 800647a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800647e:	4642      	mov	r2, r8
 8006480:	464b      	mov	r3, r9
 8006482:	1891      	adds	r1, r2, r2
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	415b      	adcs	r3, r3
 8006488:	60fb      	str	r3, [r7, #12]
 800648a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800648e:	4641      	mov	r1, r8
 8006490:	1851      	adds	r1, r2, r1
 8006492:	6039      	str	r1, [r7, #0]
 8006494:	4649      	mov	r1, r9
 8006496:	414b      	adcs	r3, r1
 8006498:	607b      	str	r3, [r7, #4]
 800649a:	f04f 0200 	mov.w	r2, #0
 800649e:	f04f 0300 	mov.w	r3, #0
 80064a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80064a6:	4659      	mov	r1, fp
 80064a8:	00cb      	lsls	r3, r1, #3
 80064aa:	4651      	mov	r1, sl
 80064ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064b0:	4651      	mov	r1, sl
 80064b2:	00ca      	lsls	r2, r1, #3
 80064b4:	4610      	mov	r0, r2
 80064b6:	4619      	mov	r1, r3
 80064b8:	4603      	mov	r3, r0
 80064ba:	4642      	mov	r2, r8
 80064bc:	189b      	adds	r3, r3, r2
 80064be:	66bb      	str	r3, [r7, #104]	; 0x68
 80064c0:	464b      	mov	r3, r9
 80064c2:	460a      	mov	r2, r1
 80064c4:	eb42 0303 	adc.w	r3, r2, r3
 80064c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	663b      	str	r3, [r7, #96]	; 0x60
 80064d4:	667a      	str	r2, [r7, #100]	; 0x64
 80064d6:	f04f 0200 	mov.w	r2, #0
 80064da:	f04f 0300 	mov.w	r3, #0
 80064de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80064e2:	4649      	mov	r1, r9
 80064e4:	008b      	lsls	r3, r1, #2
 80064e6:	4641      	mov	r1, r8
 80064e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ec:	4641      	mov	r1, r8
 80064ee:	008a      	lsls	r2, r1, #2
 80064f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80064f4:	f7fa fbe8 	bl	8000cc8 <__aeabi_uldivmod>
 80064f8:	4602      	mov	r2, r0
 80064fa:	460b      	mov	r3, r1
 80064fc:	4b0d      	ldr	r3, [pc, #52]	; (8006534 <UART_SetConfig+0x4e4>)
 80064fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006502:	095b      	lsrs	r3, r3, #5
 8006504:	2164      	movs	r1, #100	; 0x64
 8006506:	fb01 f303 	mul.w	r3, r1, r3
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	011b      	lsls	r3, r3, #4
 800650e:	3332      	adds	r3, #50	; 0x32
 8006510:	4a08      	ldr	r2, [pc, #32]	; (8006534 <UART_SetConfig+0x4e4>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	095b      	lsrs	r3, r3, #5
 8006518:	f003 020f 	and.w	r2, r3, #15
 800651c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4422      	add	r2, r4
 8006524:	609a      	str	r2, [r3, #8]
}
 8006526:	bf00      	nop
 8006528:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800652c:	46bd      	mov	sp, r7
 800652e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006532:	bf00      	nop
 8006534:	51eb851f 	.word	0x51eb851f

08006538 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800653c:	4904      	ldr	r1, [pc, #16]	; (8006550 <MX_FATFS_Init+0x18>)
 800653e:	4805      	ldr	r0, [pc, #20]	; (8006554 <MX_FATFS_Init+0x1c>)
 8006540:	f003 f8fc 	bl	800973c <FATFS_LinkDriver>
 8006544:	4603      	mov	r3, r0
 8006546:	461a      	mov	r2, r3
 8006548:	4b03      	ldr	r3, [pc, #12]	; (8006558 <MX_FATFS_Init+0x20>)
 800654a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800654c:	bf00      	nop
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200012f8 	.word	0x200012f8
 8006554:	2000000c 	.word	0x2000000c
 8006558:	200012f4 	.word	0x200012f4

0800655c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800655c:	b480      	push	{r7}
 800655e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006560:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006562:	4618      	mov	r0, r3
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8006576:	79fb      	ldrb	r3, [r7, #7]
 8006578:	4618      	mov	r0, r3
 800657a:	f000 f9d7 	bl	800692c <USER_SPI_initialize>
 800657e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0
 800658e:	4603      	mov	r3, r0
 8006590:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	4618      	mov	r0, r3
 8006596:	f000 fab5 	bl	8006b04 <USER_SPI_status>
 800659a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800659c:	4618      	mov	r0, r3
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60b9      	str	r1, [r7, #8]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	4603      	mov	r3, r0
 80065b2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80065b4:	7bf8      	ldrb	r0, [r7, #15]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	68b9      	ldr	r1, [r7, #8]
 80065bc:	f000 fab8 	bl	8006b30 <USER_SPI_read>
 80065c0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
 80065d6:	4603      	mov	r3, r0
 80065d8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80065da:	7bf8      	ldrb	r0, [r7, #15]
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	f000 fb0b 	bl	8006bfc <USER_SPI_write>
 80065e6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	4603      	mov	r3, r0
 80065f8:	603a      	str	r2, [r7, #0]
 80065fa:	71fb      	strb	r3, [r7, #7]
 80065fc:	460b      	mov	r3, r1
 80065fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 8006600:	79b9      	ldrb	r1, [r7, #6]
 8006602:	79fb      	ldrb	r3, [r7, #7]
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fb74 	bl	8006cf4 <USER_SPI_ioctl>
 800660c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800660e:	4618      	mov	r0, r3
 8006610:	3708      	adds	r7, #8
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 8006620:	f7fc fa3c 	bl	8002a9c <HAL_GetTick>
 8006624:	4603      	mov	r3, r0
 8006626:	4a04      	ldr	r2, [pc, #16]	; (8006638 <SPI_Timer_On+0x20>)
 8006628:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800662a:	4a04      	ldr	r2, [pc, #16]	; (800663c <SPI_Timer_On+0x24>)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6013      	str	r3, [r2, #0]
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20001300 	.word	0x20001300
 800663c:	20001304 	.word	0x20001304

08006640 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8006644:	f7fc fa2a 	bl	8002a9c <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	4b06      	ldr	r3, [pc, #24]	; (8006664 <SPI_Timer_Status+0x24>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	1ad2      	subs	r2, r2, r3
 8006650:	4b05      	ldr	r3, [pc, #20]	; (8006668 <SPI_Timer_Status+0x28>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	429a      	cmp	r2, r3
 8006656:	bf34      	ite	cc
 8006658:	2301      	movcc	r3, #1
 800665a:	2300      	movcs	r3, #0
 800665c:	b2db      	uxtb	r3, r3
}
 800665e:	4618      	mov	r0, r3
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	20001300 	.word	0x20001300
 8006668:	20001304 	.word	0x20001304

0800666c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af02      	add	r7, sp, #8
 8006672:	4603      	mov	r3, r0
 8006674:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8006676:	f107 020f 	add.w	r2, r7, #15
 800667a:	1df9      	adds	r1, r7, #7
 800667c:	2332      	movs	r3, #50	; 0x32
 800667e:	9300      	str	r3, [sp, #0]
 8006680:	2301      	movs	r3, #1
 8006682:	4804      	ldr	r0, [pc, #16]	; (8006694 <xchg_spi+0x28>)
 8006684:	f7fe fe89 	bl	800539a <HAL_SPI_TransmitReceive>
    return rxDat;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20001168 	.word	0x20001168

08006698 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8006698:	b590      	push	{r4, r7, lr}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80066a2:	2300      	movs	r3, #0
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	e00a      	b.n	80066be <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	18d4      	adds	r4, r2, r3
 80066ae:	20ff      	movs	r0, #255	; 0xff
 80066b0:	f7ff ffdc 	bl	800666c <xchg_spi>
 80066b4:	4603      	mov	r3, r0
 80066b6:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3301      	adds	r3, #1
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	68fa      	ldr	r2, [r7, #12]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d3f0      	bcc.n	80066a8 <rcvr_spi_multi+0x10>
	}
}
 80066c6:	bf00      	nop
 80066c8:	bf00      	nop
 80066ca:	3714      	adds	r7, #20
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd90      	pop	{r4, r7, pc}

080066d0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	b29a      	uxth	r2, r3
 80066de:	f04f 33ff 	mov.w	r3, #4294967295
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4803      	ldr	r0, [pc, #12]	; (80066f4 <xmit_spi_multi+0x24>)
 80066e6:	f7fe fd1c 	bl	8005122 <HAL_SPI_Transmit>
}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	20001168 	.word	0x20001168

080066f8 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b086      	sub	sp, #24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8006700:	f7fc f9cc 	bl	8002a9c <HAL_GetTick>
 8006704:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800670a:	20ff      	movs	r0, #255	; 0xff
 800670c:	f7ff ffae 	bl	800666c <xchg_spi>
 8006710:	4603      	mov	r3, r0
 8006712:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8006714:	7bfb      	ldrb	r3, [r7, #15]
 8006716:	2bff      	cmp	r3, #255	; 0xff
 8006718:	d007      	beq.n	800672a <wait_ready+0x32>
 800671a:	f7fc f9bf 	bl	8002a9c <HAL_GetTick>
 800671e:	4602      	mov	r2, r0
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	429a      	cmp	r2, r3
 8006728:	d8ef      	bhi.n	800670a <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800672a:	7bfb      	ldrb	r3, [r7, #15]
 800672c:	2bff      	cmp	r3, #255	; 0xff
 800672e:	bf0c      	ite	eq
 8006730:	2301      	moveq	r3, #1
 8006732:	2300      	movne	r3, #0
 8006734:	b2db      	uxtb	r3, r3
}
 8006736:	4618      	mov	r0, r3
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8006744:	2201      	movs	r2, #1
 8006746:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800674a:	4804      	ldr	r0, [pc, #16]	; (800675c <despiselect+0x1c>)
 800674c:	f7fd fd1a 	bl	8004184 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8006750:	20ff      	movs	r0, #255	; 0xff
 8006752:	f7ff ff8b 	bl	800666c <xchg_spi>

}
 8006756:	bf00      	nop
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40020000 	.word	0x40020000

08006760 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8006760:	b580      	push	{r7, lr}
 8006762:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8006764:	2200      	movs	r2, #0
 8006766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800676a:	480a      	ldr	r0, [pc, #40]	; (8006794 <spiselect+0x34>)
 800676c:	f7fd fd0a 	bl	8004184 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8006770:	20ff      	movs	r0, #255	; 0xff
 8006772:	f7ff ff7b 	bl	800666c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8006776:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800677a:	f7ff ffbd 	bl	80066f8 <wait_ready>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <spiselect+0x28>
 8006784:	2301      	movs	r3, #1
 8006786:	e002      	b.n	800678e <spiselect+0x2e>

	despiselect();
 8006788:	f7ff ffda 	bl	8006740 <despiselect>
	return 0;	/* Timeout */
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	40020000 	.word	0x40020000

08006798 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 80067a2:	20c8      	movs	r0, #200	; 0xc8
 80067a4:	f7ff ff38 	bl	8006618 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 80067a8:	20ff      	movs	r0, #255	; 0xff
 80067aa:	f7ff ff5f 	bl	800666c <xchg_spi>
 80067ae:	4603      	mov	r3, r0
 80067b0:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	2bff      	cmp	r3, #255	; 0xff
 80067b6:	d104      	bne.n	80067c2 <rcvr_datablock+0x2a>
 80067b8:	f7ff ff42 	bl	8006640 <SPI_Timer_Status>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f2      	bne.n	80067a8 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2bfe      	cmp	r3, #254	; 0xfe
 80067c6:	d001      	beq.n	80067cc <rcvr_datablock+0x34>
 80067c8:	2300      	movs	r3, #0
 80067ca:	e00a      	b.n	80067e2 <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f7ff ff62 	bl	8006698 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80067d4:	20ff      	movs	r0, #255	; 0xff
 80067d6:	f7ff ff49 	bl	800666c <xchg_spi>
 80067da:	20ff      	movs	r0, #255	; 0xff
 80067dc:	f7ff ff46 	bl	800666c <xchg_spi>

	return 1;						/* Function succeeded */
 80067e0:	2301      	movs	r3, #1
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b084      	sub	sp, #16
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
 80067f2:	460b      	mov	r3, r1
 80067f4:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80067f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80067fa:	f7ff ff7d 	bl	80066f8 <wait_ready>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <xmit_datablock+0x1e>
 8006804:	2300      	movs	r3, #0
 8006806:	e01e      	b.n	8006846 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	4618      	mov	r0, r3
 800680c:	f7ff ff2e 	bl	800666c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	2bfd      	cmp	r3, #253	; 0xfd
 8006814:	d016      	beq.n	8006844 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8006816:	f44f 7100 	mov.w	r1, #512	; 0x200
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f7ff ff58 	bl	80066d0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8006820:	20ff      	movs	r0, #255	; 0xff
 8006822:	f7ff ff23 	bl	800666c <xchg_spi>
 8006826:	20ff      	movs	r0, #255	; 0xff
 8006828:	f7ff ff20 	bl	800666c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800682c:	20ff      	movs	r0, #255	; 0xff
 800682e:	f7ff ff1d 	bl	800666c <xchg_spi>
 8006832:	4603      	mov	r3, r0
 8006834:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	f003 031f 	and.w	r3, r3, #31
 800683c:	2b05      	cmp	r3, #5
 800683e:	d001      	beq.n	8006844 <xmit_datablock+0x5a>
 8006840:	2300      	movs	r3, #0
 8006842:	e000      	b.n	8006846 <xmit_datablock+0x5c>
	}
	return 1;
 8006844:	2301      	movs	r3, #1
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	4603      	mov	r3, r0
 8006856:	6039      	str	r1, [r7, #0]
 8006858:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800685a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685e:	2b00      	cmp	r3, #0
 8006860:	da0e      	bge.n	8006880 <send_cmd+0x32>
		cmd &= 0x7F;
 8006862:	79fb      	ldrb	r3, [r7, #7]
 8006864:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006868:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800686a:	2100      	movs	r1, #0
 800686c:	2037      	movs	r0, #55	; 0x37
 800686e:	f7ff ffee 	bl	800684e <send_cmd>
 8006872:	4603      	mov	r3, r0
 8006874:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8006876:	7bbb      	ldrb	r3, [r7, #14]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d901      	bls.n	8006880 <send_cmd+0x32>
 800687c:	7bbb      	ldrb	r3, [r7, #14]
 800687e:	e051      	b.n	8006924 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8006880:	79fb      	ldrb	r3, [r7, #7]
 8006882:	2b0c      	cmp	r3, #12
 8006884:	d008      	beq.n	8006898 <send_cmd+0x4a>
		despiselect();
 8006886:	f7ff ff5b 	bl	8006740 <despiselect>
		if (!spiselect()) return 0xFF;
 800688a:	f7ff ff69 	bl	8006760 <spiselect>
 800688e:	4603      	mov	r3, r0
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <send_cmd+0x4a>
 8006894:	23ff      	movs	r3, #255	; 0xff
 8006896:	e045      	b.n	8006924 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8006898:	79fb      	ldrb	r3, [r7, #7]
 800689a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	4618      	mov	r0, r3
 80068a2:	f7ff fee3 	bl	800666c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	0e1b      	lsrs	r3, r3, #24
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff fedd 	bl	800666c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 80068b2:	683b      	ldr	r3, [r7, #0]
 80068b4:	0c1b      	lsrs	r3, r3, #16
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff fed7 	bl	800666c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff fed1 	bl	800666c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7ff fecc 	bl	800666c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80068d8:	79fb      	ldrb	r3, [r7, #7]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <send_cmd+0x94>
 80068de:	2395      	movs	r3, #149	; 0x95
 80068e0:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d101      	bne.n	80068ec <send_cmd+0x9e>
 80068e8:	2387      	movs	r3, #135	; 0x87
 80068ea:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff febc 	bl	800666c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80068f4:	79fb      	ldrb	r3, [r7, #7]
 80068f6:	2b0c      	cmp	r3, #12
 80068f8:	d102      	bne.n	8006900 <send_cmd+0xb2>
 80068fa:	20ff      	movs	r0, #255	; 0xff
 80068fc:	f7ff feb6 	bl	800666c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8006900:	230a      	movs	r3, #10
 8006902:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8006904:	20ff      	movs	r0, #255	; 0xff
 8006906:	f7ff feb1 	bl	800666c <xchg_spi>
 800690a:	4603      	mov	r3, r0
 800690c:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800690e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006912:	2b00      	cmp	r3, #0
 8006914:	da05      	bge.n	8006922 <send_cmd+0xd4>
 8006916:	7bfb      	ldrb	r3, [r7, #15]
 8006918:	3b01      	subs	r3, #1
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <send_cmd+0xb6>

	return res;							/* Return received response */
 8006922:	7bbb      	ldrb	r3, [r7, #14]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800692c:	b590      	push	{r4, r7, lr}
 800692e:	b085      	sub	sp, #20
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d001      	beq.n	8006940 <USER_SPI_initialize+0x14>
 800693c:	2301      	movs	r3, #1
 800693e:	e0d6      	b.n	8006aee <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8006940:	4b6d      	ldr	r3, [pc, #436]	; (8006af8 <USER_SPI_initialize+0x1cc>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f003 0302 	and.w	r3, r3, #2
 800694a:	2b00      	cmp	r3, #0
 800694c:	d003      	beq.n	8006956 <USER_SPI_initialize+0x2a>
 800694e:	4b6a      	ldr	r3, [pc, #424]	; (8006af8 <USER_SPI_initialize+0x1cc>)
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	b2db      	uxtb	r3, r3
 8006954:	e0cb      	b.n	8006aee <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 8006956:	4b69      	ldr	r3, [pc, #420]	; (8006afc <USER_SPI_initialize+0x1d0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006960:	4b66      	ldr	r3, [pc, #408]	; (8006afc <USER_SPI_initialize+0x1d0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8006968:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800696a:	230a      	movs	r3, #10
 800696c:	73fb      	strb	r3, [r7, #15]
 800696e:	e005      	b.n	800697c <USER_SPI_initialize+0x50>
 8006970:	20ff      	movs	r0, #255	; 0xff
 8006972:	f7ff fe7b 	bl	800666c <xchg_spi>
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	3b01      	subs	r3, #1
 800697a:	73fb      	strb	r3, [r7, #15]
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1f6      	bne.n	8006970 <USER_SPI_initialize+0x44>

	ty = 0;
 8006982:	2300      	movs	r3, #0
 8006984:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8006986:	2100      	movs	r1, #0
 8006988:	2000      	movs	r0, #0
 800698a:	f7ff ff60 	bl	800684e <send_cmd>
 800698e:	4603      	mov	r3, r0
 8006990:	2b01      	cmp	r3, #1
 8006992:	f040 808b 	bne.w	8006aac <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8006996:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800699a:	f7ff fe3d 	bl	8006618 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800699e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80069a2:	2008      	movs	r0, #8
 80069a4:	f7ff ff53 	bl	800684e <send_cmd>
 80069a8:	4603      	mov	r3, r0
 80069aa:	2b01      	cmp	r3, #1
 80069ac:	d151      	bne.n	8006a52 <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 80069ae:	2300      	movs	r3, #0
 80069b0:	73fb      	strb	r3, [r7, #15]
 80069b2:	e00d      	b.n	80069d0 <USER_SPI_initialize+0xa4>
 80069b4:	7bfc      	ldrb	r4, [r7, #15]
 80069b6:	20ff      	movs	r0, #255	; 0xff
 80069b8:	f7ff fe58 	bl	800666c <xchg_spi>
 80069bc:	4603      	mov	r3, r0
 80069be:	461a      	mov	r2, r3
 80069c0:	f104 0310 	add.w	r3, r4, #16
 80069c4:	443b      	add	r3, r7
 80069c6:	f803 2c08 	strb.w	r2, [r3, #-8]
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
 80069cc:	3301      	adds	r3, #1
 80069ce:	73fb      	strb	r3, [r7, #15]
 80069d0:	7bfb      	ldrb	r3, [r7, #15]
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d9ee      	bls.n	80069b4 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80069d6:	7abb      	ldrb	r3, [r7, #10]
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d167      	bne.n	8006aac <USER_SPI_initialize+0x180>
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	2baa      	cmp	r3, #170	; 0xaa
 80069e0:	d164      	bne.n	8006aac <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80069e2:	bf00      	nop
 80069e4:	f7ff fe2c 	bl	8006640 <SPI_Timer_Status>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <USER_SPI_initialize+0xd2>
 80069ee:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80069f2:	20a9      	movs	r0, #169	; 0xa9
 80069f4:	f7ff ff2b 	bl	800684e <send_cmd>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1f2      	bne.n	80069e4 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80069fe:	f7ff fe1f 	bl	8006640 <SPI_Timer_Status>
 8006a02:	4603      	mov	r3, r0
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d051      	beq.n	8006aac <USER_SPI_initialize+0x180>
 8006a08:	2100      	movs	r1, #0
 8006a0a:	203a      	movs	r0, #58	; 0x3a
 8006a0c:	f7ff ff1f 	bl	800684e <send_cmd>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d14a      	bne.n	8006aac <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8006a16:	2300      	movs	r3, #0
 8006a18:	73fb      	strb	r3, [r7, #15]
 8006a1a:	e00d      	b.n	8006a38 <USER_SPI_initialize+0x10c>
 8006a1c:	7bfc      	ldrb	r4, [r7, #15]
 8006a1e:	20ff      	movs	r0, #255	; 0xff
 8006a20:	f7ff fe24 	bl	800666c <xchg_spi>
 8006a24:	4603      	mov	r3, r0
 8006a26:	461a      	mov	r2, r3
 8006a28:	f104 0310 	add.w	r3, r4, #16
 8006a2c:	443b      	add	r3, r7
 8006a2e:	f803 2c08 	strb.w	r2, [r3, #-8]
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	3301      	adds	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
 8006a38:	7bfb      	ldrb	r3, [r7, #15]
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d9ee      	bls.n	8006a1c <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8006a3e:	7a3b      	ldrb	r3, [r7, #8]
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <USER_SPI_initialize+0x120>
 8006a48:	230c      	movs	r3, #12
 8006a4a:	e000      	b.n	8006a4e <USER_SPI_initialize+0x122>
 8006a4c:	2304      	movs	r3, #4
 8006a4e:	737b      	strb	r3, [r7, #13]
 8006a50:	e02c      	b.n	8006aac <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8006a52:	2100      	movs	r1, #0
 8006a54:	20a9      	movs	r0, #169	; 0xa9
 8006a56:	f7ff fefa 	bl	800684e <send_cmd>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d804      	bhi.n	8006a6a <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8006a60:	2302      	movs	r3, #2
 8006a62:	737b      	strb	r3, [r7, #13]
 8006a64:	23a9      	movs	r3, #169	; 0xa9
 8006a66:	73bb      	strb	r3, [r7, #14]
 8006a68:	e003      	b.n	8006a72 <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	737b      	strb	r3, [r7, #13]
 8006a6e:	2301      	movs	r3, #1
 8006a70:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8006a72:	bf00      	nop
 8006a74:	f7ff fde4 	bl	8006640 <SPI_Timer_Status>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <USER_SPI_initialize+0x162>
 8006a7e:	7bbb      	ldrb	r3, [r7, #14]
 8006a80:	2100      	movs	r1, #0
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7ff fee3 	bl	800684e <send_cmd>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1f2      	bne.n	8006a74 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8006a8e:	f7ff fdd7 	bl	8006640 <SPI_Timer_Status>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d007      	beq.n	8006aa8 <USER_SPI_initialize+0x17c>
 8006a98:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a9c:	2010      	movs	r0, #16
 8006a9e:	f7ff fed6 	bl	800684e <send_cmd>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <USER_SPI_initialize+0x180>
				ty = 0;
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8006aac:	4a14      	ldr	r2, [pc, #80]	; (8006b00 <USER_SPI_initialize+0x1d4>)
 8006aae:	7b7b      	ldrb	r3, [r7, #13]
 8006ab0:	7013      	strb	r3, [r2, #0]
	despiselect();
 8006ab2:	f7ff fe45 	bl	8006740 <despiselect>

	if (ty) {			/* OK */
 8006ab6:	7b7b      	ldrb	r3, [r7, #13]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d012      	beq.n	8006ae2 <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8006abc:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <USER_SPI_initialize+0x1d0>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ac6:	4b0d      	ldr	r3, [pc, #52]	; (8006afc <USER_SPI_initialize+0x1d0>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f042 0210 	orr.w	r2, r2, #16
 8006ace:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <USER_SPI_initialize+0x1cc>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	b2da      	uxtb	r2, r3
 8006adc:	4b06      	ldr	r3, [pc, #24]	; (8006af8 <USER_SPI_initialize+0x1cc>)
 8006ade:	701a      	strb	r2, [r3, #0]
 8006ae0:	e002      	b.n	8006ae8 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8006ae2:	4b05      	ldr	r3, [pc, #20]	; (8006af8 <USER_SPI_initialize+0x1cc>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8006ae8:	4b03      	ldr	r3, [pc, #12]	; (8006af8 <USER_SPI_initialize+0x1cc>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	b2db      	uxtb	r3, r3
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd90      	pop	{r4, r7, pc}
 8006af6:	bf00      	nop
 8006af8:	20000020 	.word	0x20000020
 8006afc:	20001168 	.word	0x20001168
 8006b00:	200012fc 	.word	0x200012fc

08006b04 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8006b0e:	79fb      	ldrb	r3, [r7, #7]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <USER_SPI_status+0x14>
 8006b14:	2301      	movs	r3, #1
 8006b16:	e002      	b.n	8006b1e <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <USER_SPI_status+0x28>)
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	b2db      	uxtb	r3, r3
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20000020 	.word	0x20000020

08006b30 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	60b9      	str	r1, [r7, #8]
 8006b38:	607a      	str	r2, [r7, #4]
 8006b3a:	603b      	str	r3, [r7, #0]
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d102      	bne.n	8006b4c <USER_SPI_read+0x1c>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <USER_SPI_read+0x20>
 8006b4c:	2304      	movs	r3, #4
 8006b4e:	e04d      	b.n	8006bec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <USER_SPI_read+0xc4>)
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <USER_SPI_read+0x32>
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e044      	b.n	8006bec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8006b62:	4b25      	ldr	r3, [pc, #148]	; (8006bf8 <USER_SPI_read+0xc8>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	f003 0308 	and.w	r3, r3, #8
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d102      	bne.n	8006b74 <USER_SPI_read+0x44>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	025b      	lsls	r3, r3, #9
 8006b72:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d111      	bne.n	8006b9e <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	2011      	movs	r0, #17
 8006b7e:	f7ff fe66 	bl	800684e <send_cmd>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d129      	bne.n	8006bdc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8006b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006b8c:	68b8      	ldr	r0, [r7, #8]
 8006b8e:	f7ff fe03 	bl	8006798 <rcvr_datablock>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d021      	beq.n	8006bdc <USER_SPI_read+0xac>
			count = 0;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	e01e      	b.n	8006bdc <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	2012      	movs	r0, #18
 8006ba2:	f7ff fe54 	bl	800684e <send_cmd>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d117      	bne.n	8006bdc <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8006bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bb0:	68b8      	ldr	r0, [r7, #8]
 8006bb2:	f7ff fdf1 	bl	8006798 <rcvr_datablock>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00a      	beq.n	8006bd2 <USER_SPI_read+0xa2>
				buff += 512;
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006bc2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	603b      	str	r3, [r7, #0]
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1ed      	bne.n	8006bac <USER_SPI_read+0x7c>
 8006bd0:	e000      	b.n	8006bd4 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8006bd2:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	200c      	movs	r0, #12
 8006bd8:	f7ff fe39 	bl	800684e <send_cmd>
		}
	}
	despiselect();
 8006bdc:	f7ff fdb0 	bl	8006740 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	bf14      	ite	ne
 8006be6:	2301      	movne	r3, #1
 8006be8:	2300      	moveq	r3, #0
 8006bea:	b2db      	uxtb	r3, r3
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}
 8006bf4:	20000020 	.word	0x20000020
 8006bf8:	200012fc 	.word	0x200012fc

08006bfc <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b084      	sub	sp, #16
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	607a      	str	r2, [r7, #4]
 8006c06:	603b      	str	r3, [r7, #0]
 8006c08:	4603      	mov	r3, r0
 8006c0a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d102      	bne.n	8006c18 <USER_SPI_write+0x1c>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <USER_SPI_write+0x20>
 8006c18:	2304      	movs	r3, #4
 8006c1a:	e063      	b.n	8006ce4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8006c1c:	4b33      	ldr	r3, [pc, #204]	; (8006cec <USER_SPI_write+0xf0>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	f003 0301 	and.w	r3, r3, #1
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <USER_SPI_write+0x32>
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e05a      	b.n	8006ce4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8006c2e:	4b2f      	ldr	r3, [pc, #188]	; (8006cec <USER_SPI_write+0xf0>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d001      	beq.n	8006c40 <USER_SPI_write+0x44>
 8006c3c:	2302      	movs	r3, #2
 8006c3e:	e051      	b.n	8006ce4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8006c40:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <USER_SPI_write+0xf4>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	f003 0308 	and.w	r3, r3, #8
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <USER_SPI_write+0x56>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	025b      	lsls	r3, r3, #9
 8006c50:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d110      	bne.n	8006c7a <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8006c58:	6879      	ldr	r1, [r7, #4]
 8006c5a:	2018      	movs	r0, #24
 8006c5c:	f7ff fdf7 	bl	800684e <send_cmd>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d136      	bne.n	8006cd4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8006c66:	21fe      	movs	r1, #254	; 0xfe
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	f7ff fdbe 	bl	80067ea <xmit_datablock>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d02f      	beq.n	8006cd4 <USER_SPI_write+0xd8>
			count = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	603b      	str	r3, [r7, #0]
 8006c78:	e02c      	b.n	8006cd4 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8006c7a:	4b1d      	ldr	r3, [pc, #116]	; (8006cf0 <USER_SPI_write+0xf4>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	f003 0306 	and.w	r3, r3, #6
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <USER_SPI_write+0x92>
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	2097      	movs	r0, #151	; 0x97
 8006c8a:	f7ff fde0 	bl	800684e <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	2019      	movs	r0, #25
 8006c92:	f7ff fddc 	bl	800684e <send_cmd>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d11b      	bne.n	8006cd4 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8006c9c:	21fc      	movs	r1, #252	; 0xfc
 8006c9e:	68b8      	ldr	r0, [r7, #8]
 8006ca0:	f7ff fda3 	bl	80067ea <xmit_datablock>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <USER_SPI_write+0xc4>
				buff += 512;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006cb0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	3b01      	subs	r3, #1
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ee      	bne.n	8006c9c <USER_SPI_write+0xa0>
 8006cbe:	e000      	b.n	8006cc2 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8006cc0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8006cc2:	21fd      	movs	r1, #253	; 0xfd
 8006cc4:	2000      	movs	r0, #0
 8006cc6:	f7ff fd90 	bl	80067ea <xmit_datablock>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <USER_SPI_write+0xd8>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8006cd4:	f7ff fd34 	bl	8006740 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	bf14      	ite	ne
 8006cde:	2301      	movne	r3, #1
 8006ce0:	2300      	moveq	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000020 	.word	0x20000020
 8006cf0:	200012fc 	.word	0x200012fc

08006cf4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b08c      	sub	sp, #48	; 0x30
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	603a      	str	r2, [r7, #0]
 8006cfe:	71fb      	strb	r3, [r7, #7]
 8006d00:	460b      	mov	r3, r1
 8006d02:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8006d04:	79fb      	ldrb	r3, [r7, #7]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d001      	beq.n	8006d0e <USER_SPI_ioctl+0x1a>
 8006d0a:	2304      	movs	r3, #4
 8006d0c:	e15a      	b.n	8006fc4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8006d0e:	4baf      	ldr	r3, [pc, #700]	; (8006fcc <USER_SPI_ioctl+0x2d8>)
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	f003 0301 	and.w	r3, r3, #1
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <USER_SPI_ioctl+0x2c>
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e151      	b.n	8006fc4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 8006d26:	79bb      	ldrb	r3, [r7, #6]
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	f200 8136 	bhi.w	8006f9a <USER_SPI_ioctl+0x2a6>
 8006d2e:	a201      	add	r2, pc, #4	; (adr r2, 8006d34 <USER_SPI_ioctl+0x40>)
 8006d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d34:	08006d49 	.word	0x08006d49
 8006d38:	08006d5d 	.word	0x08006d5d
 8006d3c:	08006f9b 	.word	0x08006f9b
 8006d40:	08006e09 	.word	0x08006e09
 8006d44:	08006eff 	.word	0x08006eff
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8006d48:	f7ff fd0a 	bl	8006760 <spiselect>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8127 	beq.w	8006fa2 <USER_SPI_ioctl+0x2ae>
 8006d54:	2300      	movs	r3, #0
 8006d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006d5a:	e122      	b.n	8006fa2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	2009      	movs	r0, #9
 8006d60:	f7ff fd75 	bl	800684e <send_cmd>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 811d 	bne.w	8006fa6 <USER_SPI_ioctl+0x2b2>
 8006d6c:	f107 030c 	add.w	r3, r7, #12
 8006d70:	2110      	movs	r1, #16
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff fd10 	bl	8006798 <rcvr_datablock>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	f000 8113 	beq.w	8006fa6 <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8006d80:	7b3b      	ldrb	r3, [r7, #12]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d111      	bne.n	8006dae <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8006d8a:	7d7b      	ldrb	r3, [r7, #21]
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	7d3b      	ldrb	r3, [r7, #20]
 8006d90:	021b      	lsls	r3, r3, #8
 8006d92:	4413      	add	r3, r2
 8006d94:	461a      	mov	r2, r3
 8006d96:	7cfb      	ldrb	r3, [r7, #19]
 8006d98:	041b      	lsls	r3, r3, #16
 8006d9a:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8006d9e:	4413      	add	r3, r2
 8006da0:	3301      	adds	r3, #1
 8006da2:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	029a      	lsls	r2, r3, #10
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e028      	b.n	8006e00 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8006dae:	7c7b      	ldrb	r3, [r7, #17]
 8006db0:	f003 030f 	and.w	r3, r3, #15
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	7dbb      	ldrb	r3, [r7, #22]
 8006db8:	09db      	lsrs	r3, r3, #7
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	7d7b      	ldrb	r3, [r7, #21]
 8006dc2:	005b      	lsls	r3, r3, #1
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	f003 0306 	and.w	r3, r3, #6
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	4413      	add	r3, r2
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8006dd6:	7d3b      	ldrb	r3, [r7, #20]
 8006dd8:	099b      	lsrs	r3, r3, #6
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	461a      	mov	r2, r3
 8006dde:	7cfb      	ldrb	r3, [r7, #19]
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	441a      	add	r2, r3
 8006de4:	7cbb      	ldrb	r3, [r7, #18]
 8006de6:	029b      	lsls	r3, r3, #10
 8006de8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006dec:	4413      	add	r3, r2
 8006dee:	3301      	adds	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8006df2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006df6:	3b09      	subs	r3, #9
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006e06:	e0ce      	b.n	8006fa6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8006e08:	4b71      	ldr	r3, [pc, #452]	; (8006fd0 <USER_SPI_ioctl+0x2dc>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	f003 0304 	and.w	r3, r3, #4
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d031      	beq.n	8006e78 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8006e14:	2100      	movs	r1, #0
 8006e16:	208d      	movs	r0, #141	; 0x8d
 8006e18:	f7ff fd19 	bl	800684e <send_cmd>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f040 80c3 	bne.w	8006faa <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8006e24:	20ff      	movs	r0, #255	; 0xff
 8006e26:	f7ff fc21 	bl	800666c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8006e2a:	f107 030c 	add.w	r3, r7, #12
 8006e2e:	2110      	movs	r1, #16
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7ff fcb1 	bl	8006798 <rcvr_datablock>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	f000 80b6 	beq.w	8006faa <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8006e3e:	2330      	movs	r3, #48	; 0x30
 8006e40:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006e44:	e007      	b.n	8006e56 <USER_SPI_ioctl+0x162>
 8006e46:	20ff      	movs	r0, #255	; 0xff
 8006e48:	f7ff fc10 	bl	800666c <xchg_spi>
 8006e4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e50:	3b01      	subs	r3, #1
 8006e52:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8006e56:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f3      	bne.n	8006e46 <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8006e5e:	7dbb      	ldrb	r3, [r7, #22]
 8006e60:	091b      	lsrs	r3, r3, #4
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	461a      	mov	r2, r3
 8006e66:	2310      	movs	r3, #16
 8006e68:	fa03 f202 	lsl.w	r2, r3, r2
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8006e76:	e098      	b.n	8006faa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8006e78:	2100      	movs	r1, #0
 8006e7a:	2009      	movs	r0, #9
 8006e7c:	f7ff fce7 	bl	800684e <send_cmd>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f040 8091 	bne.w	8006faa <USER_SPI_ioctl+0x2b6>
 8006e88:	f107 030c 	add.w	r3, r7, #12
 8006e8c:	2110      	movs	r1, #16
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7ff fc82 	bl	8006798 <rcvr_datablock>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 8087 	beq.w	8006faa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8006e9c:	4b4c      	ldr	r3, [pc, #304]	; (8006fd0 <USER_SPI_ioctl+0x2dc>)
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d012      	beq.n	8006ece <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8006ea8:	7dbb      	ldrb	r3, [r7, #22]
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006eb0:	7dfa      	ldrb	r2, [r7, #23]
 8006eb2:	09d2      	lsrs	r2, r2, #7
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	4413      	add	r3, r2
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	7e7b      	ldrb	r3, [r7, #25]
 8006ebc:	099b      	lsrs	r3, r3, #6
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	601a      	str	r2, [r3, #0]
 8006ecc:	e013      	b.n	8006ef6 <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8006ece:	7dbb      	ldrb	r3, [r7, #22]
 8006ed0:	109b      	asrs	r3, r3, #2
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	3301      	adds	r3, #1
 8006eda:	7dfa      	ldrb	r2, [r7, #23]
 8006edc:	00d2      	lsls	r2, r2, #3
 8006ede:	f002 0218 	and.w	r2, r2, #24
 8006ee2:	7df9      	ldrb	r1, [r7, #23]
 8006ee4:	0949      	lsrs	r1, r1, #5
 8006ee6:	b2c9      	uxtb	r1, r1
 8006ee8:	440a      	add	r2, r1
 8006eea:	3201      	adds	r2, #1
 8006eec:	fb02 f303 	mul.w	r3, r2, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8006efc:	e055      	b.n	8006faa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006efe:	4b34      	ldr	r3, [pc, #208]	; (8006fd0 <USER_SPI_ioctl+0x2dc>)
 8006f00:	781b      	ldrb	r3, [r3, #0]
 8006f02:	f003 0306 	and.w	r3, r3, #6
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d051      	beq.n	8006fae <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006f0a:	f107 020c 	add.w	r2, r7, #12
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	210b      	movs	r1, #11
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7ff feee 	bl	8006cf4 <USER_SPI_ioctl>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d149      	bne.n	8006fb2 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006f1e:	7b3b      	ldrb	r3, [r7, #12]
 8006f20:	099b      	lsrs	r3, r3, #6
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d104      	bne.n	8006f32 <USER_SPI_ioctl+0x23e>
 8006f28:	7dbb      	ldrb	r3, [r7, #22]
 8006f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d041      	beq.n	8006fb6 <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	623b      	str	r3, [r7, #32]
 8006f36:	6a3b      	ldr	r3, [r7, #32]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8006f42:	4b23      	ldr	r3, [pc, #140]	; (8006fd0 <USER_SPI_ioctl+0x2dc>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d105      	bne.n	8006f5a <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8006f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f50:	025b      	lsls	r3, r3, #9
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f56:	025b      	lsls	r3, r3, #9
 8006f58:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8006f5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f5c:	2020      	movs	r0, #32
 8006f5e:	f7ff fc76 	bl	800684e <send_cmd>
 8006f62:	4603      	mov	r3, r0
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d128      	bne.n	8006fba <USER_SPI_ioctl+0x2c6>
 8006f68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006f6a:	2021      	movs	r0, #33	; 0x21
 8006f6c:	f7ff fc6f 	bl	800684e <send_cmd>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d121      	bne.n	8006fba <USER_SPI_ioctl+0x2c6>
 8006f76:	2100      	movs	r1, #0
 8006f78:	2026      	movs	r0, #38	; 0x26
 8006f7a:	f7ff fc68 	bl	800684e <send_cmd>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d11a      	bne.n	8006fba <USER_SPI_ioctl+0x2c6>
 8006f84:	f247 5030 	movw	r0, #30000	; 0x7530
 8006f88:	f7ff fbb6 	bl	80066f8 <wait_ready>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d013      	beq.n	8006fba <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8006f92:	2300      	movs	r3, #0
 8006f94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 8006f98:	e00f      	b.n	8006fba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8006f9a:	2304      	movs	r3, #4
 8006f9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006fa0:	e00c      	b.n	8006fbc <USER_SPI_ioctl+0x2c8>
		break;
 8006fa2:	bf00      	nop
 8006fa4:	e00a      	b.n	8006fbc <USER_SPI_ioctl+0x2c8>
		break;
 8006fa6:	bf00      	nop
 8006fa8:	e008      	b.n	8006fbc <USER_SPI_ioctl+0x2c8>
		break;
 8006faa:	bf00      	nop
 8006fac:	e006      	b.n	8006fbc <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8006fae:	bf00      	nop
 8006fb0:	e004      	b.n	8006fbc <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8006fb2:	bf00      	nop
 8006fb4:	e002      	b.n	8006fbc <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8006fb6:	bf00      	nop
 8006fb8:	e000      	b.n	8006fbc <USER_SPI_ioctl+0x2c8>
		break;
 8006fba:	bf00      	nop
	}

	despiselect();
 8006fbc:	f7ff fbc0 	bl	8006740 <despiselect>

	return res;
 8006fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3730      	adds	r7, #48	; 0x30
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	20000020 	.word	0x20000020
 8006fd0:	200012fc 	.word	0x200012fc

08006fd4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	4603      	mov	r3, r0
 8006fdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006fde:	79fb      	ldrb	r3, [r7, #7]
 8006fe0:	4a08      	ldr	r2, [pc, #32]	; (8007004 <disk_status+0x30>)
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	4413      	add	r3, r2
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	79fa      	ldrb	r2, [r7, #7]
 8006fec:	4905      	ldr	r1, [pc, #20]	; (8007004 <disk_status+0x30>)
 8006fee:	440a      	add	r2, r1
 8006ff0:	7a12      	ldrb	r2, [r2, #8]
 8006ff2:	4610      	mov	r0, r2
 8006ff4:	4798      	blx	r3
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	20001330 	.word	0x20001330

08007008 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8007012:	2300      	movs	r3, #0
 8007014:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	4a0d      	ldr	r2, [pc, #52]	; (8007050 <disk_initialize+0x48>)
 800701a:	5cd3      	ldrb	r3, [r2, r3]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d111      	bne.n	8007044 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8007020:	79fb      	ldrb	r3, [r7, #7]
 8007022:	4a0b      	ldr	r2, [pc, #44]	; (8007050 <disk_initialize+0x48>)
 8007024:	2101      	movs	r1, #1
 8007026:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <disk_initialize+0x48>)
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	79fa      	ldrb	r2, [r7, #7]
 8007036:	4906      	ldr	r1, [pc, #24]	; (8007050 <disk_initialize+0x48>)
 8007038:	440a      	add	r2, r1
 800703a:	7a12      	ldrb	r2, [r2, #8]
 800703c:	4610      	mov	r0, r2
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}
 800704e:	bf00      	nop
 8007050:	20001330 	.word	0x20001330

08007054 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8007054:	b590      	push	{r4, r7, lr}
 8007056:	b087      	sub	sp, #28
 8007058:	af00      	add	r7, sp, #0
 800705a:	60b9      	str	r1, [r7, #8]
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	603b      	str	r3, [r7, #0]
 8007060:	4603      	mov	r3, r0
 8007062:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8007064:	7bfb      	ldrb	r3, [r7, #15]
 8007066:	4a0a      	ldr	r2, [pc, #40]	; (8007090 <disk_read+0x3c>)
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	4413      	add	r3, r2
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	689c      	ldr	r4, [r3, #8]
 8007070:	7bfb      	ldrb	r3, [r7, #15]
 8007072:	4a07      	ldr	r2, [pc, #28]	; (8007090 <disk_read+0x3c>)
 8007074:	4413      	add	r3, r2
 8007076:	7a18      	ldrb	r0, [r3, #8]
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	47a0      	blx	r4
 8007080:	4603      	mov	r3, r0
 8007082:	75fb      	strb	r3, [r7, #23]
  return res;
 8007084:	7dfb      	ldrb	r3, [r7, #23]
}
 8007086:	4618      	mov	r0, r3
 8007088:	371c      	adds	r7, #28
 800708a:	46bd      	mov	sp, r7
 800708c:	bd90      	pop	{r4, r7, pc}
 800708e:	bf00      	nop
 8007090:	20001330 	.word	0x20001330

08007094 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007094:	b590      	push	{r4, r7, lr}
 8007096:	b087      	sub	sp, #28
 8007098:	af00      	add	r7, sp, #0
 800709a:	60b9      	str	r1, [r7, #8]
 800709c:	607a      	str	r2, [r7, #4]
 800709e:	603b      	str	r3, [r7, #0]
 80070a0:	4603      	mov	r3, r0
 80070a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80070a4:	7bfb      	ldrb	r3, [r7, #15]
 80070a6:	4a0a      	ldr	r2, [pc, #40]	; (80070d0 <disk_write+0x3c>)
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	68dc      	ldr	r4, [r3, #12]
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	4a07      	ldr	r2, [pc, #28]	; (80070d0 <disk_write+0x3c>)
 80070b4:	4413      	add	r3, r2
 80070b6:	7a18      	ldrb	r0, [r3, #8]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	47a0      	blx	r4
 80070c0:	4603      	mov	r3, r0
 80070c2:	75fb      	strb	r3, [r7, #23]
  return res;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	371c      	adds	r7, #28
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd90      	pop	{r4, r7, pc}
 80070ce:	bf00      	nop
 80070d0:	20001330 	.word	0x20001330

080070d4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	603a      	str	r2, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
 80070e0:	460b      	mov	r3, r1
 80070e2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80070e4:	79fb      	ldrb	r3, [r7, #7]
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <disk_ioctl+0x38>)
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	79fa      	ldrb	r2, [r7, #7]
 80070f2:	4906      	ldr	r1, [pc, #24]	; (800710c <disk_ioctl+0x38>)
 80070f4:	440a      	add	r2, r1
 80070f6:	7a10      	ldrb	r0, [r2, #8]
 80070f8:	79b9      	ldrb	r1, [r7, #6]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	4798      	blx	r3
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
  return res;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	20001330 	.word	0x20001330

08007110 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3301      	adds	r3, #1
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007120:	89fb      	ldrh	r3, [r7, #14]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	b21a      	sxth	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	b21b      	sxth	r3, r3
 800712c:	4313      	orrs	r3, r2
 800712e:	b21b      	sxth	r3, r3
 8007130:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007132:	89fb      	ldrh	r3, [r7, #14]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	3303      	adds	r3, #3
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	3202      	adds	r2, #2
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	3201      	adds	r2, #1
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	4313      	orrs	r3, r2
 800716a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	021b      	lsls	r3, r3, #8
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
	return rv;
 8007178:	68fb      	ldr	r3, [r7, #12]
}
 800717a:	4618      	mov	r0, r3
 800717c:	3714      	adds	r7, #20
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr

08007186 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	460b      	mov	r3, r1
 8007190:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	607a      	str	r2, [r7, #4]
 8007198:	887a      	ldrh	r2, [r7, #2]
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	887b      	ldrh	r3, [r7, #2]
 80071a0:	0a1b      	lsrs	r3, r3, #8
 80071a2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	1c5a      	adds	r2, r3, #1
 80071a8:	607a      	str	r2, [r7, #4]
 80071aa:	887a      	ldrh	r2, [r7, #2]
 80071ac:	b2d2      	uxtb	r2, r2
 80071ae:	701a      	strb	r2, [r3, #0]
}
 80071b0:	bf00      	nop
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr

080071bc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80071bc:	b480      	push	{r7}
 80071be:	b083      	sub	sp, #12
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	1c5a      	adds	r2, r3, #1
 80071ca:	607a      	str	r2, [r7, #4]
 80071cc:	683a      	ldr	r2, [r7, #0]
 80071ce:	b2d2      	uxtb	r2, r2
 80071d0:	701a      	strb	r2, [r3, #0]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	0a1b      	lsrs	r3, r3, #8
 80071d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	1c5a      	adds	r2, r3, #1
 80071dc:	607a      	str	r2, [r7, #4]
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	b2d2      	uxtb	r2, r2
 80071e2:	701a      	strb	r2, [r3, #0]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	0a1b      	lsrs	r3, r3, #8
 80071e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	607a      	str	r2, [r7, #4]
 80071f0:	683a      	ldr	r2, [r7, #0]
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	0a1b      	lsrs	r3, r3, #8
 80071fa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	1c5a      	adds	r2, r3, #1
 8007200:	607a      	str	r2, [r7, #4]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	b2d2      	uxtb	r2, r2
 8007206:	701a      	strb	r2, [r3, #0]
}
 8007208:	bf00      	nop
 800720a:	370c      	adds	r7, #12
 800720c:	46bd      	mov	sp, r7
 800720e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007212:	4770      	bx	lr

08007214 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007214:	b480      	push	{r7}
 8007216:	b087      	sub	sp, #28
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00d      	beq.n	800724a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	1c53      	adds	r3, r2, #1
 8007232:	613b      	str	r3, [r7, #16]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	1c59      	adds	r1, r3, #1
 8007238:	6179      	str	r1, [r7, #20]
 800723a:	7812      	ldrb	r2, [r2, #0]
 800723c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	3b01      	subs	r3, #1
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d1f1      	bne.n	800722e <mem_cpy+0x1a>
	}
}
 800724a:	bf00      	nop
 800724c:	371c      	adds	r7, #28
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8007256:	b480      	push	{r7}
 8007258:	b087      	sub	sp, #28
 800725a:	af00      	add	r7, sp, #0
 800725c:	60f8      	str	r0, [r7, #12]
 800725e:	60b9      	str	r1, [r7, #8]
 8007260:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	617a      	str	r2, [r7, #20]
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	3b01      	subs	r3, #1
 8007276:	607b      	str	r3, [r7, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1f3      	bne.n	8007266 <mem_set+0x10>
}
 800727e:	bf00      	nop
 8007280:	bf00      	nop
 8007282:	371c      	adds	r7, #28
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800728c:	b480      	push	{r7}
 800728e:	b089      	sub	sp, #36	; 0x24
 8007290:	af00      	add	r7, sp, #0
 8007292:	60f8      	str	r0, [r7, #12]
 8007294:	60b9      	str	r1, [r7, #8]
 8007296:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	61fb      	str	r3, [r7, #28]
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	1c5a      	adds	r2, r3, #1
 80072a8:	61fa      	str	r2, [r7, #28]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	1c5a      	adds	r2, r3, #1
 80072b2:	61ba      	str	r2, [r7, #24]
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	1acb      	subs	r3, r1, r3
 80072b8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3b01      	subs	r3, #1
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <mem_cmp+0x40>
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d0eb      	beq.n	80072a4 <mem_cmp+0x18>

	return r;
 80072cc:	697b      	ldr	r3, [r7, #20]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3724      	adds	r7, #36	; 0x24
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr

080072da <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80072da:	b480      	push	{r7}
 80072dc:	b083      	sub	sp, #12
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80072e4:	e002      	b.n	80072ec <chk_chr+0x12>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	3301      	adds	r3, #1
 80072ea:	607b      	str	r3, [r7, #4]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	781b      	ldrb	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d005      	beq.n	8007300 <chk_chr+0x26>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d1f2      	bne.n	80072e6 <chk_chr+0xc>
	return *str;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	781b      	ldrb	r3, [r3, #0]
}
 8007304:	4618      	mov	r0, r3
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800731a:	2300      	movs	r3, #0
 800731c:	60bb      	str	r3, [r7, #8]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	60fb      	str	r3, [r7, #12]
 8007322:	e029      	b.n	8007378 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007324:	4a27      	ldr	r2, [pc, #156]	; (80073c4 <chk_lock+0xb4>)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	4413      	add	r3, r2
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01d      	beq.n	800736e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007332:	4a24      	ldr	r2, [pc, #144]	; (80073c4 <chk_lock+0xb4>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	4413      	add	r3, r2
 800733a:	681a      	ldr	r2, [r3, #0]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	429a      	cmp	r2, r3
 8007342:	d116      	bne.n	8007372 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007344:	4a1f      	ldr	r2, [pc, #124]	; (80073c4 <chk_lock+0xb4>)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	4413      	add	r3, r2
 800734c:	3304      	adds	r3, #4
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007354:	429a      	cmp	r2, r3
 8007356:	d10c      	bne.n	8007372 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007358:	4a1a      	ldr	r2, [pc, #104]	; (80073c4 <chk_lock+0xb4>)
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	011b      	lsls	r3, r3, #4
 800735e:	4413      	add	r3, r2
 8007360:	3308      	adds	r3, #8
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8007368:	429a      	cmp	r2, r3
 800736a:	d102      	bne.n	8007372 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800736c:	e007      	b.n	800737e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800736e:	2301      	movs	r3, #1
 8007370:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	60fb      	str	r3, [r7, #12]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d9d2      	bls.n	8007324 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2b02      	cmp	r3, #2
 8007382:	d109      	bne.n	8007398 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <chk_lock+0x80>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b02      	cmp	r3, #2
 800738e:	d101      	bne.n	8007394 <chk_lock+0x84>
 8007390:	2300      	movs	r3, #0
 8007392:	e010      	b.n	80073b6 <chk_lock+0xa6>
 8007394:	2312      	movs	r3, #18
 8007396:	e00e      	b.n	80073b6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d108      	bne.n	80073b0 <chk_lock+0xa0>
 800739e:	4a09      	ldr	r2, [pc, #36]	; (80073c4 <chk_lock+0xb4>)
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	4413      	add	r3, r2
 80073a6:	330c      	adds	r3, #12
 80073a8:	881b      	ldrh	r3, [r3, #0]
 80073aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ae:	d101      	bne.n	80073b4 <chk_lock+0xa4>
 80073b0:	2310      	movs	r3, #16
 80073b2:	e000      	b.n	80073b6 <chk_lock+0xa6>
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20001310 	.word	0x20001310

080073c8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80073ce:	2300      	movs	r3, #0
 80073d0:	607b      	str	r3, [r7, #4]
 80073d2:	e002      	b.n	80073da <enq_lock+0x12>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	3301      	adds	r3, #1
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d806      	bhi.n	80073ee <enq_lock+0x26>
 80073e0:	4a09      	ldr	r2, [pc, #36]	; (8007408 <enq_lock+0x40>)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	4413      	add	r3, r2
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1f2      	bne.n	80073d4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	bf14      	ite	ne
 80073f4:	2301      	movne	r3, #1
 80073f6:	2300      	moveq	r3, #0
 80073f8:	b2db      	uxtb	r3, r3
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
 8007406:	bf00      	nop
 8007408:	20001310 	.word	0x20001310

0800740c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	e01f      	b.n	800745c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800741c:	4a41      	ldr	r2, [pc, #260]	; (8007524 <inc_lock+0x118>)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	4413      	add	r3, r2
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d113      	bne.n	8007456 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800742e:	4a3d      	ldr	r2, [pc, #244]	; (8007524 <inc_lock+0x118>)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	4413      	add	r3, r2
 8007436:	3304      	adds	r3, #4
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800743e:	429a      	cmp	r2, r3
 8007440:	d109      	bne.n	8007456 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007442:	4a38      	ldr	r2, [pc, #224]	; (8007524 <inc_lock+0x118>)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	4413      	add	r3, r2
 800744a:	3308      	adds	r3, #8
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007452:	429a      	cmp	r2, r3
 8007454:	d006      	beq.n	8007464 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	3301      	adds	r3, #1
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d9dc      	bls.n	800741c <inc_lock+0x10>
 8007462:	e000      	b.n	8007466 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007464:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d132      	bne.n	80074d2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	e002      	b.n	8007478 <inc_lock+0x6c>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	3301      	adds	r3, #1
 8007476:	60fb      	str	r3, [r7, #12]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b01      	cmp	r3, #1
 800747c:	d806      	bhi.n	800748c <inc_lock+0x80>
 800747e:	4a29      	ldr	r2, [pc, #164]	; (8007524 <inc_lock+0x118>)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	011b      	lsls	r3, r3, #4
 8007484:	4413      	add	r3, r2
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1f2      	bne.n	8007472 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d101      	bne.n	8007496 <inc_lock+0x8a>
 8007492:	2300      	movs	r3, #0
 8007494:	e040      	b.n	8007518 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	4922      	ldr	r1, [pc, #136]	; (8007524 <inc_lock+0x118>)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	011b      	lsls	r3, r3, #4
 80074a0:	440b      	add	r3, r1
 80074a2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	491e      	ldr	r1, [pc, #120]	; (8007524 <inc_lock+0x118>)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	011b      	lsls	r3, r3, #4
 80074ae:	440b      	add	r3, r1
 80074b0:	3304      	adds	r3, #4
 80074b2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	695a      	ldr	r2, [r3, #20]
 80074b8:	491a      	ldr	r1, [pc, #104]	; (8007524 <inc_lock+0x118>)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	440b      	add	r3, r1
 80074c0:	3308      	adds	r3, #8
 80074c2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80074c4:	4a17      	ldr	r2, [pc, #92]	; (8007524 <inc_lock+0x118>)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	011b      	lsls	r3, r3, #4
 80074ca:	4413      	add	r3, r2
 80074cc:	330c      	adds	r3, #12
 80074ce:	2200      	movs	r2, #0
 80074d0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d009      	beq.n	80074ec <inc_lock+0xe0>
 80074d8:	4a12      	ldr	r2, [pc, #72]	; (8007524 <inc_lock+0x118>)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	011b      	lsls	r3, r3, #4
 80074de:	4413      	add	r3, r2
 80074e0:	330c      	adds	r3, #12
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <inc_lock+0xe0>
 80074e8:	2300      	movs	r3, #0
 80074ea:	e015      	b.n	8007518 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d108      	bne.n	8007504 <inc_lock+0xf8>
 80074f2:	4a0c      	ldr	r2, [pc, #48]	; (8007524 <inc_lock+0x118>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	330c      	adds	r3, #12
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	b29a      	uxth	r2, r3
 8007502:	e001      	b.n	8007508 <inc_lock+0xfc>
 8007504:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007508:	4906      	ldr	r1, [pc, #24]	; (8007524 <inc_lock+0x118>)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	011b      	lsls	r3, r3, #4
 800750e:	440b      	add	r3, r1
 8007510:	330c      	adds	r3, #12
 8007512:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	3301      	adds	r3, #1
}
 8007518:	4618      	mov	r0, r3
 800751a:	3714      	adds	r7, #20
 800751c:	46bd      	mov	sp, r7
 800751e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007522:	4770      	bx	lr
 8007524:	20001310 	.word	0x20001310

08007528 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	3b01      	subs	r3, #1
 8007534:	607b      	str	r3, [r7, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d825      	bhi.n	8007588 <dec_lock+0x60>
		n = Files[i].ctr;
 800753c:	4a17      	ldr	r2, [pc, #92]	; (800759c <dec_lock+0x74>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	011b      	lsls	r3, r3, #4
 8007542:	4413      	add	r3, r2
 8007544:	330c      	adds	r3, #12
 8007546:	881b      	ldrh	r3, [r3, #0]
 8007548:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800754a:	89fb      	ldrh	r3, [r7, #14]
 800754c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007550:	d101      	bne.n	8007556 <dec_lock+0x2e>
 8007552:	2300      	movs	r3, #0
 8007554:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d002      	beq.n	8007562 <dec_lock+0x3a>
 800755c:	89fb      	ldrh	r3, [r7, #14]
 800755e:	3b01      	subs	r3, #1
 8007560:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007562:	4a0e      	ldr	r2, [pc, #56]	; (800759c <dec_lock+0x74>)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	4413      	add	r3, r2
 800756a:	330c      	adds	r3, #12
 800756c:	89fa      	ldrh	r2, [r7, #14]
 800756e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007570:	89fb      	ldrh	r3, [r7, #14]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <dec_lock+0x5a>
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <dec_lock+0x74>)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	011b      	lsls	r3, r3, #4
 800757c:	4413      	add	r3, r2
 800757e:	2200      	movs	r2, #0
 8007580:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007582:	2300      	movs	r3, #0
 8007584:	737b      	strb	r3, [r7, #13]
 8007586:	e001      	b.n	800758c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8007588:	2302      	movs	r3, #2
 800758a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800758c:	7b7b      	ldrb	r3, [r7, #13]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20001310 	.word	0x20001310

080075a0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80075a8:	2300      	movs	r3, #0
 80075aa:	60fb      	str	r3, [r7, #12]
 80075ac:	e010      	b.n	80075d0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80075ae:	4a0d      	ldr	r2, [pc, #52]	; (80075e4 <clear_lock+0x44>)
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	011b      	lsls	r3, r3, #4
 80075b4:	4413      	add	r3, r2
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d105      	bne.n	80075ca <clear_lock+0x2a>
 80075be:	4a09      	ldr	r2, [pc, #36]	; (80075e4 <clear_lock+0x44>)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4413      	add	r3, r2
 80075c6:	2200      	movs	r2, #0
 80075c8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	3301      	adds	r3, #1
 80075ce:	60fb      	str	r3, [r7, #12]
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d9eb      	bls.n	80075ae <clear_lock+0xe>
	}
}
 80075d6:	bf00      	nop
 80075d8:	bf00      	nop
 80075da:	3714      	adds	r7, #20
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr
 80075e4:	20001310 	.word	0x20001310

080075e8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	78db      	ldrb	r3, [r3, #3]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d034      	beq.n	8007666 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	7858      	ldrb	r0, [r3, #1]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800760c:	2301      	movs	r3, #1
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	f7ff fd40 	bl	8007094 <disk_write>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <sync_window+0x38>
			res = FR_DISK_ERR;
 800761a:	2301      	movs	r3, #1
 800761c:	73fb      	strb	r3, [r7, #15]
 800761e:	e022      	b.n	8007666 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	1ad2      	subs	r2, r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	429a      	cmp	r2, r3
 8007634:	d217      	bcs.n	8007666 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	789b      	ldrb	r3, [r3, #2]
 800763a:	613b      	str	r3, [r7, #16]
 800763c:	e010      	b.n	8007660 <sync_window+0x78>
					wsect += fs->fsize;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4413      	add	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7858      	ldrb	r0, [r3, #1]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007652:	2301      	movs	r3, #1
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	f7ff fd1d 	bl	8007094 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	3b01      	subs	r3, #1
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d8eb      	bhi.n	800763e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8007666:	7bfb      	ldrb	r3, [r7, #15]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800767a:	2300      	movs	r3, #0
 800767c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007682:	683a      	ldr	r2, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d01b      	beq.n	80076c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f7ff ffad 	bl	80075e8 <sync_window>
 800768e:	4603      	mov	r3, r0
 8007690:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007692:	7bfb      	ldrb	r3, [r7, #15]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d113      	bne.n	80076c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	7858      	ldrb	r0, [r3, #1]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076a2:	2301      	movs	r3, #1
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	f7ff fcd5 	bl	8007054 <disk_read>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d004      	beq.n	80076ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80076b0:	f04f 33ff 	mov.w	r3, #4294967295
 80076b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	683a      	ldr	r2, [r7, #0]
 80076be:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80076c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3710      	adds	r7, #16
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
	...

080076cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7ff ff87 	bl	80075e8 <sync_window>
 80076da:	4603      	mov	r3, r0
 80076dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d158      	bne.n	8007796 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b03      	cmp	r3, #3
 80076ea:	d148      	bne.n	800777e <sync_fs+0xb2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	791b      	ldrb	r3, [r3, #4]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d144      	bne.n	800777e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3330      	adds	r3, #48	; 0x30
 80076f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076fc:	2100      	movs	r1, #0
 80076fe:	4618      	mov	r0, r3
 8007700:	f7ff fda9 	bl	8007256 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3330      	adds	r3, #48	; 0x30
 8007708:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800770c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fd38 	bl	8007186 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	3330      	adds	r3, #48	; 0x30
 800771a:	4921      	ldr	r1, [pc, #132]	; (80077a0 <sync_fs+0xd4>)
 800771c:	4618      	mov	r0, r3
 800771e:	f7ff fd4d 	bl	80071bc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3330      	adds	r3, #48	; 0x30
 8007726:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800772a:	491e      	ldr	r1, [pc, #120]	; (80077a4 <sync_fs+0xd8>)
 800772c:	4618      	mov	r0, r3
 800772e:	f7ff fd45 	bl	80071bc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	3330      	adds	r3, #48	; 0x30
 8007736:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	691b      	ldr	r3, [r3, #16]
 800773e:	4619      	mov	r1, r3
 8007740:	4610      	mov	r0, r2
 8007742:	f7ff fd3b 	bl	80071bc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	3330      	adds	r3, #48	; 0x30
 800774a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	4619      	mov	r1, r3
 8007754:	4610      	mov	r0, r2
 8007756:	f7ff fd31 	bl	80071bc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69db      	ldr	r3, [r3, #28]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7858      	ldrb	r0, [r3, #1]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007772:	2301      	movs	r3, #1
 8007774:	f7ff fc8e 	bl	8007094 <disk_write>
			fs->fsi_flag = 0;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	785b      	ldrb	r3, [r3, #1]
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	4618      	mov	r0, r3
 8007788:	f7ff fca4 	bl	80070d4 <disk_ioctl>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d001      	beq.n	8007796 <sync_fs+0xca>
 8007792:	2301      	movs	r3, #1
 8007794:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007796:	7bfb      	ldrb	r3, [r7, #15]
}
 8007798:	4618      	mov	r0, r3
 800779a:	3710      	adds	r7, #16
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}
 80077a0:	41615252 	.word	0x41615252
 80077a4:	61417272 	.word	0x61417272

080077a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	3b02      	subs	r3, #2
 80077b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	3b02      	subs	r3, #2
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d301      	bcc.n	80077c8 <clust2sect+0x20>
 80077c4:	2300      	movs	r3, #0
 80077c6:	e008      	b.n	80077da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	895b      	ldrh	r3, [r3, #10]
 80077cc:	461a      	mov	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	fb03 f202 	mul.w	r2, r3, r2
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	4413      	add	r3, r2
}
 80077da:	4618      	mov	r0, r3
 80077dc:	370c      	adds	r7, #12
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b086      	sub	sp, #24
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d904      	bls.n	8007806 <get_fat+0x20>
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	695b      	ldr	r3, [r3, #20]
 8007800:	683a      	ldr	r2, [r7, #0]
 8007802:	429a      	cmp	r2, r3
 8007804:	d302      	bcc.n	800780c <get_fat+0x26>
		val = 1;	/* Internal error */
 8007806:	2301      	movs	r3, #1
 8007808:	617b      	str	r3, [r7, #20]
 800780a:	e08f      	b.n	800792c <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800780c:	f04f 33ff 	mov.w	r3, #4294967295
 8007810:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b03      	cmp	r3, #3
 8007818:	d062      	beq.n	80078e0 <get_fat+0xfa>
 800781a:	2b03      	cmp	r3, #3
 800781c:	dc7c      	bgt.n	8007918 <get_fat+0x132>
 800781e:	2b01      	cmp	r3, #1
 8007820:	d002      	beq.n	8007828 <get_fat+0x42>
 8007822:	2b02      	cmp	r3, #2
 8007824:	d042      	beq.n	80078ac <get_fat+0xc6>
 8007826:	e077      	b.n	8007918 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	085b      	lsrs	r3, r3, #1
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	6a1a      	ldr	r2, [r3, #32]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	0a5b      	lsrs	r3, r3, #9
 800783e:	4413      	add	r3, r2
 8007840:	4619      	mov	r1, r3
 8007842:	6938      	ldr	r0, [r7, #16]
 8007844:	f7ff ff14 	bl	8007670 <move_window>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d167      	bne.n	800791e <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	60fa      	str	r2, [r7, #12]
 8007854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	4413      	add	r3, r2
 800785c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007860:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	6a1a      	ldr	r2, [r3, #32]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	0a5b      	lsrs	r3, r3, #9
 800786a:	4413      	add	r3, r2
 800786c:	4619      	mov	r1, r3
 800786e:	6938      	ldr	r0, [r7, #16]
 8007870:	f7ff fefe 	bl	8007670 <move_window>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d153      	bne.n	8007922 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007880:	693a      	ldr	r2, [r7, #16]
 8007882:	4413      	add	r3, r2
 8007884:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	461a      	mov	r2, r3
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4313      	orrs	r3, r2
 8007890:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <get_fat+0xbc>
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	091b      	lsrs	r3, r3, #4
 80078a0:	e002      	b.n	80078a8 <get_fat+0xc2>
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80078a8:	617b      	str	r3, [r7, #20]
			break;
 80078aa:	e03f      	b.n	800792c <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	6a1a      	ldr	r2, [r3, #32]
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	0a1b      	lsrs	r3, r3, #8
 80078b4:	4413      	add	r3, r2
 80078b6:	4619      	mov	r1, r3
 80078b8:	6938      	ldr	r0, [r7, #16]
 80078ba:	f7ff fed9 	bl	8007670 <move_window>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d130      	bne.n	8007926 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80078c4:	693b      	ldr	r3, [r7, #16]
 80078c6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	005b      	lsls	r3, r3, #1
 80078ce:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80078d2:	4413      	add	r3, r2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7ff fc1b 	bl	8007110 <ld_word>
 80078da:	4603      	mov	r3, r0
 80078dc:	617b      	str	r3, [r7, #20]
			break;
 80078de:	e025      	b.n	800792c <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6a1a      	ldr	r2, [r3, #32]
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	09db      	lsrs	r3, r3, #7
 80078e8:	4413      	add	r3, r2
 80078ea:	4619      	mov	r1, r3
 80078ec:	6938      	ldr	r0, [r7, #16]
 80078ee:	f7ff febf 	bl	8007670 <move_window>
 80078f2:	4603      	mov	r3, r0
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d118      	bne.n	800792a <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007906:	4413      	add	r3, r2
 8007908:	4618      	mov	r0, r3
 800790a:	f7ff fc19 	bl	8007140 <ld_dword>
 800790e:	4603      	mov	r3, r0
 8007910:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007914:	617b      	str	r3, [r7, #20]
			break;
 8007916:	e009      	b.n	800792c <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007918:	2301      	movs	r3, #1
 800791a:	617b      	str	r3, [r7, #20]
 800791c:	e006      	b.n	800792c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800791e:	bf00      	nop
 8007920:	e004      	b.n	800792c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007922:	bf00      	nop
 8007924:	e002      	b.n	800792c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007926:	bf00      	nop
 8007928:	e000      	b.n	800792c <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800792a:	bf00      	nop
		}
	}

	return val;
 800792c:	697b      	ldr	r3, [r7, #20]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007936:	b590      	push	{r4, r7, lr}
 8007938:	b089      	sub	sp, #36	; 0x24
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007942:	2302      	movs	r3, #2
 8007944:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b01      	cmp	r3, #1
 800794a:	f240 80d2 	bls.w	8007af2 <put_fat+0x1bc>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	429a      	cmp	r2, r3
 8007956:	f080 80cc 	bcs.w	8007af2 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	2b03      	cmp	r3, #3
 8007960:	f000 8096 	beq.w	8007a90 <put_fat+0x15a>
 8007964:	2b03      	cmp	r3, #3
 8007966:	f300 80cd 	bgt.w	8007b04 <put_fat+0x1ce>
 800796a:	2b01      	cmp	r3, #1
 800796c:	d002      	beq.n	8007974 <put_fat+0x3e>
 800796e:	2b02      	cmp	r3, #2
 8007970:	d06e      	beq.n	8007a50 <put_fat+0x11a>
 8007972:	e0c7      	b.n	8007b04 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	61bb      	str	r3, [r7, #24]
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	085b      	lsrs	r3, r3, #1
 800797c:	69ba      	ldr	r2, [r7, #24]
 800797e:	4413      	add	r3, r2
 8007980:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1a      	ldr	r2, [r3, #32]
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	0a5b      	lsrs	r3, r3, #9
 800798a:	4413      	add	r3, r2
 800798c:	4619      	mov	r1, r3
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f7ff fe6e 	bl	8007670 <move_window>
 8007994:	4603      	mov	r3, r0
 8007996:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007998:	7ffb      	ldrb	r3, [r7, #31]
 800799a:	2b00      	cmp	r3, #0
 800799c:	f040 80ab 	bne.w	8007af6 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	1c59      	adds	r1, r3, #1
 80079aa:	61b9      	str	r1, [r7, #24]
 80079ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b0:	4413      	add	r3, r2
 80079b2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	f003 0301 	and.w	r3, r3, #1
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d00d      	beq.n	80079da <put_fat+0xa4>
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	b25b      	sxtb	r3, r3
 80079c4:	f003 030f 	and.w	r3, r3, #15
 80079c8:	b25a      	sxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	011b      	lsls	r3, r3, #4
 80079d0:	b25b      	sxtb	r3, r3
 80079d2:	4313      	orrs	r3, r2
 80079d4:	b25b      	sxtb	r3, r3
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	e001      	b.n	80079de <put_fat+0xa8>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2201      	movs	r2, #1
 80079e6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6a1a      	ldr	r2, [r3, #32]
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	0a5b      	lsrs	r3, r3, #9
 80079f0:	4413      	add	r3, r2
 80079f2:	4619      	mov	r1, r3
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f7ff fe3b 	bl	8007670 <move_window>
 80079fa:	4603      	mov	r3, r0
 80079fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079fe:	7ffb      	ldrb	r3, [r7, #31]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d17a      	bne.n	8007afa <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a0a:	69bb      	ldr	r3, [r7, #24]
 8007a0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a10:	4413      	add	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	f003 0301 	and.w	r3, r3, #1
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <put_fat+0xf0>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	091b      	lsrs	r3, r3, #4
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	e00e      	b.n	8007a44 <put_fat+0x10e>
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	b25b      	sxtb	r3, r3
 8007a2c:	f023 030f 	bic.w	r3, r3, #15
 8007a30:	b25a      	sxtb	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	0a1b      	lsrs	r3, r3, #8
 8007a36:	b25b      	sxtb	r3, r3
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	b25b      	sxtb	r3, r3
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	b25b      	sxtb	r3, r3
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	70da      	strb	r2, [r3, #3]
			break;
 8007a4e:	e059      	b.n	8007b04 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a1a      	ldr	r2, [r3, #32]
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	0a1b      	lsrs	r3, r3, #8
 8007a58:	4413      	add	r3, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f7ff fe07 	bl	8007670 <move_window>
 8007a62:	4603      	mov	r3, r0
 8007a64:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007a66:	7ffb      	ldrb	r3, [r7, #31]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d148      	bne.n	8007afe <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	005b      	lsls	r3, r3, #1
 8007a76:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007a7a:	4413      	add	r3, r2
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	b292      	uxth	r2, r2
 8007a80:	4611      	mov	r1, r2
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff fb7f 	bl	8007186 <st_word>
			fs->wflag = 1;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	70da      	strb	r2, [r3, #3]
			break;
 8007a8e:	e039      	b.n	8007b04 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a1a      	ldr	r2, [r3, #32]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	09db      	lsrs	r3, r3, #7
 8007a98:	4413      	add	r3, r2
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f7ff fde7 	bl	8007670 <move_window>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007aa6:	7ffb      	ldrb	r3, [r7, #31]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d12a      	bne.n	8007b02 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007ac0:	4413      	add	r3, r2
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff fb3c 	bl	8007140 <ld_dword>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007ace:	4323      	orrs	r3, r4
 8007ad0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	009b      	lsls	r3, r3, #2
 8007adc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007ae0:	4413      	add	r3, r2
 8007ae2:	6879      	ldr	r1, [r7, #4]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7ff fb69 	bl	80071bc <st_dword>
			fs->wflag = 1;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2201      	movs	r2, #1
 8007aee:	70da      	strb	r2, [r3, #3]
			break;
 8007af0:	e008      	b.n	8007b04 <put_fat+0x1ce>
		}
	}
 8007af2:	bf00      	nop
 8007af4:	e006      	b.n	8007b04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007af6:	bf00      	nop
 8007af8:	e004      	b.n	8007b04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007afa:	bf00      	nop
 8007afc:	e002      	b.n	8007b04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007afe:	bf00      	nop
 8007b00:	e000      	b.n	8007b04 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007b02:	bf00      	nop
	return res;
 8007b04:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3724      	adds	r7, #36	; 0x24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd90      	pop	{r4, r7, pc}

08007b0e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b088      	sub	sp, #32
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	60f8      	str	r0, [r7, #12]
 8007b16:	60b9      	str	r1, [r7, #8]
 8007b18:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d904      	bls.n	8007b34 <remove_chain+0x26>
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d301      	bcc.n	8007b38 <remove_chain+0x2a>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e04b      	b.n	8007bd0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00c      	beq.n	8007b58 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	69b8      	ldr	r0, [r7, #24]
 8007b46:	f7ff fef6 	bl	8007936 <put_fat>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007b4e:	7ffb      	ldrb	r3, [r7, #31]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <remove_chain+0x4a>
 8007b54:	7ffb      	ldrb	r3, [r7, #31]
 8007b56:	e03b      	b.n	8007bd0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007b58:	68b9      	ldr	r1, [r7, #8]
 8007b5a:	68f8      	ldr	r0, [r7, #12]
 8007b5c:	f7ff fe43 	bl	80077e6 <get_fat>
 8007b60:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d031      	beq.n	8007bcc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d101      	bne.n	8007b72 <remove_chain+0x64>
 8007b6e:	2302      	movs	r3, #2
 8007b70:	e02e      	b.n	8007bd0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b78:	d101      	bne.n	8007b7e <remove_chain+0x70>
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e028      	b.n	8007bd0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007b7e:	2200      	movs	r2, #0
 8007b80:	68b9      	ldr	r1, [r7, #8]
 8007b82:	69b8      	ldr	r0, [r7, #24]
 8007b84:	f7ff fed7 	bl	8007936 <put_fat>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007b8c:	7ffb      	ldrb	r3, [r7, #31]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d001      	beq.n	8007b96 <remove_chain+0x88>
 8007b92:	7ffb      	ldrb	r3, [r7, #31]
 8007b94:	e01c      	b.n	8007bd0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007b96:	69bb      	ldr	r3, [r7, #24]
 8007b98:	691a      	ldr	r2, [r3, #16]
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	3b02      	subs	r3, #2
 8007ba0:	429a      	cmp	r2, r3
 8007ba2:	d20b      	bcs.n	8007bbc <remove_chain+0xae>
			fs->free_clst++;
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	1c5a      	adds	r2, r3, #1
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	791b      	ldrb	r3, [r3, #4]
 8007bb2:	f043 0301 	orr.w	r3, r3, #1
 8007bb6:	b2da      	uxtb	r2, r3
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	695b      	ldr	r3, [r3, #20]
 8007bc4:	68ba      	ldr	r2, [r7, #8]
 8007bc6:	429a      	cmp	r2, r3
 8007bc8:	d3c6      	bcc.n	8007b58 <remove_chain+0x4a>
 8007bca:	e000      	b.n	8007bce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007bcc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3720      	adds	r7, #32
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
 8007be0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d10d      	bne.n	8007c0a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d004      	beq.n	8007c04 <create_chain+0x2c>
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	69ba      	ldr	r2, [r7, #24]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d31b      	bcc.n	8007c3c <create_chain+0x64>
 8007c04:	2301      	movs	r3, #1
 8007c06:	61bb      	str	r3, [r7, #24]
 8007c08:	e018      	b.n	8007c3c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f7ff fdea 	bl	80077e6 <get_fat>
 8007c12:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d801      	bhi.n	8007c1e <create_chain+0x46>
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	e070      	b.n	8007d00 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c24:	d101      	bne.n	8007c2a <create_chain+0x52>
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	e06a      	b.n	8007d00 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	695b      	ldr	r3, [r3, #20]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d201      	bcs.n	8007c38 <create_chain+0x60>
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	e063      	b.n	8007d00 <create_chain+0x128>
		scl = clst;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	3301      	adds	r3, #1
 8007c44:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	69fa      	ldr	r2, [r7, #28]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d307      	bcc.n	8007c60 <create_chain+0x88>
				ncl = 2;
 8007c50:	2302      	movs	r3, #2
 8007c52:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007c54:	69fa      	ldr	r2, [r7, #28]
 8007c56:	69bb      	ldr	r3, [r7, #24]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d901      	bls.n	8007c60 <create_chain+0x88>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e04f      	b.n	8007d00 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007c60:	69f9      	ldr	r1, [r7, #28]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f7ff fdbf 	bl	80077e6 <get_fat>
 8007c68:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00e      	beq.n	8007c8e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d003      	beq.n	8007c7e <create_chain+0xa6>
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7c:	d101      	bne.n	8007c82 <create_chain+0xaa>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	e03e      	b.n	8007d00 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007c82:	69fa      	ldr	r2, [r7, #28]
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d1da      	bne.n	8007c40 <create_chain+0x68>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	e038      	b.n	8007d00 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007c8e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007c90:	f04f 32ff 	mov.w	r2, #4294967295
 8007c94:	69f9      	ldr	r1, [r7, #28]
 8007c96:	6938      	ldr	r0, [r7, #16]
 8007c98:	f7ff fe4d 	bl	8007936 <put_fat>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007ca0:	7dfb      	ldrb	r3, [r7, #23]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <create_chain+0xe2>
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d006      	beq.n	8007cba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	6839      	ldr	r1, [r7, #0]
 8007cb0:	6938      	ldr	r0, [r7, #16]
 8007cb2:	f7ff fe40 	bl	8007936 <put_fat>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007cba:	7dfb      	ldrb	r3, [r7, #23]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d116      	bne.n	8007cee <create_chain+0x116>
		fs->last_clst = ncl;
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	69fa      	ldr	r2, [r7, #28]
 8007cc4:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	691a      	ldr	r2, [r3, #16]
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	3b02      	subs	r3, #2
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d804      	bhi.n	8007cde <create_chain+0x106>
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	1e5a      	subs	r2, r3, #1
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	791b      	ldrb	r3, [r3, #4]
 8007ce2:	f043 0301 	orr.w	r3, r3, #1
 8007ce6:	b2da      	uxtb	r2, r3
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	711a      	strb	r2, [r3, #4]
 8007cec:	e007      	b.n	8007cfe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007cee:	7dfb      	ldrb	r3, [r7, #23]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d102      	bne.n	8007cfa <create_chain+0x122>
 8007cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf8:	e000      	b.n	8007cfc <create_chain+0x124>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007cfe:	69fb      	ldr	r3, [r7, #28]
}
 8007d00:	4618      	mov	r0, r3
 8007d02:	3720      	adds	r7, #32
 8007d04:	46bd      	mov	sp, r7
 8007d06:	bd80      	pop	{r7, pc}

08007d08 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b087      	sub	sp, #28
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	0a5b      	lsrs	r3, r3, #9
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	8952      	ldrh	r2, [r2, #10]
 8007d28:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	1d1a      	adds	r2, r3, #4
 8007d32:	613a      	str	r2, [r7, #16]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d101      	bne.n	8007d42 <clmt_clust+0x3a>
 8007d3e:	2300      	movs	r3, #0
 8007d40:	e010      	b.n	8007d64 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007d42:	697a      	ldr	r2, [r7, #20]
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d307      	bcc.n	8007d5a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007d4a:	697a      	ldr	r2, [r7, #20]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	3304      	adds	r3, #4
 8007d56:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007d58:	e7e9      	b.n	8007d2e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007d5a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	4413      	add	r3, r2
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	371c      	adds	r7, #28
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007d86:	d204      	bcs.n	8007d92 <dir_sdi+0x22>
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	f003 031f 	and.w	r3, r3, #31
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <dir_sdi+0x26>
		return FR_INT_ERR;
 8007d92:	2302      	movs	r3, #2
 8007d94:	e063      	b.n	8007e5e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d106      	bne.n	8007db6 <dir_sdi+0x46>
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	781b      	ldrb	r3, [r3, #0]
 8007dac:	2b02      	cmp	r3, #2
 8007dae:	d902      	bls.n	8007db6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10c      	bne.n	8007dd6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	095b      	lsrs	r3, r3, #5
 8007dc0:	693a      	ldr	r2, [r7, #16]
 8007dc2:	8912      	ldrh	r2, [r2, #8]
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d301      	bcc.n	8007dcc <dir_sdi+0x5c>
 8007dc8:	2302      	movs	r3, #2
 8007dca:	e048      	b.n	8007e5e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	61da      	str	r2, [r3, #28]
 8007dd4:	e029      	b.n	8007e2a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	895b      	ldrh	r3, [r3, #10]
 8007dda:	025b      	lsls	r3, r3, #9
 8007ddc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007dde:	e019      	b.n	8007e14 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6979      	ldr	r1, [r7, #20]
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7ff fcfe 	bl	80077e6 <get_fat>
 8007dea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007df2:	d101      	bne.n	8007df8 <dir_sdi+0x88>
 8007df4:	2301      	movs	r3, #1
 8007df6:	e032      	b.n	8007e5e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d904      	bls.n	8007e08 <dir_sdi+0x98>
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d301      	bcc.n	8007e0c <dir_sdi+0x9c>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e028      	b.n	8007e5e <dir_sdi+0xee>
			ofs -= csz;
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	1ad3      	subs	r3, r2, r3
 8007e12:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007e14:	683a      	ldr	r2, [r7, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d2e1      	bcs.n	8007de0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007e1c:	6979      	ldr	r1, [r7, #20]
 8007e1e:	6938      	ldr	r0, [r7, #16]
 8007e20:	f7ff fcc2 	bl	80077a8 <clust2sect>
 8007e24:	4602      	mov	r2, r0
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	697a      	ldr	r2, [r7, #20]
 8007e2e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	69db      	ldr	r3, [r3, #28]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <dir_sdi+0xcc>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	e010      	b.n	8007e5e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	69da      	ldr	r2, [r3, #28]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	0a5b      	lsrs	r3, r3, #9
 8007e44:	441a      	add	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e56:	441a      	add	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}

08007e66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007e66:	b580      	push	{r7, lr}
 8007e68:	b086      	sub	sp, #24
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
 8007e6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	695b      	ldr	r3, [r3, #20]
 8007e7a:	3320      	adds	r3, #32
 8007e7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69db      	ldr	r3, [r3, #28]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <dir_next+0x28>
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e8c:	d301      	bcc.n	8007e92 <dir_next+0x2c>
 8007e8e:	2304      	movs	r3, #4
 8007e90:	e0aa      	b.n	8007fe8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f040 8098 	bne.w	8007fce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	69db      	ldr	r3, [r3, #28]
 8007ea2:	1c5a      	adds	r2, r3, #1
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10b      	bne.n	8007ec8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	095b      	lsrs	r3, r3, #5
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	8912      	ldrh	r2, [r2, #8]
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	f0c0 8088 	bcc.w	8007fce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	61da      	str	r2, [r3, #28]
 8007ec4:	2304      	movs	r3, #4
 8007ec6:	e08f      	b.n	8007fe8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	0a5b      	lsrs	r3, r3, #9
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	8952      	ldrh	r2, [r2, #10]
 8007ed0:	3a01      	subs	r2, #1
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d17a      	bne.n	8007fce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	699b      	ldr	r3, [r3, #24]
 8007ede:	4619      	mov	r1, r3
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	f7ff fc80 	bl	80077e6 <get_fat>
 8007ee6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d801      	bhi.n	8007ef2 <dir_next+0x8c>
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e07a      	b.n	8007fe8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef8:	d101      	bne.n	8007efe <dir_next+0x98>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e074      	b.n	8007fe8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	695b      	ldr	r3, [r3, #20]
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d358      	bcc.n	8007fba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	61da      	str	r2, [r3, #28]
 8007f14:	2304      	movs	r3, #4
 8007f16:	e067      	b.n	8007fe8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007f18:	687a      	ldr	r2, [r7, #4]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	699b      	ldr	r3, [r3, #24]
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4610      	mov	r0, r2
 8007f22:	f7ff fe59 	bl	8007bd8 <create_chain>
 8007f26:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <dir_next+0xcc>
 8007f2e:	2307      	movs	r3, #7
 8007f30:	e05a      	b.n	8007fe8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d101      	bne.n	8007f3c <dir_next+0xd6>
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e055      	b.n	8007fe8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f42:	d101      	bne.n	8007f48 <dir_next+0xe2>
 8007f44:	2301      	movs	r3, #1
 8007f46:	e04f      	b.n	8007fe8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007f48:	68f8      	ldr	r0, [r7, #12]
 8007f4a:	f7ff fb4d 	bl	80075e8 <sync_window>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d001      	beq.n	8007f58 <dir_next+0xf2>
 8007f54:	2301      	movs	r3, #1
 8007f56:	e047      	b.n	8007fe8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	3330      	adds	r3, #48	; 0x30
 8007f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff f977 	bl	8007256 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f68:	2300      	movs	r3, #0
 8007f6a:	613b      	str	r3, [r7, #16]
 8007f6c:	6979      	ldr	r1, [r7, #20]
 8007f6e:	68f8      	ldr	r0, [r7, #12]
 8007f70:	f7ff fc1a 	bl	80077a8 <clust2sect>
 8007f74:	4602      	mov	r2, r0
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f7a:	e012      	b.n	8007fa2 <dir_next+0x13c>
						fs->wflag = 1;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2201      	movs	r2, #1
 8007f80:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f7ff fb30 	bl	80075e8 <sync_window>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <dir_next+0x12c>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e02a      	b.n	8007fe8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3301      	adds	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	62da      	str	r2, [r3, #44]	; 0x2c
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	895b      	ldrh	r3, [r3, #10]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d3e6      	bcc.n	8007f7c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	1ad2      	subs	r2, r2, r3
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007fc0:	6979      	ldr	r1, [r7, #20]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	f7ff fbf0 	bl	80077a8 <clust2sect>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	68ba      	ldr	r2, [r7, #8]
 8007fd2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fe0:	441a      	add	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007fe6:	2300      	movs	r3, #0
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	3718      	adds	r7, #24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	bd80      	pop	{r7, pc}

08007ff0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8008000:	2100      	movs	r1, #0
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7ff feb4 	bl	8007d70 <dir_sdi>
 8008008:	4603      	mov	r3, r0
 800800a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800800c:	7dfb      	ldrb	r3, [r7, #23]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d12b      	bne.n	800806a <dir_alloc+0x7a>
		n = 0;
 8008012:	2300      	movs	r3, #0
 8008014:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	4619      	mov	r1, r3
 800801c:	68f8      	ldr	r0, [r7, #12]
 800801e:	f7ff fb27 	bl	8007670 <move_window>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11d      	bne.n	8008068 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a1b      	ldr	r3, [r3, #32]
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	2be5      	cmp	r3, #229	; 0xe5
 8008034:	d004      	beq.n	8008040 <dir_alloc+0x50>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6a1b      	ldr	r3, [r3, #32]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d107      	bne.n	8008050 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3301      	adds	r3, #1
 8008044:	613b      	str	r3, [r7, #16]
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	429a      	cmp	r2, r3
 800804c:	d102      	bne.n	8008054 <dir_alloc+0x64>
 800804e:	e00c      	b.n	800806a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8008050:	2300      	movs	r3, #0
 8008052:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008054:	2101      	movs	r1, #1
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff ff05 	bl	8007e66 <dir_next>
 800805c:	4603      	mov	r3, r0
 800805e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0d7      	beq.n	8008016 <dir_alloc+0x26>
 8008066:	e000      	b.n	800806a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008068:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800806a:	7dfb      	ldrb	r3, [r7, #23]
 800806c:	2b04      	cmp	r3, #4
 800806e:	d101      	bne.n	8008074 <dir_alloc+0x84>
 8008070:	2307      	movs	r3, #7
 8008072:	75fb      	strb	r3, [r7, #23]
	return res;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}

0800807e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b084      	sub	sp, #16
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	331a      	adds	r3, #26
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff f83f 	bl	8007110 <ld_word>
 8008092:	4603      	mov	r3, r0
 8008094:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b03      	cmp	r3, #3
 800809c:	d109      	bne.n	80080b2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	3314      	adds	r3, #20
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff f834 	bl	8007110 <ld_word>
 80080a8:	4603      	mov	r3, r0
 80080aa:	041b      	lsls	r3, r3, #16
 80080ac:	68fa      	ldr	r2, [r7, #12]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80080b2:	68fb      	ldr	r3, [r7, #12]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3710      	adds	r7, #16
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}

080080bc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	331a      	adds	r3, #26
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	b292      	uxth	r2, r2
 80080d0:	4611      	mov	r1, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff f857 	bl	8007186 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b03      	cmp	r3, #3
 80080de:	d109      	bne.n	80080f4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	f103 0214 	add.w	r2, r3, #20
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	0c1b      	lsrs	r3, r3, #16
 80080ea:	b29b      	uxth	r3, r3
 80080ec:	4619      	mov	r1, r3
 80080ee:	4610      	mov	r0, r2
 80080f0:	f7ff f849 	bl	8007186 <st_word>
	}
}
 80080f4:	bf00      	nop
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b086      	sub	sp, #24
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800810a:	2100      	movs	r1, #0
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f7ff fe2f 	bl	8007d70 <dir_sdi>
 8008112:	4603      	mov	r3, r0
 8008114:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008116:	7dfb      	ldrb	r3, [r7, #23]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d001      	beq.n	8008120 <dir_find+0x24>
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	e03e      	b.n	800819e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	69db      	ldr	r3, [r3, #28]
 8008124:	4619      	mov	r1, r3
 8008126:	6938      	ldr	r0, [r7, #16]
 8008128:	f7ff faa2 	bl	8007670 <move_window>
 800812c:	4603      	mov	r3, r0
 800812e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d12f      	bne.n	8008196 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a1b      	ldr	r3, [r3, #32]
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <dir_find+0x4e>
 8008144:	2304      	movs	r3, #4
 8008146:	75fb      	strb	r3, [r7, #23]
 8008148:	e028      	b.n	800819c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	330b      	adds	r3, #11
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008156:	b2da      	uxtb	r2, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a1b      	ldr	r3, [r3, #32]
 8008160:	330b      	adds	r3, #11
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10a      	bne.n	8008182 <dir_find+0x86>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6a18      	ldr	r0, [r3, #32]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	3324      	adds	r3, #36	; 0x24
 8008174:	220b      	movs	r2, #11
 8008176:	4619      	mov	r1, r3
 8008178:	f7ff f888 	bl	800728c <mem_cmp>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00b      	beq.n	800819a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008182:	2100      	movs	r1, #0
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7ff fe6e 	bl	8007e66 <dir_next>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800818e:	7dfb      	ldrb	r3, [r7, #23]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0c5      	beq.n	8008120 <dir_find+0x24>
 8008194:	e002      	b.n	800819c <dir_find+0xa0>
		if (res != FR_OK) break;
 8008196:	bf00      	nop
 8008198:	e000      	b.n	800819c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800819a:	bf00      	nop

	return res;
 800819c:	7dfb      	ldrb	r3, [r7, #23]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b084      	sub	sp, #16
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80081b4:	2101      	movs	r1, #1
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff ff1a 	bl	8007ff0 <dir_alloc>
 80081bc:	4603      	mov	r3, r0
 80081be:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d11c      	bne.n	8008200 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	4619      	mov	r1, r3
 80081cc:	68b8      	ldr	r0, [r7, #8]
 80081ce:	f7ff fa4f 	bl	8007670 <move_window>
 80081d2:	4603      	mov	r3, r0
 80081d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80081d6:	7bfb      	ldrb	r3, [r7, #15]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d111      	bne.n	8008200 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a1b      	ldr	r3, [r3, #32]
 80081e0:	2220      	movs	r2, #32
 80081e2:	2100      	movs	r1, #0
 80081e4:	4618      	mov	r0, r3
 80081e6:	f7ff f836 	bl	8007256 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a18      	ldr	r0, [r3, #32]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	3324      	adds	r3, #36	; 0x24
 80081f2:	220b      	movs	r2, #11
 80081f4:	4619      	mov	r1, r3
 80081f6:	f7ff f80d 	bl	8007214 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2201      	movs	r2, #1
 80081fe:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008200:	7bfb      	ldrb	r3, [r7, #15]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3710      	adds	r7, #16
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b088      	sub	sp, #32
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	3324      	adds	r3, #36	; 0x24
 8008220:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008222:	220b      	movs	r2, #11
 8008224:	2120      	movs	r1, #32
 8008226:	68b8      	ldr	r0, [r7, #8]
 8008228:	f7ff f815 	bl	8007256 <mem_set>
	si = i = 0; ni = 8;
 800822c:	2300      	movs	r3, #0
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	61fb      	str	r3, [r7, #28]
 8008234:	2308      	movs	r3, #8
 8008236:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8008238:	69fb      	ldr	r3, [r7, #28]
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	61fa      	str	r2, [r7, #28]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	4413      	add	r3, r2
 8008242:	781b      	ldrb	r3, [r3, #0]
 8008244:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8008246:	7efb      	ldrb	r3, [r7, #27]
 8008248:	2b20      	cmp	r3, #32
 800824a:	d94e      	bls.n	80082ea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800824c:	7efb      	ldrb	r3, [r7, #27]
 800824e:	2b2f      	cmp	r3, #47	; 0x2f
 8008250:	d006      	beq.n	8008260 <create_name+0x54>
 8008252:	7efb      	ldrb	r3, [r7, #27]
 8008254:	2b5c      	cmp	r3, #92	; 0x5c
 8008256:	d110      	bne.n	800827a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008258:	e002      	b.n	8008260 <create_name+0x54>
 800825a:	69fb      	ldr	r3, [r7, #28]
 800825c:	3301      	adds	r3, #1
 800825e:	61fb      	str	r3, [r7, #28]
 8008260:	68fa      	ldr	r2, [r7, #12]
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	4413      	add	r3, r2
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	2b2f      	cmp	r3, #47	; 0x2f
 800826a:	d0f6      	beq.n	800825a <create_name+0x4e>
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	781b      	ldrb	r3, [r3, #0]
 8008274:	2b5c      	cmp	r3, #92	; 0x5c
 8008276:	d0f0      	beq.n	800825a <create_name+0x4e>
			break;
 8008278:	e038      	b.n	80082ec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800827a:	7efb      	ldrb	r3, [r7, #27]
 800827c:	2b2e      	cmp	r3, #46	; 0x2e
 800827e:	d003      	beq.n	8008288 <create_name+0x7c>
 8008280:	693a      	ldr	r2, [r7, #16]
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	429a      	cmp	r2, r3
 8008286:	d30c      	bcc.n	80082a2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	2b0b      	cmp	r3, #11
 800828c:	d002      	beq.n	8008294 <create_name+0x88>
 800828e:	7efb      	ldrb	r3, [r7, #27]
 8008290:	2b2e      	cmp	r3, #46	; 0x2e
 8008292:	d001      	beq.n	8008298 <create_name+0x8c>
 8008294:	2306      	movs	r3, #6
 8008296:	e044      	b.n	8008322 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8008298:	2308      	movs	r3, #8
 800829a:	613b      	str	r3, [r7, #16]
 800829c:	230b      	movs	r3, #11
 800829e:	617b      	str	r3, [r7, #20]
			continue;
 80082a0:	e022      	b.n	80082e8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80082a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	da04      	bge.n	80082b4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80082aa:	7efb      	ldrb	r3, [r7, #27]
 80082ac:	3b80      	subs	r3, #128	; 0x80
 80082ae:	4a1f      	ldr	r2, [pc, #124]	; (800832c <create_name+0x120>)
 80082b0:	5cd3      	ldrb	r3, [r2, r3]
 80082b2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80082b4:	7efb      	ldrb	r3, [r7, #27]
 80082b6:	4619      	mov	r1, r3
 80082b8:	481d      	ldr	r0, [pc, #116]	; (8008330 <create_name+0x124>)
 80082ba:	f7ff f80e 	bl	80072da <chk_chr>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <create_name+0xbc>
 80082c4:	2306      	movs	r3, #6
 80082c6:	e02c      	b.n	8008322 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80082c8:	7efb      	ldrb	r3, [r7, #27]
 80082ca:	2b60      	cmp	r3, #96	; 0x60
 80082cc:	d905      	bls.n	80082da <create_name+0xce>
 80082ce:	7efb      	ldrb	r3, [r7, #27]
 80082d0:	2b7a      	cmp	r3, #122	; 0x7a
 80082d2:	d802      	bhi.n	80082da <create_name+0xce>
 80082d4:	7efb      	ldrb	r3, [r7, #27]
 80082d6:	3b20      	subs	r3, #32
 80082d8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	613a      	str	r2, [r7, #16]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	4413      	add	r3, r2
 80082e4:	7efa      	ldrb	r2, [r7, #27]
 80082e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80082e8:	e7a6      	b.n	8008238 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80082ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80082ec:	68fa      	ldr	r2, [r7, #12]
 80082ee:	69fb      	ldr	r3, [r7, #28]
 80082f0:	441a      	add	r2, r3
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <create_name+0xf4>
 80082fc:	2306      	movs	r3, #6
 80082fe:	e010      	b.n	8008322 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2be5      	cmp	r3, #229	; 0xe5
 8008306:	d102      	bne.n	800830e <create_name+0x102>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2205      	movs	r2, #5
 800830c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800830e:	7efb      	ldrb	r3, [r7, #27]
 8008310:	2b20      	cmp	r3, #32
 8008312:	d801      	bhi.n	8008318 <create_name+0x10c>
 8008314:	2204      	movs	r2, #4
 8008316:	e000      	b.n	800831a <create_name+0x10e>
 8008318:	2200      	movs	r2, #0
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	330b      	adds	r3, #11
 800831e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008320:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008322:	4618      	mov	r0, r3
 8008324:	3720      	adds	r7, #32
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	0800eac4 	.word	0x0800eac4
 8008330:	0800ea54 	.word	0x0800ea54

08008334 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008348:	e002      	b.n	8008350 <follow_path+0x1c>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	3301      	adds	r3, #1
 800834e:	603b      	str	r3, [r7, #0]
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b2f      	cmp	r3, #47	; 0x2f
 8008356:	d0f8      	beq.n	800834a <follow_path+0x16>
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b5c      	cmp	r3, #92	; 0x5c
 800835e:	d0f4      	beq.n	800834a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	2200      	movs	r2, #0
 8008364:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b1f      	cmp	r3, #31
 800836c:	d80a      	bhi.n	8008384 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2280      	movs	r2, #128	; 0x80
 8008372:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8008376:	2100      	movs	r1, #0
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7ff fcf9 	bl	8007d70 <dir_sdi>
 800837e:	4603      	mov	r3, r0
 8008380:	75fb      	strb	r3, [r7, #23]
 8008382:	e043      	b.n	800840c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008384:	463b      	mov	r3, r7
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff ff3f 	bl	800820c <create_name>
 800838e:	4603      	mov	r3, r0
 8008390:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d134      	bne.n	8008402 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7ff feaf 	bl	80080fc <dir_find>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80083a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d00a      	beq.n	80083c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80083b0:	7dfb      	ldrb	r3, [r7, #23]
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d127      	bne.n	8008406 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80083b6:	7afb      	ldrb	r3, [r7, #11]
 80083b8:	f003 0304 	and.w	r3, r3, #4
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d122      	bne.n	8008406 <follow_path+0xd2>
 80083c0:	2305      	movs	r3, #5
 80083c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80083c4:	e01f      	b.n	8008406 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80083c6:	7afb      	ldrb	r3, [r7, #11]
 80083c8:	f003 0304 	and.w	r3, r3, #4
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d11c      	bne.n	800840a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	799b      	ldrb	r3, [r3, #6]
 80083d4:	f003 0310 	and.w	r3, r3, #16
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80083dc:	2305      	movs	r3, #5
 80083de:	75fb      	strb	r3, [r7, #23]
 80083e0:	e014      	b.n	800840c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	695b      	ldr	r3, [r3, #20]
 80083ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083f0:	4413      	add	r3, r2
 80083f2:	4619      	mov	r1, r3
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f7ff fe42 	bl	800807e <ld_clust>
 80083fa:	4602      	mov	r2, r0
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008400:	e7c0      	b.n	8008384 <follow_path+0x50>
			if (res != FR_OK) break;
 8008402:	bf00      	nop
 8008404:	e002      	b.n	800840c <follow_path+0xd8>
				break;
 8008406:	bf00      	nop
 8008408:	e000      	b.n	800840c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800840a:	bf00      	nop
			}
		}
	}

	return res;
 800840c:	7dfb      	ldrb	r3, [r7, #23]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008416:	b480      	push	{r7}
 8008418:	b087      	sub	sp, #28
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800841e:	f04f 33ff 	mov.w	r3, #4294967295
 8008422:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d031      	beq.n	8008490 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	617b      	str	r3, [r7, #20]
 8008432:	e002      	b.n	800843a <get_ldnumber+0x24>
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	3301      	adds	r3, #1
 8008438:	617b      	str	r3, [r7, #20]
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b20      	cmp	r3, #32
 8008440:	d903      	bls.n	800844a <get_ldnumber+0x34>
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	2b3a      	cmp	r3, #58	; 0x3a
 8008448:	d1f4      	bne.n	8008434 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b3a      	cmp	r3, #58	; 0x3a
 8008450:	d11c      	bne.n	800848c <get_ldnumber+0x76>
			tp = *path;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	1c5a      	adds	r2, r3, #1
 800845c:	60fa      	str	r2, [r7, #12]
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	3b30      	subs	r3, #48	; 0x30
 8008462:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	2b09      	cmp	r3, #9
 8008468:	d80e      	bhi.n	8008488 <get_ldnumber+0x72>
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	697b      	ldr	r3, [r7, #20]
 800846e:	429a      	cmp	r2, r3
 8008470:	d10a      	bne.n	8008488 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d107      	bne.n	8008488 <get_ldnumber+0x72>
					vol = (int)i;
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	3301      	adds	r3, #1
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	697a      	ldr	r2, [r7, #20]
 8008486:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	e002      	b.n	8008492 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800848c:	2300      	movs	r3, #0
 800848e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008490:	693b      	ldr	r3, [r7, #16]
}
 8008492:	4618      	mov	r0, r3
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
	...

080084a0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2200      	movs	r2, #0
 80084ae:	70da      	strb	r2, [r3, #3]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f04f 32ff 	mov.w	r2, #4294967295
 80084b6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7ff f8d8 	bl	8007670 <move_window>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d001      	beq.n	80084ca <check_fs+0x2a>
 80084c6:	2304      	movs	r3, #4
 80084c8:	e038      	b.n	800853c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	3330      	adds	r3, #48	; 0x30
 80084ce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80084d2:	4618      	mov	r0, r3
 80084d4:	f7fe fe1c 	bl	8007110 <ld_word>
 80084d8:	4603      	mov	r3, r0
 80084da:	461a      	mov	r2, r3
 80084dc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d001      	beq.n	80084e8 <check_fs+0x48>
 80084e4:	2303      	movs	r3, #3
 80084e6:	e029      	b.n	800853c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084ee:	2be9      	cmp	r3, #233	; 0xe9
 80084f0:	d009      	beq.n	8008506 <check_fs+0x66>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80084f8:	2beb      	cmp	r3, #235	; 0xeb
 80084fa:	d11e      	bne.n	800853a <check_fs+0x9a>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008502:	2b90      	cmp	r3, #144	; 0x90
 8008504:	d119      	bne.n	800853a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3330      	adds	r3, #48	; 0x30
 800850a:	3336      	adds	r3, #54	; 0x36
 800850c:	4618      	mov	r0, r3
 800850e:	f7fe fe17 	bl	8007140 <ld_dword>
 8008512:	4603      	mov	r3, r0
 8008514:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008518:	4a0a      	ldr	r2, [pc, #40]	; (8008544 <check_fs+0xa4>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d101      	bne.n	8008522 <check_fs+0x82>
 800851e:	2300      	movs	r3, #0
 8008520:	e00c      	b.n	800853c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3330      	adds	r3, #48	; 0x30
 8008526:	3352      	adds	r3, #82	; 0x52
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe fe09 	bl	8007140 <ld_dword>
 800852e:	4603      	mov	r3, r0
 8008530:	4a05      	ldr	r2, [pc, #20]	; (8008548 <check_fs+0xa8>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d101      	bne.n	800853a <check_fs+0x9a>
 8008536:	2300      	movs	r3, #0
 8008538:	e000      	b.n	800853c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800853a:	2302      	movs	r3, #2
}
 800853c:	4618      	mov	r0, r3
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	00544146 	.word	0x00544146
 8008548:	33544146 	.word	0x33544146

0800854c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b096      	sub	sp, #88	; 0x58
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7ff ff58 	bl	8008416 <get_ldnumber>
 8008566:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8008568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800856a:	2b00      	cmp	r3, #0
 800856c:	da01      	bge.n	8008572 <find_volume+0x26>
 800856e:	230b      	movs	r3, #11
 8008570:	e22d      	b.n	80089ce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008572:	4aa1      	ldr	r2, [pc, #644]	; (80087f8 <find_volume+0x2ac>)
 8008574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800857a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800857c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <find_volume+0x3a>
 8008582:	230c      	movs	r3, #12
 8008584:	e223      	b.n	80089ce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800858a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800858c:	79fb      	ldrb	r3, [r7, #7]
 800858e:	f023 0301 	bic.w	r3, r3, #1
 8008592:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d01a      	beq.n	80085d2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800859c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800859e:	785b      	ldrb	r3, [r3, #1]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f7fe fd17 	bl	8006fd4 <disk_status>
 80085a6:	4603      	mov	r3, r0
 80085a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80085ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10c      	bne.n	80085d2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80085b8:	79fb      	ldrb	r3, [r7, #7]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d007      	beq.n	80085ce <find_volume+0x82>
 80085be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80085ca:	230a      	movs	r3, #10
 80085cc:	e1ff      	b.n	80089ce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80085ce:	2300      	movs	r3, #0
 80085d0:	e1fd      	b.n	80089ce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80085d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80085d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085de:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80085e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e2:	785b      	ldrb	r3, [r3, #1]
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fe fd0f 	bl	8007008 <disk_initialize>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80085f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d001      	beq.n	8008600 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80085fc:	2303      	movs	r3, #3
 80085fe:	e1e6      	b.n	80089ce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d007      	beq.n	8008616 <find_volume+0xca>
 8008606:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b00      	cmp	r3, #0
 8008610:	d001      	beq.n	8008616 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008612:	230a      	movs	r3, #10
 8008614:	e1db      	b.n	80089ce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800861a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800861c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800861e:	f7ff ff3f 	bl	80084a0 <check_fs>
 8008622:	4603      	mov	r3, r0
 8008624:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008628:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800862c:	2b02      	cmp	r3, #2
 800862e:	d149      	bne.n	80086c4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008630:	2300      	movs	r3, #0
 8008632:	643b      	str	r3, [r7, #64]	; 0x40
 8008634:	e01e      	b.n	8008674 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8008636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008638:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800863c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800863e:	011b      	lsls	r3, r3, #4
 8008640:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008644:	4413      	add	r3, r2
 8008646:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864a:	3304      	adds	r3, #4
 800864c:	781b      	ldrb	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d006      	beq.n	8008660 <find_volume+0x114>
 8008652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008654:	3308      	adds	r3, #8
 8008656:	4618      	mov	r0, r3
 8008658:	f7fe fd72 	bl	8007140 <ld_dword>
 800865c:	4602      	mov	r2, r0
 800865e:	e000      	b.n	8008662 <find_volume+0x116>
 8008660:	2200      	movs	r2, #0
 8008662:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	3358      	adds	r3, #88	; 0x58
 8008668:	443b      	add	r3, r7
 800866a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800866e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008670:	3301      	adds	r3, #1
 8008672:	643b      	str	r3, [r7, #64]	; 0x40
 8008674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008676:	2b03      	cmp	r3, #3
 8008678:	d9dd      	bls.n	8008636 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800867a:	2300      	movs	r3, #0
 800867c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800867e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <find_volume+0x13e>
 8008684:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008686:	3b01      	subs	r3, #1
 8008688:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800868a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	3358      	adds	r3, #88	; 0x58
 8008690:	443b      	add	r3, r7
 8008692:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8008696:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8008698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800869a:	2b00      	cmp	r3, #0
 800869c:	d005      	beq.n	80086aa <find_volume+0x15e>
 800869e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80086a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80086a2:	f7ff fefd 	bl	80084a0 <check_fs>
 80086a6:	4603      	mov	r3, r0
 80086a8:	e000      	b.n	80086ac <find_volume+0x160>
 80086aa:	2303      	movs	r3, #3
 80086ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80086b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d905      	bls.n	80086c4 <find_volume+0x178>
 80086b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086ba:	3301      	adds	r3, #1
 80086bc:	643b      	str	r3, [r7, #64]	; 0x40
 80086be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086c0:	2b03      	cmp	r3, #3
 80086c2:	d9e2      	bls.n	800868a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80086c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	d101      	bne.n	80086d0 <find_volume+0x184>
 80086cc:	2301      	movs	r3, #1
 80086ce:	e17e      	b.n	80089ce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80086d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d901      	bls.n	80086dc <find_volume+0x190>
 80086d8:	230d      	movs	r3, #13
 80086da:	e178      	b.n	80089ce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80086dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086de:	3330      	adds	r3, #48	; 0x30
 80086e0:	330b      	adds	r3, #11
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fe fd14 	bl	8007110 <ld_word>
 80086e8:	4603      	mov	r3, r0
 80086ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ee:	d001      	beq.n	80086f4 <find_volume+0x1a8>
 80086f0:	230d      	movs	r3, #13
 80086f2:	e16c      	b.n	80089ce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	3330      	adds	r3, #48	; 0x30
 80086f8:	3316      	adds	r3, #22
 80086fa:	4618      	mov	r0, r3
 80086fc:	f7fe fd08 	bl	8007110 <ld_word>
 8008700:	4603      	mov	r3, r0
 8008702:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008704:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d106      	bne.n	8008718 <find_volume+0x1cc>
 800870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800870c:	3330      	adds	r3, #48	; 0x30
 800870e:	3324      	adds	r3, #36	; 0x24
 8008710:	4618      	mov	r0, r3
 8008712:	f7fe fd15 	bl	8007140 <ld_dword>
 8008716:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800871c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800871e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008720:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8008724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008726:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	789b      	ldrb	r3, [r3, #2]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d005      	beq.n	800873c <find_volume+0x1f0>
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	789b      	ldrb	r3, [r3, #2]
 8008734:	2b02      	cmp	r3, #2
 8008736:	d001      	beq.n	800873c <find_volume+0x1f0>
 8008738:	230d      	movs	r3, #13
 800873a:	e148      	b.n	80089ce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800873c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873e:	789b      	ldrb	r3, [r3, #2]
 8008740:	461a      	mov	r2, r3
 8008742:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008744:	fb02 f303 	mul.w	r3, r2, r3
 8008748:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008750:	b29a      	uxth	r2, r3
 8008752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008754:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	895b      	ldrh	r3, [r3, #10]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <find_volume+0x224>
 800875e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008760:	895b      	ldrh	r3, [r3, #10]
 8008762:	461a      	mov	r2, r3
 8008764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008766:	895b      	ldrh	r3, [r3, #10]
 8008768:	3b01      	subs	r3, #1
 800876a:	4013      	ands	r3, r2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <find_volume+0x228>
 8008770:	230d      	movs	r3, #13
 8008772:	e12c      	b.n	80089ce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	3330      	adds	r3, #48	; 0x30
 8008778:	3311      	adds	r3, #17
 800877a:	4618      	mov	r0, r3
 800877c:	f7fe fcc8 	bl	8007110 <ld_word>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008786:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878a:	891b      	ldrh	r3, [r3, #8]
 800878c:	f003 030f 	and.w	r3, r3, #15
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d001      	beq.n	800879a <find_volume+0x24e>
 8008796:	230d      	movs	r3, #13
 8008798:	e119      	b.n	80089ce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800879a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800879c:	3330      	adds	r3, #48	; 0x30
 800879e:	3313      	adds	r3, #19
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fe fcb5 	bl	8007110 <ld_word>
 80087a6:	4603      	mov	r3, r0
 80087a8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80087aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d106      	bne.n	80087be <find_volume+0x272>
 80087b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087b2:	3330      	adds	r3, #48	; 0x30
 80087b4:	3320      	adds	r3, #32
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7fe fcc2 	bl	8007140 <ld_dword>
 80087bc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80087be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c0:	3330      	adds	r3, #48	; 0x30
 80087c2:	330e      	adds	r3, #14
 80087c4:	4618      	mov	r0, r3
 80087c6:	f7fe fca3 	bl	8007110 <ld_word>
 80087ca:	4603      	mov	r3, r0
 80087cc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80087ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <find_volume+0x28c>
 80087d4:	230d      	movs	r3, #13
 80087d6:	e0fa      	b.n	80089ce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80087d8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80087da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087dc:	4413      	add	r3, r2
 80087de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80087e0:	8912      	ldrh	r2, [r2, #8]
 80087e2:	0912      	lsrs	r2, r2, #4
 80087e4:	b292      	uxth	r2, r2
 80087e6:	4413      	add	r3, r2
 80087e8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80087ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d204      	bcs.n	80087fc <find_volume+0x2b0>
 80087f2:	230d      	movs	r3, #13
 80087f4:	e0eb      	b.n	80089ce <find_volume+0x482>
 80087f6:	bf00      	nop
 80087f8:	20001308 	.word	0x20001308
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80087fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008800:	1ad3      	subs	r3, r2, r3
 8008802:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008804:	8952      	ldrh	r2, [r2, #10]
 8008806:	fbb3 f3f2 	udiv	r3, r3, r2
 800880a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	2b00      	cmp	r3, #0
 8008810:	d101      	bne.n	8008816 <find_volume+0x2ca>
 8008812:	230d      	movs	r3, #13
 8008814:	e0db      	b.n	80089ce <find_volume+0x482>
		fmt = FS_FAT32;
 8008816:	2303      	movs	r3, #3
 8008818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008822:	4293      	cmp	r3, r2
 8008824:	d802      	bhi.n	800882c <find_volume+0x2e0>
 8008826:	2302      	movs	r3, #2
 8008828:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008832:	4293      	cmp	r3, r2
 8008834:	d802      	bhi.n	800883c <find_volume+0x2f0>
 8008836:	2301      	movs	r3, #1
 8008838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	1c9a      	adds	r2, r3, #2
 8008840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008842:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8008844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008848:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800884a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800884c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800884e:	441a      	add	r2, r3
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8008854:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008858:	441a      	add	r2, r3
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800885e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008862:	2b03      	cmp	r3, #3
 8008864:	d11e      	bne.n	80088a4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008868:	3330      	adds	r3, #48	; 0x30
 800886a:	332a      	adds	r3, #42	; 0x2a
 800886c:	4618      	mov	r0, r3
 800886e:	f7fe fc4f 	bl	8007110 <ld_word>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d001      	beq.n	800887c <find_volume+0x330>
 8008878:	230d      	movs	r3, #13
 800887a:	e0a8      	b.n	80089ce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800887c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800887e:	891b      	ldrh	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <find_volume+0x33c>
 8008884:	230d      	movs	r3, #13
 8008886:	e0a2      	b.n	80089ce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888a:	3330      	adds	r3, #48	; 0x30
 800888c:	332c      	adds	r3, #44	; 0x2c
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fc56 	bl	8007140 <ld_dword>
 8008894:	4602      	mov	r2, r0
 8008896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008898:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800889a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800889c:	695b      	ldr	r3, [r3, #20]
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	647b      	str	r3, [r7, #68]	; 0x44
 80088a2:	e01f      	b.n	80088e4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80088a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a6:	891b      	ldrh	r3, [r3, #8]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d101      	bne.n	80088b0 <find_volume+0x364>
 80088ac:	230d      	movs	r3, #13
 80088ae:	e08e      	b.n	80089ce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80088b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b2:	6a1a      	ldr	r2, [r3, #32]
 80088b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088b6:	441a      	add	r2, r3
 80088b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ba:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80088bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d103      	bne.n	80088cc <find_volume+0x380>
 80088c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088c6:	695b      	ldr	r3, [r3, #20]
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	e00a      	b.n	80088e2 <find_volume+0x396>
 80088cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ce:	695a      	ldr	r2, [r3, #20]
 80088d0:	4613      	mov	r3, r2
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	4413      	add	r3, r2
 80088d6:	085a      	lsrs	r2, r3, #1
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	f003 0301 	and.w	r3, r3, #1
 80088e0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80088e2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80088e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088e6:	699a      	ldr	r2, [r3, #24]
 80088e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ea:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80088ee:	0a5b      	lsrs	r3, r3, #9
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d201      	bcs.n	80088f8 <find_volume+0x3ac>
 80088f4:	230d      	movs	r3, #13
 80088f6:	e06a      	b.n	80089ce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80088f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088fa:	f04f 32ff 	mov.w	r2, #4294967295
 80088fe:	611a      	str	r2, [r3, #16]
 8008900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008902:	691a      	ldr	r2, [r3, #16]
 8008904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008906:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	2280      	movs	r2, #128	; 0x80
 800890c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800890e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008912:	2b03      	cmp	r3, #3
 8008914:	d149      	bne.n	80089aa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008918:	3330      	adds	r3, #48	; 0x30
 800891a:	3330      	adds	r3, #48	; 0x30
 800891c:	4618      	mov	r0, r3
 800891e:	f7fe fbf7 	bl	8007110 <ld_word>
 8008922:	4603      	mov	r3, r0
 8008924:	2b01      	cmp	r3, #1
 8008926:	d140      	bne.n	80089aa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800892a:	3301      	adds	r3, #1
 800892c:	4619      	mov	r1, r3
 800892e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008930:	f7fe fe9e 	bl	8007670 <move_window>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d137      	bne.n	80089aa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800893a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893c:	2200      	movs	r2, #0
 800893e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008942:	3330      	adds	r3, #48	; 0x30
 8008944:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008948:	4618      	mov	r0, r3
 800894a:	f7fe fbe1 	bl	8007110 <ld_word>
 800894e:	4603      	mov	r3, r0
 8008950:	461a      	mov	r2, r3
 8008952:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008956:	429a      	cmp	r2, r3
 8008958:	d127      	bne.n	80089aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800895c:	3330      	adds	r3, #48	; 0x30
 800895e:	4618      	mov	r0, r3
 8008960:	f7fe fbee 	bl	8007140 <ld_dword>
 8008964:	4603      	mov	r3, r0
 8008966:	4a1c      	ldr	r2, [pc, #112]	; (80089d8 <find_volume+0x48c>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d11e      	bne.n	80089aa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800896c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896e:	3330      	adds	r3, #48	; 0x30
 8008970:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008974:	4618      	mov	r0, r3
 8008976:	f7fe fbe3 	bl	8007140 <ld_dword>
 800897a:	4603      	mov	r3, r0
 800897c:	4a17      	ldr	r2, [pc, #92]	; (80089dc <find_volume+0x490>)
 800897e:	4293      	cmp	r3, r2
 8008980:	d113      	bne.n	80089aa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008984:	3330      	adds	r3, #48	; 0x30
 8008986:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800898a:	4618      	mov	r0, r3
 800898c:	f7fe fbd8 	bl	8007140 <ld_dword>
 8008990:	4602      	mov	r2, r0
 8008992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008994:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008998:	3330      	adds	r3, #48	; 0x30
 800899a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe fbce 	bl	8007140 <ld_dword>
 80089a4:	4602      	mov	r2, r0
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80089aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089ac:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80089b0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <find_volume+0x494>)
 80089b4:	881b      	ldrh	r3, [r3, #0]
 80089b6:	3301      	adds	r3, #1
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <find_volume+0x494>)
 80089bc:	801a      	strh	r2, [r3, #0]
 80089be:	4b08      	ldr	r3, [pc, #32]	; (80089e0 <find_volume+0x494>)
 80089c0:	881a      	ldrh	r2, [r3, #0]
 80089c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80089c6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80089c8:	f7fe fdea 	bl	80075a0 <clear_lock>
#endif
	return FR_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3758      	adds	r7, #88	; 0x58
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	41615252 	.word	0x41615252
 80089dc:	61417272 	.word	0x61417272
 80089e0:	2000130c 	.word	0x2000130c

080089e4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80089ee:	2309      	movs	r3, #9
 80089f0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01c      	beq.n	8008a32 <validate+0x4e>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d018      	beq.n	8008a32 <validate+0x4e>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	781b      	ldrb	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d013      	beq.n	8008a32 <validate+0x4e>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	889a      	ldrh	r2, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	88db      	ldrh	r3, [r3, #6]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d10c      	bne.n	8008a32 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	785b      	ldrb	r3, [r3, #1]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe fad8 	bl	8006fd4 <disk_status>
 8008a24:	4603      	mov	r3, r0
 8008a26:	f003 0301 	and.w	r3, r3, #1
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <validate+0x4e>
			res = FR_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008a32:	7bfb      	ldrb	r3, [r7, #15]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <validate+0x5a>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	e000      	b.n	8008a40 <validate+0x5c>
 8008a3e:	2300      	movs	r3, #0
 8008a40:	683a      	ldr	r2, [r7, #0]
 8008a42:	6013      	str	r3, [r2, #0]
	return res;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
	...

08008a50 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b088      	sub	sp, #32
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008a62:	f107 0310 	add.w	r3, r7, #16
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7ff fcd5 	bl	8008416 <get_ldnumber>
 8008a6c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	da01      	bge.n	8008a78 <f_mount+0x28>
 8008a74:	230b      	movs	r3, #11
 8008a76:	e02b      	b.n	8008ad0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008a78:	4a17      	ldr	r2, [pc, #92]	; (8008ad8 <f_mount+0x88>)
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a80:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d005      	beq.n	8008a94 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008a88:	69b8      	ldr	r0, [r7, #24]
 8008a8a:	f7fe fd89 	bl	80075a0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	2200      	movs	r2, #0
 8008a92:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	490d      	ldr	r1, [pc, #52]	; (8008ad8 <f_mount+0x88>)
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d002      	beq.n	8008ab6 <f_mount+0x66>
 8008ab0:	79fb      	ldrb	r3, [r7, #7]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d001      	beq.n	8008aba <f_mount+0x6a>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e00a      	b.n	8008ad0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008aba:	f107 010c 	add.w	r1, r7, #12
 8008abe:	f107 0308 	add.w	r3, r7, #8
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f7ff fd41 	bl	800854c <find_volume>
 8008aca:	4603      	mov	r3, r0
 8008acc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008ace:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3720      	adds	r7, #32
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	20001308 	.word	0x20001308

08008adc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b098      	sub	sp, #96	; 0x60
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	4613      	mov	r3, r2
 8008ae8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <f_open+0x18>
 8008af0:	2309      	movs	r3, #9
 8008af2:	e1ad      	b.n	8008e50 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008af4:	79fb      	ldrb	r3, [r7, #7]
 8008af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008afa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008afc:	79fa      	ldrb	r2, [r7, #7]
 8008afe:	f107 0110 	add.w	r1, r7, #16
 8008b02:	f107 0308 	add.w	r3, r7, #8
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7ff fd20 	bl	800854c <find_volume>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008b12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f040 8191 	bne.w	8008e3e <f_open+0x362>
		dj.obj.fs = fs;
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008b20:	68ba      	ldr	r2, [r7, #8]
 8008b22:	f107 0314 	add.w	r3, r7, #20
 8008b26:	4611      	mov	r1, r2
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7ff fc03 	bl	8008334 <follow_path>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d11a      	bne.n	8008b72 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008b3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008b40:	b25b      	sxtb	r3, r3
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	da03      	bge.n	8008b4e <f_open+0x72>
				res = FR_INVALID_NAME;
 8008b46:	2306      	movs	r3, #6
 8008b48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b4c:	e011      	b.n	8008b72 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	f023 0301 	bic.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf14      	ite	ne
 8008b58:	2301      	movne	r3, #1
 8008b5a:	2300      	moveq	r3, #0
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	461a      	mov	r2, r3
 8008b60:	f107 0314 	add.w	r3, r7, #20
 8008b64:	4611      	mov	r1, r2
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7fe fbd2 	bl	8007310 <chk_lock>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	f003 031c 	and.w	r3, r3, #28
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d07f      	beq.n	8008c7c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d017      	beq.n	8008bb4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b88:	2b04      	cmp	r3, #4
 8008b8a:	d10e      	bne.n	8008baa <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008b8c:	f7fe fc1c 	bl	80073c8 <enq_lock>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d006      	beq.n	8008ba4 <f_open+0xc8>
 8008b96:	f107 0314 	add.w	r3, r7, #20
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fb03 	bl	80081a6 <dir_register>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	e000      	b.n	8008ba6 <f_open+0xca>
 8008ba4:	2312      	movs	r3, #18
 8008ba6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008baa:	79fb      	ldrb	r3, [r7, #7]
 8008bac:	f043 0308 	orr.w	r3, r3, #8
 8008bb0:	71fb      	strb	r3, [r7, #7]
 8008bb2:	e010      	b.n	8008bd6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008bb4:	7ebb      	ldrb	r3, [r7, #26]
 8008bb6:	f003 0311 	and.w	r3, r3, #17
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <f_open+0xea>
					res = FR_DENIED;
 8008bbe:	2307      	movs	r3, #7
 8008bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008bc4:	e007      	b.n	8008bd6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008bc6:	79fb      	ldrb	r3, [r7, #7]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d002      	beq.n	8008bd6 <f_open+0xfa>
 8008bd0:	2308      	movs	r3, #8
 8008bd2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008bd6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d168      	bne.n	8008cb0 <f_open+0x1d4>
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d063      	beq.n	8008cb0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008be8:	f7fd fcb8 	bl	800655c <get_fattime>
 8008bec:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf0:	330e      	adds	r3, #14
 8008bf2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe fae1 	bl	80071bc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bfc:	3316      	adds	r3, #22
 8008bfe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe fadb 	bl	80071bc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c08:	330b      	adds	r3, #11
 8008c0a:	2220      	movs	r2, #32
 8008c0c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c12:	4611      	mov	r1, r2
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7ff fa32 	bl	800807e <ld_clust>
 8008c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008c20:	2200      	movs	r2, #0
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff fa4a 	bl	80080bc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008c28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c2a:	331c      	adds	r3, #28
 8008c2c:	2100      	movs	r1, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fac4 	bl	80071bc <st_dword>
					fs->wflag = 1;
 8008c34:	693b      	ldr	r3, [r7, #16]
 8008c36:	2201      	movs	r2, #1
 8008c38:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d037      	beq.n	8008cb0 <f_open+0x1d4>
						dw = fs->winsect;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008c46:	f107 0314 	add.w	r3, r7, #20
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7fe ff5d 	bl	8007b0e <remove_chain>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008c5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d126      	bne.n	8008cb0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008c62:	693b      	ldr	r3, [r7, #16]
 8008c64:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fd02 	bl	8007670 <move_window>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c76:	3a01      	subs	r2, #1
 8008c78:	60da      	str	r2, [r3, #12]
 8008c7a:	e019      	b.n	8008cb0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d115      	bne.n	8008cb0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008c84:	7ebb      	ldrb	r3, [r7, #26]
 8008c86:	f003 0310 	and.w	r3, r3, #16
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <f_open+0x1ba>
					res = FR_NO_FILE;
 8008c8e:	2304      	movs	r3, #4
 8008c90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008c94:	e00c      	b.n	8008cb0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008c96:	79fb      	ldrb	r3, [r7, #7]
 8008c98:	f003 0302 	and.w	r3, r3, #2
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d007      	beq.n	8008cb0 <f_open+0x1d4>
 8008ca0:	7ebb      	ldrb	r3, [r7, #26]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d002      	beq.n	8008cb0 <f_open+0x1d4>
						res = FR_DENIED;
 8008caa:	2307      	movs	r3, #7
 8008cac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008cb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d128      	bne.n	8008d0a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008cb8:	79fb      	ldrb	r3, [r7, #7]
 8008cba:	f003 0308 	and.w	r3, r3, #8
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d003      	beq.n	8008cca <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008cc2:	79fb      	ldrb	r3, [r7, #7]
 8008cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cc8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008cd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008cd8:	79fb      	ldrb	r3, [r7, #7]
 8008cda:	f023 0301 	bic.w	r3, r3, #1
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bf14      	ite	ne
 8008ce2:	2301      	movne	r3, #1
 8008ce4:	2300      	moveq	r3, #0
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	461a      	mov	r2, r3
 8008cea:	f107 0314 	add.w	r3, r7, #20
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7fe fb8b 	bl	800740c <inc_lock>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d102      	bne.n	8008d0a <f_open+0x22e>
 8008d04:	2302      	movs	r3, #2
 8008d06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f040 8095 	bne.w	8008e3e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff f9af 	bl	800807e <ld_clust>
 8008d20:	4602      	mov	r2, r0
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d28:	331c      	adds	r3, #28
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7fe fa08 	bl	8007140 <ld_dword>
 8008d30:	4602      	mov	r2, r0
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008d3c:	693a      	ldr	r2, [r7, #16]
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	88da      	ldrh	r2, [r3, #6]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	79fa      	ldrb	r2, [r7, #7]
 8008d4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2200      	movs	r2, #0
 8008d54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	3330      	adds	r3, #48	; 0x30
 8008d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d6a:	2100      	movs	r1, #0
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7fe fa72 	bl	8007256 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008d72:	79fb      	ldrb	r3, [r7, #7]
 8008d74:	f003 0320 	and.w	r3, r3, #32
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d060      	beq.n	8008e3e <f_open+0x362>
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	68db      	ldr	r3, [r3, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d05c      	beq.n	8008e3e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	895b      	ldrh	r3, [r3, #10]
 8008d90:	025b      	lsls	r3, r3, #9
 8008d92:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	68db      	ldr	r3, [r3, #12]
 8008d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8008da0:	e016      	b.n	8008dd0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008da6:	4618      	mov	r0, r3
 8008da8:	f7fe fd1d 	bl	80077e6 <get_fat>
 8008dac:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008dae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d802      	bhi.n	8008dba <f_open+0x2de>
 8008db4:	2302      	movs	r3, #2
 8008db6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc0:	d102      	bne.n	8008dc8 <f_open+0x2ec>
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008dc8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	657b      	str	r3, [r7, #84]	; 0x54
 8008dd0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d103      	bne.n	8008de0 <f_open+0x304>
 8008dd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d8e0      	bhi.n	8008da2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008de4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008de6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d127      	bne.n	8008e3e <f_open+0x362>
 8008dee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d022      	beq.n	8008e3e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7fe fcd3 	bl	80077a8 <clust2sect>
 8008e02:	6478      	str	r0, [r7, #68]	; 0x44
 8008e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d103      	bne.n	8008e12 <f_open+0x336>
						res = FR_INT_ERR;
 8008e0a:	2302      	movs	r3, #2
 8008e0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008e10:	e015      	b.n	8008e3e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e14:	0a5a      	lsrs	r2, r3, #9
 8008e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e18:	441a      	add	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	7858      	ldrb	r0, [r3, #1]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	6a1a      	ldr	r2, [r3, #32]
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	f7fe f911 	bl	8007054 <disk_read>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <f_open+0x362>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008e3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <f_open+0x370>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3760      	adds	r7, #96	; 0x60
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08c      	sub	sp, #48	; 0x30
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f107 0210 	add.w	r2, r7, #16
 8008e76:	4611      	mov	r1, r2
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7ff fdb3 	bl	80089e4 <validate>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e84:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d107      	bne.n	8008e9c <f_write+0x44>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	7d5b      	ldrb	r3, [r3, #21]
 8008e90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008e94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d002      	beq.n	8008ea2 <f_write+0x4a>
 8008e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ea0:	e14b      	b.n	800913a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	7d1b      	ldrb	r3, [r3, #20]
 8008ea6:	f003 0302 	and.w	r3, r3, #2
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d101      	bne.n	8008eb2 <f_write+0x5a>
 8008eae:	2307      	movs	r3, #7
 8008eb0:	e143      	b.n	800913a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	699a      	ldr	r2, [r3, #24]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	441a      	add	r2, r3
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	699b      	ldr	r3, [r3, #24]
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	f080 812d 	bcs.w	800911e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008ecc:	e127      	b.n	800911e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	699b      	ldr	r3, [r3, #24]
 8008ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f040 80e3 	bne.w	80090a2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	699b      	ldr	r3, [r3, #24]
 8008ee0:	0a5b      	lsrs	r3, r3, #9
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	8952      	ldrh	r2, [r2, #10]
 8008ee6:	3a01      	subs	r2, #1
 8008ee8:	4013      	ands	r3, r2
 8008eea:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d143      	bne.n	8008f7a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10c      	bne.n	8008f14 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d11a      	bne.n	8008f3c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2100      	movs	r1, #0
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe fe64 	bl	8007bd8 <create_chain>
 8008f10:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f12:	e013      	b.n	8008f3c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d007      	beq.n	8008f2c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	4619      	mov	r1, r3
 8008f22:	68f8      	ldr	r0, [r7, #12]
 8008f24:	f7fe fef0 	bl	8007d08 <clmt_clust>
 8008f28:	62b8      	str	r0, [r7, #40]	; 0x28
 8008f2a:	e007      	b.n	8008f3c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	69db      	ldr	r3, [r3, #28]
 8008f32:	4619      	mov	r1, r3
 8008f34:	4610      	mov	r0, r2
 8008f36:	f7fe fe4f 	bl	8007bd8 <create_chain>
 8008f3a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	f000 80f2 	beq.w	8009128 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f46:	2b01      	cmp	r3, #1
 8008f48:	d104      	bne.n	8008f54 <f_write+0xfc>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2202      	movs	r2, #2
 8008f4e:	755a      	strb	r2, [r3, #21]
 8008f50:	2302      	movs	r3, #2
 8008f52:	e0f2      	b.n	800913a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5a:	d104      	bne.n	8008f66 <f_write+0x10e>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	755a      	strb	r2, [r3, #21]
 8008f62:	2301      	movs	r3, #1
 8008f64:	e0e9      	b.n	800913a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f6a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <f_write+0x122>
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f78:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	7d1b      	ldrb	r3, [r3, #20]
 8008f7e:	b25b      	sxtb	r3, r3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	da18      	bge.n	8008fb6 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	7858      	ldrb	r0, [r3, #1]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	6a1a      	ldr	r2, [r3, #32]
 8008f92:	2301      	movs	r3, #1
 8008f94:	f7fe f87e 	bl	8007094 <disk_write>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d004      	beq.n	8008fa8 <f_write+0x150>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	755a      	strb	r2, [r3, #21]
 8008fa4:	2301      	movs	r3, #1
 8008fa6:	e0c8      	b.n	800913a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	7d1b      	ldrb	r3, [r3, #20]
 8008fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fb0:	b2da      	uxtb	r2, r3
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	4610      	mov	r0, r2
 8008fc0:	f7fe fbf2 	bl	80077a8 <clust2sect>
 8008fc4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d104      	bne.n	8008fd6 <f_write+0x17e>
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	755a      	strb	r2, [r3, #21]
 8008fd2:	2302      	movs	r3, #2
 8008fd4:	e0b1      	b.n	800913a <f_write+0x2e2>
			sect += csect;
 8008fd6:	697a      	ldr	r2, [r7, #20]
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	4413      	add	r3, r2
 8008fdc:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	0a5b      	lsrs	r3, r3, #9
 8008fe2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008fe4:	6a3b      	ldr	r3, [r7, #32]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d03c      	beq.n	8009064 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008fea:	69ba      	ldr	r2, [r7, #24]
 8008fec:	6a3b      	ldr	r3, [r7, #32]
 8008fee:	4413      	add	r3, r2
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	8952      	ldrh	r2, [r2, #10]
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d905      	bls.n	8009004 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	895b      	ldrh	r3, [r3, #10]
 8008ffc:	461a      	mov	r2, r3
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	7858      	ldrb	r0, [r3, #1]
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	69f9      	ldr	r1, [r7, #28]
 800900e:	f7fe f841 	bl	8007094 <disk_write>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d004      	beq.n	8009022 <f_write+0x1ca>
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2201      	movs	r2, #1
 800901c:	755a      	strb	r2, [r3, #21]
 800901e:	2301      	movs	r3, #1
 8009020:	e08b      	b.n	800913a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	6a1a      	ldr	r2, [r3, #32]
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	6a3a      	ldr	r2, [r7, #32]
 800902c:	429a      	cmp	r2, r3
 800902e:	d915      	bls.n	800905c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6a1a      	ldr	r2, [r3, #32]
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	025b      	lsls	r3, r3, #9
 8009040:	69fa      	ldr	r2, [r7, #28]
 8009042:	4413      	add	r3, r2
 8009044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009048:	4619      	mov	r1, r3
 800904a:	f7fe f8e3 	bl	8007214 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	7d1b      	ldrb	r3, [r3, #20]
 8009052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009056:	b2da      	uxtb	r2, r3
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800905c:	6a3b      	ldr	r3, [r7, #32]
 800905e:	025b      	lsls	r3, r3, #9
 8009060:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8009062:	e03f      	b.n	80090e4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6a1b      	ldr	r3, [r3, #32]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	429a      	cmp	r2, r3
 800906c:	d016      	beq.n	800909c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	699a      	ldr	r2, [r3, #24]
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009076:	429a      	cmp	r2, r3
 8009078:	d210      	bcs.n	800909c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	7858      	ldrb	r0, [r3, #1]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009084:	2301      	movs	r3, #1
 8009086:	697a      	ldr	r2, [r7, #20]
 8009088:	f7fd ffe4 	bl	8007054 <disk_read>
 800908c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800908e:	2b00      	cmp	r3, #0
 8009090:	d004      	beq.n	800909c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2201      	movs	r2, #1
 8009096:	755a      	strb	r2, [r3, #21]
 8009098:	2301      	movs	r3, #1
 800909a:	e04e      	b.n	800913a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	699b      	ldr	r3, [r3, #24]
 80090a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090aa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80090ae:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80090b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d901      	bls.n	80090bc <f_write+0x264>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090ca:	4413      	add	r3, r2
 80090cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ce:	69f9      	ldr	r1, [r7, #28]
 80090d0:	4618      	mov	r0, r3
 80090d2:	f7fe f89f 	bl	8007214 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	7d1b      	ldrb	r3, [r3, #20]
 80090da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80090de:	b2da      	uxtb	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80090e4:	69fa      	ldr	r2, [r7, #28]
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	4413      	add	r3, r2
 80090ea:	61fb      	str	r3, [r7, #28]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	699a      	ldr	r2, [r3, #24]
 80090f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f2:	441a      	add	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	619a      	str	r2, [r3, #24]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	68da      	ldr	r2, [r3, #12]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	699b      	ldr	r3, [r3, #24]
 8009100:	429a      	cmp	r2, r3
 8009102:	bf38      	it	cc
 8009104:	461a      	movcc	r2, r3
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	60da      	str	r2, [r3, #12]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009110:	441a      	add	r2, r3
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800911a:	1ad3      	subs	r3, r2, r3
 800911c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	f47f aed4 	bne.w	8008ece <f_write+0x76>
 8009126:	e000      	b.n	800912a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009128:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	7d1b      	ldrb	r3, [r3, #20]
 800912e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009132:	b2da      	uxtb	r2, r3
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3730      	adds	r7, #48	; 0x30
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009142:	b580      	push	{r7, lr}
 8009144:	b086      	sub	sp, #24
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f107 0208 	add.w	r2, r7, #8
 8009150:	4611      	mov	r1, r2
 8009152:	4618      	mov	r0, r3
 8009154:	f7ff fc46 	bl	80089e4 <validate>
 8009158:	4603      	mov	r3, r0
 800915a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800915c:	7dfb      	ldrb	r3, [r7, #23]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d168      	bne.n	8009234 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7d1b      	ldrb	r3, [r3, #20]
 8009166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	d062      	beq.n	8009234 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	7d1b      	ldrb	r3, [r3, #20]
 8009172:	b25b      	sxtb	r3, r3
 8009174:	2b00      	cmp	r3, #0
 8009176:	da15      	bge.n	80091a4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	7858      	ldrb	r0, [r3, #1]
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1a      	ldr	r2, [r3, #32]
 8009186:	2301      	movs	r3, #1
 8009188:	f7fd ff84 	bl	8007094 <disk_write>
 800918c:	4603      	mov	r3, r0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <f_sync+0x54>
 8009192:	2301      	movs	r3, #1
 8009194:	e04f      	b.n	8009236 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	7d1b      	ldrb	r3, [r3, #20]
 800919a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919e:	b2da      	uxtb	r2, r3
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80091a4:	f7fd f9da 	bl	800655c <get_fattime>
 80091a8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80091aa:	68ba      	ldr	r2, [r7, #8]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b0:	4619      	mov	r1, r3
 80091b2:	4610      	mov	r0, r2
 80091b4:	f7fe fa5c 	bl	8007670 <move_window>
 80091b8:	4603      	mov	r3, r0
 80091ba:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80091bc:	7dfb      	ldrb	r3, [r7, #23]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d138      	bne.n	8009234 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091c6:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	330b      	adds	r3, #11
 80091cc:	781a      	ldrb	r2, [r3, #0]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	330b      	adds	r3, #11
 80091d2:	f042 0220 	orr.w	r2, r2, #32
 80091d6:	b2d2      	uxtb	r2, r2
 80091d8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6818      	ldr	r0, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	689b      	ldr	r3, [r3, #8]
 80091e2:	461a      	mov	r2, r3
 80091e4:	68f9      	ldr	r1, [r7, #12]
 80091e6:	f7fe ff69 	bl	80080bc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f103 021c 	add.w	r2, r3, #28
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	4619      	mov	r1, r3
 80091f6:	4610      	mov	r0, r2
 80091f8:	f7fd ffe0 	bl	80071bc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	3316      	adds	r3, #22
 8009200:	6939      	ldr	r1, [r7, #16]
 8009202:	4618      	mov	r0, r3
 8009204:	f7fd ffda 	bl	80071bc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	3312      	adds	r3, #18
 800920c:	2100      	movs	r1, #0
 800920e:	4618      	mov	r0, r3
 8009210:	f7fd ffb9 	bl	8007186 <st_word>
					fs->wflag = 1;
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	2201      	movs	r2, #1
 8009218:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	4618      	mov	r0, r3
 800921e:	f7fe fa55 	bl	80076cc <sync_fs>
 8009222:	4603      	mov	r3, r0
 8009224:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	7d1b      	ldrb	r3, [r3, #20]
 800922a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800922e:	b2da      	uxtb	r2, r3
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009234:	7dfb      	ldrb	r3, [r7, #23]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}

0800923e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800923e:	b580      	push	{r7, lr}
 8009240:	b084      	sub	sp, #16
 8009242:	af00      	add	r7, sp, #0
 8009244:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7ff ff7b 	bl	8009142 <f_sync>
 800924c:	4603      	mov	r3, r0
 800924e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009250:	7bfb      	ldrb	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d118      	bne.n	8009288 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f107 0208 	add.w	r2, r7, #8
 800925c:	4611      	mov	r1, r2
 800925e:	4618      	mov	r0, r3
 8009260:	f7ff fbc0 	bl	80089e4 <validate>
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009268:	7bfb      	ldrb	r3, [r7, #15]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10c      	bne.n	8009288 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	4618      	mov	r0, r3
 8009274:	f7fe f958 	bl	8007528 <dec_lock>
 8009278:	4603      	mov	r3, r0
 800927a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800927c:	7bfb      	ldrb	r3, [r7, #15]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8009288:	7bfb      	ldrb	r3, [r7, #15]
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b090      	sub	sp, #64	; 0x40
 8009296:	af00      	add	r7, sp, #0
 8009298:	6078      	str	r0, [r7, #4]
 800929a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f107 0208 	add.w	r2, r7, #8
 80092a2:	4611      	mov	r1, r2
 80092a4:	4618      	mov	r0, r3
 80092a6:	f7ff fb9d 	bl	80089e4 <validate>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80092b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d103      	bne.n	80092c0 <f_lseek+0x2e>
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	7d5b      	ldrb	r3, [r3, #21]
 80092bc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80092c0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <f_lseek+0x3c>
 80092c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80092cc:	e1e6      	b.n	800969c <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 80d1 	beq.w	800947a <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092de:	d15a      	bne.n	8009396 <f_lseek+0x104>
			tbl = fp->cltbl;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e4:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	1d1a      	adds	r2, r3, #4
 80092ea:	627a      	str	r2, [r7, #36]	; 0x24
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	617b      	str	r3, [r7, #20]
 80092f0:	2302      	movs	r3, #2
 80092f2:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80092fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d03a      	beq.n	8009376 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	613b      	str	r3, [r7, #16]
 8009304:	2300      	movs	r3, #0
 8009306:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	3302      	adds	r3, #2
 800930c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009314:	3301      	adds	r3, #1
 8009316:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800931c:	4618      	mov	r0, r3
 800931e:	f7fe fa62 	bl	80077e6 <get_fat>
 8009322:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009326:	2b01      	cmp	r3, #1
 8009328:	d804      	bhi.n	8009334 <f_lseek+0xa2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2202      	movs	r2, #2
 800932e:	755a      	strb	r2, [r3, #21]
 8009330:	2302      	movs	r3, #2
 8009332:	e1b3      	b.n	800969c <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933a:	d104      	bne.n	8009346 <f_lseek+0xb4>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	755a      	strb	r2, [r3, #21]
 8009342:	2301      	movs	r3, #1
 8009344:	e1aa      	b.n	800969c <f_lseek+0x40a>
					} while (cl == pcl + 1);
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800934c:	429a      	cmp	r2, r3
 800934e:	d0de      	beq.n	800930e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	429a      	cmp	r2, r3
 8009356:	d809      	bhi.n	800936c <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8009358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935a:	1d1a      	adds	r2, r3, #4
 800935c:	627a      	str	r2, [r7, #36]	; 0x24
 800935e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009360:	601a      	str	r2, [r3, #0]
 8009362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009364:	1d1a      	adds	r2, r3, #4
 8009366:	627a      	str	r2, [r7, #36]	; 0x24
 8009368:	693a      	ldr	r2, [r7, #16]
 800936a:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009372:	429a      	cmp	r2, r3
 8009374:	d3c4      	bcc.n	8009300 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800937c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800937e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	429a      	cmp	r2, r3
 8009384:	d803      	bhi.n	800938e <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	e184      	b.n	8009698 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800938e:	2311      	movs	r3, #17
 8009390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8009394:	e180      	b.n	8009698 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	68db      	ldr	r3, [r3, #12]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d902      	bls.n	80093a6 <f_lseek+0x114>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 8172 	beq.w	8009698 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	3b01      	subs	r3, #1
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7fe fca4 	bl	8007d08 <clmt_clust>
 80093c0:	4602      	mov	r2, r0
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80093c6:	68ba      	ldr	r2, [r7, #8]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	69db      	ldr	r3, [r3, #28]
 80093cc:	4619      	mov	r1, r3
 80093ce:	4610      	mov	r0, r2
 80093d0:	f7fe f9ea 	bl	80077a8 <clust2sect>
 80093d4:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80093d6:	69bb      	ldr	r3, [r7, #24]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d104      	bne.n	80093e6 <f_lseek+0x154>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2202      	movs	r2, #2
 80093e0:	755a      	strb	r2, [r3, #21]
 80093e2:	2302      	movs	r3, #2
 80093e4:	e15a      	b.n	800969c <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	3b01      	subs	r3, #1
 80093ea:	0a5b      	lsrs	r3, r3, #9
 80093ec:	68ba      	ldr	r2, [r7, #8]
 80093ee:	8952      	ldrh	r2, [r2, #10]
 80093f0:	3a01      	subs	r2, #1
 80093f2:	4013      	ands	r3, r2
 80093f4:	69ba      	ldr	r2, [r7, #24]
 80093f6:	4413      	add	r3, r2
 80093f8:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009402:	2b00      	cmp	r3, #0
 8009404:	f000 8148 	beq.w	8009698 <f_lseek+0x406>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	69ba      	ldr	r2, [r7, #24]
 800940e:	429a      	cmp	r2, r3
 8009410:	f000 8142 	beq.w	8009698 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	7d1b      	ldrb	r3, [r3, #20]
 8009418:	b25b      	sxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	da18      	bge.n	8009450 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	7858      	ldrb	r0, [r3, #1]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a1a      	ldr	r2, [r3, #32]
 800942c:	2301      	movs	r3, #1
 800942e:	f7fd fe31 	bl	8007094 <disk_write>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d004      	beq.n	8009442 <f_lseek+0x1b0>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2201      	movs	r2, #1
 800943c:	755a      	strb	r2, [r3, #21]
 800943e:	2301      	movs	r3, #1
 8009440:	e12c      	b.n	800969c <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	7d1b      	ldrb	r3, [r3, #20]
 8009446:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800944a:	b2da      	uxtb	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	7858      	ldrb	r0, [r3, #1]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800945a:	2301      	movs	r3, #1
 800945c:	69ba      	ldr	r2, [r7, #24]
 800945e:	f7fd fdf9 	bl	8007054 <disk_read>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	d004      	beq.n	8009472 <f_lseek+0x1e0>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	755a      	strb	r2, [r3, #21]
 800946e:	2301      	movs	r3, #1
 8009470:	e114      	b.n	800969c <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	69ba      	ldr	r2, [r7, #24]
 8009476:	621a      	str	r2, [r3, #32]
 8009478:	e10e      	b.n	8009698 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	683a      	ldr	r2, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d908      	bls.n	8009496 <f_lseek+0x204>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	7d1b      	ldrb	r3, [r3, #20]
 8009488:	f003 0302 	and.w	r3, r3, #2
 800948c:	2b00      	cmp	r3, #0
 800948e:	d102      	bne.n	8009496 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	699b      	ldr	r3, [r3, #24]
 800949a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	637b      	str	r3, [r7, #52]	; 0x34
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80094a4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f000 80a7 	beq.w	80095fc <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	895b      	ldrh	r3, [r3, #10]
 80094b2:	025b      	lsls	r3, r3, #9
 80094b4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80094b6:	6a3b      	ldr	r3, [r7, #32]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01b      	beq.n	80094f4 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	1e5a      	subs	r2, r3, #1
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80094c6:	6a3b      	ldr	r3, [r7, #32]
 80094c8:	1e59      	subs	r1, r3, #1
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80094d0:	429a      	cmp	r2, r3
 80094d2:	d30f      	bcc.n	80094f4 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	1e5a      	subs	r2, r3, #1
 80094d8:	69fb      	ldr	r3, [r7, #28]
 80094da:	425b      	negs	r3, r3
 80094dc:	401a      	ands	r2, r3
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80094f2:	e022      	b.n	800953a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80094fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d119      	bne.n	8009534 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2100      	movs	r1, #0
 8009504:	4618      	mov	r0, r3
 8009506:	f7fe fb67 	bl	8007bd8 <create_chain>
 800950a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800950c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800950e:	2b01      	cmp	r3, #1
 8009510:	d104      	bne.n	800951c <f_lseek+0x28a>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2202      	movs	r2, #2
 8009516:	755a      	strb	r2, [r3, #21]
 8009518:	2302      	movs	r3, #2
 800951a:	e0bf      	b.n	800969c <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800951c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800951e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009522:	d104      	bne.n	800952e <f_lseek+0x29c>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	755a      	strb	r2, [r3, #21]
 800952a:	2301      	movs	r3, #1
 800952c:	e0b6      	b.n	800969c <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009532:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009538:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800953a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800953c:	2b00      	cmp	r3, #0
 800953e:	d05d      	beq.n	80095fc <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 8009540:	e03a      	b.n	80095b8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 8009542:	683a      	ldr	r2, [r7, #0]
 8009544:	69fb      	ldr	r3, [r7, #28]
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	603b      	str	r3, [r7, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	69fb      	ldr	r3, [r7, #28]
 8009550:	441a      	add	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	7d1b      	ldrb	r3, [r3, #20]
 800955a:	f003 0302 	and.w	r3, r3, #2
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00b      	beq.n	800957a <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009566:	4618      	mov	r0, r3
 8009568:	f7fe fb36 	bl	8007bd8 <create_chain>
 800956c:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800956e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009570:	2b00      	cmp	r3, #0
 8009572:	d108      	bne.n	8009586 <f_lseek+0x2f4>
							ofs = 0; break;
 8009574:	2300      	movs	r3, #0
 8009576:	603b      	str	r3, [r7, #0]
 8009578:	e022      	b.n	80095c0 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800957e:	4618      	mov	r0, r3
 8009580:	f7fe f931 	bl	80077e6 <get_fat>
 8009584:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800958c:	d104      	bne.n	8009598 <f_lseek+0x306>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	2201      	movs	r2, #1
 8009592:	755a      	strb	r2, [r3, #21]
 8009594:	2301      	movs	r3, #1
 8009596:	e081      	b.n	800969c <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8009598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800959a:	2b01      	cmp	r3, #1
 800959c:	d904      	bls.n	80095a8 <f_lseek+0x316>
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	695b      	ldr	r3, [r3, #20]
 80095a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d304      	bcc.n	80095b2 <f_lseek+0x320>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	755a      	strb	r2, [r3, #21]
 80095ae:	2302      	movs	r3, #2
 80095b0:	e074      	b.n	800969c <f_lseek+0x40a>
					fp->clust = clst;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80095b6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80095b8:	683a      	ldr	r2, [r7, #0]
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d8c0      	bhi.n	8009542 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	699a      	ldr	r2, [r3, #24]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	441a      	add	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80095cc:	683b      	ldr	r3, [r7, #0]
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d012      	beq.n	80095fc <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe f8e4 	bl	80077a8 <clust2sect>
 80095e0:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80095e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d104      	bne.n	80095f2 <f_lseek+0x360>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2202      	movs	r2, #2
 80095ec:	755a      	strb	r2, [r3, #21]
 80095ee:	2302      	movs	r3, #2
 80095f0:	e054      	b.n	800969c <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	0a5b      	lsrs	r3, r3, #9
 80095f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f8:	4413      	add	r3, r2
 80095fa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699a      	ldr	r2, [r3, #24]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	429a      	cmp	r2, r3
 8009606:	d90a      	bls.n	800961e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	7d1b      	ldrb	r3, [r3, #20]
 8009614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009618:	b2da      	uxtb	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009626:	2b00      	cmp	r3, #0
 8009628:	d036      	beq.n	8009698 <f_lseek+0x406>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009630:	429a      	cmp	r2, r3
 8009632:	d031      	beq.n	8009698 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	7d1b      	ldrb	r3, [r3, #20]
 8009638:	b25b      	sxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	da18      	bge.n	8009670 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	7858      	ldrb	r0, [r3, #1]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a1a      	ldr	r2, [r3, #32]
 800964c:	2301      	movs	r3, #1
 800964e:	f7fd fd21 	bl	8007094 <disk_write>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d004      	beq.n	8009662 <f_lseek+0x3d0>
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	755a      	strb	r2, [r3, #21]
 800965e:	2301      	movs	r3, #1
 8009660:	e01c      	b.n	800969c <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	7d1b      	ldrb	r3, [r3, #20]
 8009666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800966a:	b2da      	uxtb	r2, r3
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	7858      	ldrb	r0, [r3, #1]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800967a:	2301      	movs	r3, #1
 800967c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800967e:	f7fd fce9 	bl	8007054 <disk_read>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d004      	beq.n	8009692 <f_lseek+0x400>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	755a      	strb	r2, [r3, #21]
 800968e:	2301      	movs	r3, #1
 8009690:	e004      	b.n	800969c <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009696:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009698:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800969c:	4618      	mov	r0, r3
 800969e:	3740      	adds	r7, #64	; 0x40
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	4613      	mov	r3, r2
 80096b0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80096b2:	2301      	movs	r3, #1
 80096b4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80096b6:	2300      	movs	r3, #0
 80096b8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80096ba:	4b1f      	ldr	r3, [pc, #124]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096bc:	7a5b      	ldrb	r3, [r3, #9]
 80096be:	b2db      	uxtb	r3, r3
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d131      	bne.n	8009728 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80096c4:	4b1c      	ldr	r3, [pc, #112]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096c6:	7a5b      	ldrb	r3, [r3, #9]
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	461a      	mov	r2, r3
 80096cc:	4b1a      	ldr	r3, [pc, #104]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096ce:	2100      	movs	r1, #0
 80096d0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80096d2:	4b19      	ldr	r3, [pc, #100]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096d4:	7a5b      	ldrb	r3, [r3, #9]
 80096d6:	b2db      	uxtb	r3, r3
 80096d8:	4a17      	ldr	r2, [pc, #92]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096da:	009b      	lsls	r3, r3, #2
 80096dc:	4413      	add	r3, r2
 80096de:	68fa      	ldr	r2, [r7, #12]
 80096e0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80096e2:	4b15      	ldr	r3, [pc, #84]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096e4:	7a5b      	ldrb	r3, [r3, #9]
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	461a      	mov	r2, r3
 80096ea:	4b13      	ldr	r3, [pc, #76]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096ec:	4413      	add	r3, r2
 80096ee:	79fa      	ldrb	r2, [r7, #7]
 80096f0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80096f2:	4b11      	ldr	r3, [pc, #68]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096f4:	7a5b      	ldrb	r3, [r3, #9]
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	1c5a      	adds	r2, r3, #1
 80096fa:	b2d1      	uxtb	r1, r2
 80096fc:	4a0e      	ldr	r2, [pc, #56]	; (8009738 <FATFS_LinkDriverEx+0x94>)
 80096fe:	7251      	strb	r1, [r2, #9]
 8009700:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009702:	7dbb      	ldrb	r3, [r7, #22]
 8009704:	3330      	adds	r3, #48	; 0x30
 8009706:	b2da      	uxtb	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	3301      	adds	r3, #1
 8009710:	223a      	movs	r2, #58	; 0x3a
 8009712:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	3302      	adds	r3, #2
 8009718:	222f      	movs	r2, #47	; 0x2f
 800971a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	3303      	adds	r3, #3
 8009720:	2200      	movs	r2, #0
 8009722:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009724:	2300      	movs	r3, #0
 8009726:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009728:	7dfb      	ldrb	r3, [r7, #23]
}
 800972a:	4618      	mov	r0, r3
 800972c:	371c      	adds	r7, #28
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	20001330 	.word	0x20001330

0800973c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
 8009744:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009746:	2200      	movs	r2, #0
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f7ff ffaa 	bl	80096a4 <FATFS_LinkDriverEx>
 8009750:	4603      	mov	r3, r0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
	...

0800975c <__errno>:
 800975c:	4b01      	ldr	r3, [pc, #4]	; (8009764 <__errno+0x8>)
 800975e:	6818      	ldr	r0, [r3, #0]
 8009760:	4770      	bx	lr
 8009762:	bf00      	nop
 8009764:	20000024 	.word	0x20000024

08009768 <__libc_init_array>:
 8009768:	b570      	push	{r4, r5, r6, lr}
 800976a:	4d0d      	ldr	r5, [pc, #52]	; (80097a0 <__libc_init_array+0x38>)
 800976c:	4c0d      	ldr	r4, [pc, #52]	; (80097a4 <__libc_init_array+0x3c>)
 800976e:	1b64      	subs	r4, r4, r5
 8009770:	10a4      	asrs	r4, r4, #2
 8009772:	2600      	movs	r6, #0
 8009774:	42a6      	cmp	r6, r4
 8009776:	d109      	bne.n	800978c <__libc_init_array+0x24>
 8009778:	4d0b      	ldr	r5, [pc, #44]	; (80097a8 <__libc_init_array+0x40>)
 800977a:	4c0c      	ldr	r4, [pc, #48]	; (80097ac <__libc_init_array+0x44>)
 800977c:	f005 f8e6 	bl	800e94c <_init>
 8009780:	1b64      	subs	r4, r4, r5
 8009782:	10a4      	asrs	r4, r4, #2
 8009784:	2600      	movs	r6, #0
 8009786:	42a6      	cmp	r6, r4
 8009788:	d105      	bne.n	8009796 <__libc_init_array+0x2e>
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009790:	4798      	blx	r3
 8009792:	3601      	adds	r6, #1
 8009794:	e7ee      	b.n	8009774 <__libc_init_array+0xc>
 8009796:	f855 3b04 	ldr.w	r3, [r5], #4
 800979a:	4798      	blx	r3
 800979c:	3601      	adds	r6, #1
 800979e:	e7f2      	b.n	8009786 <__libc_init_array+0x1e>
 80097a0:	0800f004 	.word	0x0800f004
 80097a4:	0800f004 	.word	0x0800f004
 80097a8:	0800f004 	.word	0x0800f004
 80097ac:	0800f008 	.word	0x0800f008

080097b0 <memset>:
 80097b0:	4402      	add	r2, r0
 80097b2:	4603      	mov	r3, r0
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d100      	bne.n	80097ba <memset+0xa>
 80097b8:	4770      	bx	lr
 80097ba:	f803 1b01 	strb.w	r1, [r3], #1
 80097be:	e7f9      	b.n	80097b4 <memset+0x4>

080097c0 <__cvt>:
 80097c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097c4:	ec55 4b10 	vmov	r4, r5, d0
 80097c8:	2d00      	cmp	r5, #0
 80097ca:	460e      	mov	r6, r1
 80097cc:	4619      	mov	r1, r3
 80097ce:	462b      	mov	r3, r5
 80097d0:	bfbb      	ittet	lt
 80097d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097d6:	461d      	movlt	r5, r3
 80097d8:	2300      	movge	r3, #0
 80097da:	232d      	movlt	r3, #45	; 0x2d
 80097dc:	700b      	strb	r3, [r1, #0]
 80097de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097e4:	4691      	mov	r9, r2
 80097e6:	f023 0820 	bic.w	r8, r3, #32
 80097ea:	bfbc      	itt	lt
 80097ec:	4622      	movlt	r2, r4
 80097ee:	4614      	movlt	r4, r2
 80097f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097f4:	d005      	beq.n	8009802 <__cvt+0x42>
 80097f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097fa:	d100      	bne.n	80097fe <__cvt+0x3e>
 80097fc:	3601      	adds	r6, #1
 80097fe:	2102      	movs	r1, #2
 8009800:	e000      	b.n	8009804 <__cvt+0x44>
 8009802:	2103      	movs	r1, #3
 8009804:	ab03      	add	r3, sp, #12
 8009806:	9301      	str	r3, [sp, #4]
 8009808:	ab02      	add	r3, sp, #8
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	ec45 4b10 	vmov	d0, r4, r5
 8009810:	4653      	mov	r3, sl
 8009812:	4632      	mov	r2, r6
 8009814:	f001 fe60 	bl	800b4d8 <_dtoa_r>
 8009818:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800981c:	4607      	mov	r7, r0
 800981e:	d102      	bne.n	8009826 <__cvt+0x66>
 8009820:	f019 0f01 	tst.w	r9, #1
 8009824:	d022      	beq.n	800986c <__cvt+0xac>
 8009826:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800982a:	eb07 0906 	add.w	r9, r7, r6
 800982e:	d110      	bne.n	8009852 <__cvt+0x92>
 8009830:	783b      	ldrb	r3, [r7, #0]
 8009832:	2b30      	cmp	r3, #48	; 0x30
 8009834:	d10a      	bne.n	800984c <__cvt+0x8c>
 8009836:	2200      	movs	r2, #0
 8009838:	2300      	movs	r3, #0
 800983a:	4620      	mov	r0, r4
 800983c:	4629      	mov	r1, r5
 800983e:	f7f7 f963 	bl	8000b08 <__aeabi_dcmpeq>
 8009842:	b918      	cbnz	r0, 800984c <__cvt+0x8c>
 8009844:	f1c6 0601 	rsb	r6, r6, #1
 8009848:	f8ca 6000 	str.w	r6, [sl]
 800984c:	f8da 3000 	ldr.w	r3, [sl]
 8009850:	4499      	add	r9, r3
 8009852:	2200      	movs	r2, #0
 8009854:	2300      	movs	r3, #0
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f7 f955 	bl	8000b08 <__aeabi_dcmpeq>
 800985e:	b108      	cbz	r0, 8009864 <__cvt+0xa4>
 8009860:	f8cd 900c 	str.w	r9, [sp, #12]
 8009864:	2230      	movs	r2, #48	; 0x30
 8009866:	9b03      	ldr	r3, [sp, #12]
 8009868:	454b      	cmp	r3, r9
 800986a:	d307      	bcc.n	800987c <__cvt+0xbc>
 800986c:	9b03      	ldr	r3, [sp, #12]
 800986e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009870:	1bdb      	subs	r3, r3, r7
 8009872:	4638      	mov	r0, r7
 8009874:	6013      	str	r3, [r2, #0]
 8009876:	b004      	add	sp, #16
 8009878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987c:	1c59      	adds	r1, r3, #1
 800987e:	9103      	str	r1, [sp, #12]
 8009880:	701a      	strb	r2, [r3, #0]
 8009882:	e7f0      	b.n	8009866 <__cvt+0xa6>

08009884 <__exponent>:
 8009884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009886:	4603      	mov	r3, r0
 8009888:	2900      	cmp	r1, #0
 800988a:	bfb8      	it	lt
 800988c:	4249      	neglt	r1, r1
 800988e:	f803 2b02 	strb.w	r2, [r3], #2
 8009892:	bfb4      	ite	lt
 8009894:	222d      	movlt	r2, #45	; 0x2d
 8009896:	222b      	movge	r2, #43	; 0x2b
 8009898:	2909      	cmp	r1, #9
 800989a:	7042      	strb	r2, [r0, #1]
 800989c:	dd2a      	ble.n	80098f4 <__exponent+0x70>
 800989e:	f10d 0407 	add.w	r4, sp, #7
 80098a2:	46a4      	mov	ip, r4
 80098a4:	270a      	movs	r7, #10
 80098a6:	46a6      	mov	lr, r4
 80098a8:	460a      	mov	r2, r1
 80098aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80098ae:	fb07 1516 	mls	r5, r7, r6, r1
 80098b2:	3530      	adds	r5, #48	; 0x30
 80098b4:	2a63      	cmp	r2, #99	; 0x63
 80098b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80098ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098be:	4631      	mov	r1, r6
 80098c0:	dcf1      	bgt.n	80098a6 <__exponent+0x22>
 80098c2:	3130      	adds	r1, #48	; 0x30
 80098c4:	f1ae 0502 	sub.w	r5, lr, #2
 80098c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098cc:	1c44      	adds	r4, r0, #1
 80098ce:	4629      	mov	r1, r5
 80098d0:	4561      	cmp	r1, ip
 80098d2:	d30a      	bcc.n	80098ea <__exponent+0x66>
 80098d4:	f10d 0209 	add.w	r2, sp, #9
 80098d8:	eba2 020e 	sub.w	r2, r2, lr
 80098dc:	4565      	cmp	r5, ip
 80098de:	bf88      	it	hi
 80098e0:	2200      	movhi	r2, #0
 80098e2:	4413      	add	r3, r2
 80098e4:	1a18      	subs	r0, r3, r0
 80098e6:	b003      	add	sp, #12
 80098e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098f2:	e7ed      	b.n	80098d0 <__exponent+0x4c>
 80098f4:	2330      	movs	r3, #48	; 0x30
 80098f6:	3130      	adds	r1, #48	; 0x30
 80098f8:	7083      	strb	r3, [r0, #2]
 80098fa:	70c1      	strb	r1, [r0, #3]
 80098fc:	1d03      	adds	r3, r0, #4
 80098fe:	e7f1      	b.n	80098e4 <__exponent+0x60>

08009900 <_printf_float>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	ed2d 8b02 	vpush	{d8}
 8009908:	b08d      	sub	sp, #52	; 0x34
 800990a:	460c      	mov	r4, r1
 800990c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009910:	4616      	mov	r6, r2
 8009912:	461f      	mov	r7, r3
 8009914:	4605      	mov	r5, r0
 8009916:	f002 ff3d 	bl	800c794 <_localeconv_r>
 800991a:	f8d0 a000 	ldr.w	sl, [r0]
 800991e:	4650      	mov	r0, sl
 8009920:	f7f6 fc76 	bl	8000210 <strlen>
 8009924:	2300      	movs	r3, #0
 8009926:	930a      	str	r3, [sp, #40]	; 0x28
 8009928:	6823      	ldr	r3, [r4, #0]
 800992a:	9305      	str	r3, [sp, #20]
 800992c:	f8d8 3000 	ldr.w	r3, [r8]
 8009930:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009934:	3307      	adds	r3, #7
 8009936:	f023 0307 	bic.w	r3, r3, #7
 800993a:	f103 0208 	add.w	r2, r3, #8
 800993e:	f8c8 2000 	str.w	r2, [r8]
 8009942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009946:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800994a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800994e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009952:	9307      	str	r3, [sp, #28]
 8009954:	f8cd 8018 	str.w	r8, [sp, #24]
 8009958:	ee08 0a10 	vmov	s16, r0
 800995c:	4b9f      	ldr	r3, [pc, #636]	; (8009bdc <_printf_float+0x2dc>)
 800995e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009962:	f04f 32ff 	mov.w	r2, #4294967295
 8009966:	f7f7 f901 	bl	8000b6c <__aeabi_dcmpun>
 800996a:	bb88      	cbnz	r0, 80099d0 <_printf_float+0xd0>
 800996c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009970:	4b9a      	ldr	r3, [pc, #616]	; (8009bdc <_printf_float+0x2dc>)
 8009972:	f04f 32ff 	mov.w	r2, #4294967295
 8009976:	f7f7 f8db 	bl	8000b30 <__aeabi_dcmple>
 800997a:	bb48      	cbnz	r0, 80099d0 <_printf_float+0xd0>
 800997c:	2200      	movs	r2, #0
 800997e:	2300      	movs	r3, #0
 8009980:	4640      	mov	r0, r8
 8009982:	4649      	mov	r1, r9
 8009984:	f7f7 f8ca 	bl	8000b1c <__aeabi_dcmplt>
 8009988:	b110      	cbz	r0, 8009990 <_printf_float+0x90>
 800998a:	232d      	movs	r3, #45	; 0x2d
 800998c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009990:	4b93      	ldr	r3, [pc, #588]	; (8009be0 <_printf_float+0x2e0>)
 8009992:	4894      	ldr	r0, [pc, #592]	; (8009be4 <_printf_float+0x2e4>)
 8009994:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009998:	bf94      	ite	ls
 800999a:	4698      	movls	r8, r3
 800999c:	4680      	movhi	r8, r0
 800999e:	2303      	movs	r3, #3
 80099a0:	6123      	str	r3, [r4, #16]
 80099a2:	9b05      	ldr	r3, [sp, #20]
 80099a4:	f023 0204 	bic.w	r2, r3, #4
 80099a8:	6022      	str	r2, [r4, #0]
 80099aa:	f04f 0900 	mov.w	r9, #0
 80099ae:	9700      	str	r7, [sp, #0]
 80099b0:	4633      	mov	r3, r6
 80099b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80099b4:	4621      	mov	r1, r4
 80099b6:	4628      	mov	r0, r5
 80099b8:	f000 f9d8 	bl	8009d6c <_printf_common>
 80099bc:	3001      	adds	r0, #1
 80099be:	f040 8090 	bne.w	8009ae2 <_printf_float+0x1e2>
 80099c2:	f04f 30ff 	mov.w	r0, #4294967295
 80099c6:	b00d      	add	sp, #52	; 0x34
 80099c8:	ecbd 8b02 	vpop	{d8}
 80099cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d0:	4642      	mov	r2, r8
 80099d2:	464b      	mov	r3, r9
 80099d4:	4640      	mov	r0, r8
 80099d6:	4649      	mov	r1, r9
 80099d8:	f7f7 f8c8 	bl	8000b6c <__aeabi_dcmpun>
 80099dc:	b140      	cbz	r0, 80099f0 <_printf_float+0xf0>
 80099de:	464b      	mov	r3, r9
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	bfbc      	itt	lt
 80099e4:	232d      	movlt	r3, #45	; 0x2d
 80099e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099ea:	487f      	ldr	r0, [pc, #508]	; (8009be8 <_printf_float+0x2e8>)
 80099ec:	4b7f      	ldr	r3, [pc, #508]	; (8009bec <_printf_float+0x2ec>)
 80099ee:	e7d1      	b.n	8009994 <_printf_float+0x94>
 80099f0:	6863      	ldr	r3, [r4, #4]
 80099f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099f6:	9206      	str	r2, [sp, #24]
 80099f8:	1c5a      	adds	r2, r3, #1
 80099fa:	d13f      	bne.n	8009a7c <_printf_float+0x17c>
 80099fc:	2306      	movs	r3, #6
 80099fe:	6063      	str	r3, [r4, #4]
 8009a00:	9b05      	ldr	r3, [sp, #20]
 8009a02:	6861      	ldr	r1, [r4, #4]
 8009a04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a08:	2300      	movs	r3, #0
 8009a0a:	9303      	str	r3, [sp, #12]
 8009a0c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a12:	ab09      	add	r3, sp, #36	; 0x24
 8009a14:	ec49 8b10 	vmov	d0, r8, r9
 8009a18:	9300      	str	r3, [sp, #0]
 8009a1a:	6022      	str	r2, [r4, #0]
 8009a1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a20:	4628      	mov	r0, r5
 8009a22:	f7ff fecd 	bl	80097c0 <__cvt>
 8009a26:	9b06      	ldr	r3, [sp, #24]
 8009a28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a2a:	2b47      	cmp	r3, #71	; 0x47
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	d108      	bne.n	8009a42 <_printf_float+0x142>
 8009a30:	1cc8      	adds	r0, r1, #3
 8009a32:	db02      	blt.n	8009a3a <_printf_float+0x13a>
 8009a34:	6863      	ldr	r3, [r4, #4]
 8009a36:	4299      	cmp	r1, r3
 8009a38:	dd41      	ble.n	8009abe <_printf_float+0x1be>
 8009a3a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a3e:	fa5f fb8b 	uxtb.w	fp, fp
 8009a42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a46:	d820      	bhi.n	8009a8a <_printf_float+0x18a>
 8009a48:	3901      	subs	r1, #1
 8009a4a:	465a      	mov	r2, fp
 8009a4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a50:	9109      	str	r1, [sp, #36]	; 0x24
 8009a52:	f7ff ff17 	bl	8009884 <__exponent>
 8009a56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a58:	1813      	adds	r3, r2, r0
 8009a5a:	2a01      	cmp	r2, #1
 8009a5c:	4681      	mov	r9, r0
 8009a5e:	6123      	str	r3, [r4, #16]
 8009a60:	dc02      	bgt.n	8009a68 <_printf_float+0x168>
 8009a62:	6822      	ldr	r2, [r4, #0]
 8009a64:	07d2      	lsls	r2, r2, #31
 8009a66:	d501      	bpl.n	8009a6c <_printf_float+0x16c>
 8009a68:	3301      	adds	r3, #1
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d09c      	beq.n	80099ae <_printf_float+0xae>
 8009a74:	232d      	movs	r3, #45	; 0x2d
 8009a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a7a:	e798      	b.n	80099ae <_printf_float+0xae>
 8009a7c:	9a06      	ldr	r2, [sp, #24]
 8009a7e:	2a47      	cmp	r2, #71	; 0x47
 8009a80:	d1be      	bne.n	8009a00 <_printf_float+0x100>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1bc      	bne.n	8009a00 <_printf_float+0x100>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7b9      	b.n	80099fe <_printf_float+0xfe>
 8009a8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a8e:	d118      	bne.n	8009ac2 <_printf_float+0x1c2>
 8009a90:	2900      	cmp	r1, #0
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	dd0b      	ble.n	8009aae <_printf_float+0x1ae>
 8009a96:	6121      	str	r1, [r4, #16]
 8009a98:	b913      	cbnz	r3, 8009aa0 <_printf_float+0x1a0>
 8009a9a:	6822      	ldr	r2, [r4, #0]
 8009a9c:	07d0      	lsls	r0, r2, #31
 8009a9e:	d502      	bpl.n	8009aa6 <_printf_float+0x1a6>
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	440b      	add	r3, r1
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009aa8:	f04f 0900 	mov.w	r9, #0
 8009aac:	e7de      	b.n	8009a6c <_printf_float+0x16c>
 8009aae:	b913      	cbnz	r3, 8009ab6 <_printf_float+0x1b6>
 8009ab0:	6822      	ldr	r2, [r4, #0]
 8009ab2:	07d2      	lsls	r2, r2, #31
 8009ab4:	d501      	bpl.n	8009aba <_printf_float+0x1ba>
 8009ab6:	3302      	adds	r3, #2
 8009ab8:	e7f4      	b.n	8009aa4 <_printf_float+0x1a4>
 8009aba:	2301      	movs	r3, #1
 8009abc:	e7f2      	b.n	8009aa4 <_printf_float+0x1a4>
 8009abe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac4:	4299      	cmp	r1, r3
 8009ac6:	db05      	blt.n	8009ad4 <_printf_float+0x1d4>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	6121      	str	r1, [r4, #16]
 8009acc:	07d8      	lsls	r0, r3, #31
 8009ace:	d5ea      	bpl.n	8009aa6 <_printf_float+0x1a6>
 8009ad0:	1c4b      	adds	r3, r1, #1
 8009ad2:	e7e7      	b.n	8009aa4 <_printf_float+0x1a4>
 8009ad4:	2900      	cmp	r1, #0
 8009ad6:	bfd4      	ite	le
 8009ad8:	f1c1 0202 	rsble	r2, r1, #2
 8009adc:	2201      	movgt	r2, #1
 8009ade:	4413      	add	r3, r2
 8009ae0:	e7e0      	b.n	8009aa4 <_printf_float+0x1a4>
 8009ae2:	6823      	ldr	r3, [r4, #0]
 8009ae4:	055a      	lsls	r2, r3, #21
 8009ae6:	d407      	bmi.n	8009af8 <_printf_float+0x1f8>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	4642      	mov	r2, r8
 8009aec:	4631      	mov	r1, r6
 8009aee:	4628      	mov	r0, r5
 8009af0:	47b8      	blx	r7
 8009af2:	3001      	adds	r0, #1
 8009af4:	d12c      	bne.n	8009b50 <_printf_float+0x250>
 8009af6:	e764      	b.n	80099c2 <_printf_float+0xc2>
 8009af8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009afc:	f240 80e0 	bls.w	8009cc0 <_printf_float+0x3c0>
 8009b00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b04:	2200      	movs	r2, #0
 8009b06:	2300      	movs	r3, #0
 8009b08:	f7f6 fffe 	bl	8000b08 <__aeabi_dcmpeq>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	d034      	beq.n	8009b7a <_printf_float+0x27a>
 8009b10:	4a37      	ldr	r2, [pc, #220]	; (8009bf0 <_printf_float+0x2f0>)
 8009b12:	2301      	movs	r3, #1
 8009b14:	4631      	mov	r1, r6
 8009b16:	4628      	mov	r0, r5
 8009b18:	47b8      	blx	r7
 8009b1a:	3001      	adds	r0, #1
 8009b1c:	f43f af51 	beq.w	80099c2 <_printf_float+0xc2>
 8009b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b24:	429a      	cmp	r2, r3
 8009b26:	db02      	blt.n	8009b2e <_printf_float+0x22e>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	07d8      	lsls	r0, r3, #31
 8009b2c:	d510      	bpl.n	8009b50 <_printf_float+0x250>
 8009b2e:	ee18 3a10 	vmov	r3, s16
 8009b32:	4652      	mov	r2, sl
 8009b34:	4631      	mov	r1, r6
 8009b36:	4628      	mov	r0, r5
 8009b38:	47b8      	blx	r7
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	f43f af41 	beq.w	80099c2 <_printf_float+0xc2>
 8009b40:	f04f 0800 	mov.w	r8, #0
 8009b44:	f104 091a 	add.w	r9, r4, #26
 8009b48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	4543      	cmp	r3, r8
 8009b4e:	dc09      	bgt.n	8009b64 <_printf_float+0x264>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	079b      	lsls	r3, r3, #30
 8009b54:	f100 8105 	bmi.w	8009d62 <_printf_float+0x462>
 8009b58:	68e0      	ldr	r0, [r4, #12]
 8009b5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b5c:	4298      	cmp	r0, r3
 8009b5e:	bfb8      	it	lt
 8009b60:	4618      	movlt	r0, r3
 8009b62:	e730      	b.n	80099c6 <_printf_float+0xc6>
 8009b64:	2301      	movs	r3, #1
 8009b66:	464a      	mov	r2, r9
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	47b8      	blx	r7
 8009b6e:	3001      	adds	r0, #1
 8009b70:	f43f af27 	beq.w	80099c2 <_printf_float+0xc2>
 8009b74:	f108 0801 	add.w	r8, r8, #1
 8009b78:	e7e6      	b.n	8009b48 <_printf_float+0x248>
 8009b7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	dc39      	bgt.n	8009bf4 <_printf_float+0x2f4>
 8009b80:	4a1b      	ldr	r2, [pc, #108]	; (8009bf0 <_printf_float+0x2f0>)
 8009b82:	2301      	movs	r3, #1
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	f43f af19 	beq.w	80099c2 <_printf_float+0xc2>
 8009b90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b94:	4313      	orrs	r3, r2
 8009b96:	d102      	bne.n	8009b9e <_printf_float+0x29e>
 8009b98:	6823      	ldr	r3, [r4, #0]
 8009b9a:	07d9      	lsls	r1, r3, #31
 8009b9c:	d5d8      	bpl.n	8009b50 <_printf_float+0x250>
 8009b9e:	ee18 3a10 	vmov	r3, s16
 8009ba2:	4652      	mov	r2, sl
 8009ba4:	4631      	mov	r1, r6
 8009ba6:	4628      	mov	r0, r5
 8009ba8:	47b8      	blx	r7
 8009baa:	3001      	adds	r0, #1
 8009bac:	f43f af09 	beq.w	80099c2 <_printf_float+0xc2>
 8009bb0:	f04f 0900 	mov.w	r9, #0
 8009bb4:	f104 0a1a 	add.w	sl, r4, #26
 8009bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bba:	425b      	negs	r3, r3
 8009bbc:	454b      	cmp	r3, r9
 8009bbe:	dc01      	bgt.n	8009bc4 <_printf_float+0x2c4>
 8009bc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bc2:	e792      	b.n	8009aea <_printf_float+0x1ea>
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	4652      	mov	r2, sl
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f aef7 	beq.w	80099c2 <_printf_float+0xc2>
 8009bd4:	f109 0901 	add.w	r9, r9, #1
 8009bd8:	e7ee      	b.n	8009bb8 <_printf_float+0x2b8>
 8009bda:	bf00      	nop
 8009bdc:	7fefffff 	.word	0x7fefffff
 8009be0:	0800eb48 	.word	0x0800eb48
 8009be4:	0800eb4c 	.word	0x0800eb4c
 8009be8:	0800eb54 	.word	0x0800eb54
 8009bec:	0800eb50 	.word	0x0800eb50
 8009bf0:	0800ef49 	.word	0x0800ef49
 8009bf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	bfa8      	it	ge
 8009bfc:	461a      	movge	r2, r3
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	4691      	mov	r9, r2
 8009c02:	dc37      	bgt.n	8009c74 <_printf_float+0x374>
 8009c04:	f04f 0b00 	mov.w	fp, #0
 8009c08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c0c:	f104 021a 	add.w	r2, r4, #26
 8009c10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c12:	9305      	str	r3, [sp, #20]
 8009c14:	eba3 0309 	sub.w	r3, r3, r9
 8009c18:	455b      	cmp	r3, fp
 8009c1a:	dc33      	bgt.n	8009c84 <_printf_float+0x384>
 8009c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c20:	429a      	cmp	r2, r3
 8009c22:	db3b      	blt.n	8009c9c <_printf_float+0x39c>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	07da      	lsls	r2, r3, #31
 8009c28:	d438      	bmi.n	8009c9c <_printf_float+0x39c>
 8009c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c2c:	9a05      	ldr	r2, [sp, #20]
 8009c2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c30:	1a9a      	subs	r2, r3, r2
 8009c32:	eba3 0901 	sub.w	r9, r3, r1
 8009c36:	4591      	cmp	r9, r2
 8009c38:	bfa8      	it	ge
 8009c3a:	4691      	movge	r9, r2
 8009c3c:	f1b9 0f00 	cmp.w	r9, #0
 8009c40:	dc35      	bgt.n	8009cae <_printf_float+0x3ae>
 8009c42:	f04f 0800 	mov.w	r8, #0
 8009c46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c4a:	f104 0a1a 	add.w	sl, r4, #26
 8009c4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c52:	1a9b      	subs	r3, r3, r2
 8009c54:	eba3 0309 	sub.w	r3, r3, r9
 8009c58:	4543      	cmp	r3, r8
 8009c5a:	f77f af79 	ble.w	8009b50 <_printf_float+0x250>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4652      	mov	r2, sl
 8009c62:	4631      	mov	r1, r6
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b8      	blx	r7
 8009c68:	3001      	adds	r0, #1
 8009c6a:	f43f aeaa 	beq.w	80099c2 <_printf_float+0xc2>
 8009c6e:	f108 0801 	add.w	r8, r8, #1
 8009c72:	e7ec      	b.n	8009c4e <_printf_float+0x34e>
 8009c74:	4613      	mov	r3, r2
 8009c76:	4631      	mov	r1, r6
 8009c78:	4642      	mov	r2, r8
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d1c0      	bne.n	8009c04 <_printf_float+0x304>
 8009c82:	e69e      	b.n	80099c2 <_printf_float+0xc2>
 8009c84:	2301      	movs	r3, #1
 8009c86:	4631      	mov	r1, r6
 8009c88:	4628      	mov	r0, r5
 8009c8a:	9205      	str	r2, [sp, #20]
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	f43f ae97 	beq.w	80099c2 <_printf_float+0xc2>
 8009c94:	9a05      	ldr	r2, [sp, #20]
 8009c96:	f10b 0b01 	add.w	fp, fp, #1
 8009c9a:	e7b9      	b.n	8009c10 <_printf_float+0x310>
 8009c9c:	ee18 3a10 	vmov	r3, s16
 8009ca0:	4652      	mov	r2, sl
 8009ca2:	4631      	mov	r1, r6
 8009ca4:	4628      	mov	r0, r5
 8009ca6:	47b8      	blx	r7
 8009ca8:	3001      	adds	r0, #1
 8009caa:	d1be      	bne.n	8009c2a <_printf_float+0x32a>
 8009cac:	e689      	b.n	80099c2 <_printf_float+0xc2>
 8009cae:	9a05      	ldr	r2, [sp, #20]
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	4442      	add	r2, r8
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	d1c1      	bne.n	8009c42 <_printf_float+0x342>
 8009cbe:	e680      	b.n	80099c2 <_printf_float+0xc2>
 8009cc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cc2:	2a01      	cmp	r2, #1
 8009cc4:	dc01      	bgt.n	8009cca <_printf_float+0x3ca>
 8009cc6:	07db      	lsls	r3, r3, #31
 8009cc8:	d538      	bpl.n	8009d3c <_printf_float+0x43c>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	4642      	mov	r2, r8
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	f43f ae74 	beq.w	80099c2 <_printf_float+0xc2>
 8009cda:	ee18 3a10 	vmov	r3, s16
 8009cde:	4652      	mov	r2, sl
 8009ce0:	4631      	mov	r1, r6
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	47b8      	blx	r7
 8009ce6:	3001      	adds	r0, #1
 8009ce8:	f43f ae6b 	beq.w	80099c2 <_printf_float+0xc2>
 8009cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	f7f6 ff08 	bl	8000b08 <__aeabi_dcmpeq>
 8009cf8:	b9d8      	cbnz	r0, 8009d32 <_printf_float+0x432>
 8009cfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cfc:	f108 0201 	add.w	r2, r8, #1
 8009d00:	3b01      	subs	r3, #1
 8009d02:	4631      	mov	r1, r6
 8009d04:	4628      	mov	r0, r5
 8009d06:	47b8      	blx	r7
 8009d08:	3001      	adds	r0, #1
 8009d0a:	d10e      	bne.n	8009d2a <_printf_float+0x42a>
 8009d0c:	e659      	b.n	80099c2 <_printf_float+0xc2>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4652      	mov	r2, sl
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f43f ae52 	beq.w	80099c2 <_printf_float+0xc2>
 8009d1e:	f108 0801 	add.w	r8, r8, #1
 8009d22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d24:	3b01      	subs	r3, #1
 8009d26:	4543      	cmp	r3, r8
 8009d28:	dcf1      	bgt.n	8009d0e <_printf_float+0x40e>
 8009d2a:	464b      	mov	r3, r9
 8009d2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d30:	e6dc      	b.n	8009aec <_printf_float+0x1ec>
 8009d32:	f04f 0800 	mov.w	r8, #0
 8009d36:	f104 0a1a 	add.w	sl, r4, #26
 8009d3a:	e7f2      	b.n	8009d22 <_printf_float+0x422>
 8009d3c:	2301      	movs	r3, #1
 8009d3e:	4642      	mov	r2, r8
 8009d40:	e7df      	b.n	8009d02 <_printf_float+0x402>
 8009d42:	2301      	movs	r3, #1
 8009d44:	464a      	mov	r2, r9
 8009d46:	4631      	mov	r1, r6
 8009d48:	4628      	mov	r0, r5
 8009d4a:	47b8      	blx	r7
 8009d4c:	3001      	adds	r0, #1
 8009d4e:	f43f ae38 	beq.w	80099c2 <_printf_float+0xc2>
 8009d52:	f108 0801 	add.w	r8, r8, #1
 8009d56:	68e3      	ldr	r3, [r4, #12]
 8009d58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d5a:	1a5b      	subs	r3, r3, r1
 8009d5c:	4543      	cmp	r3, r8
 8009d5e:	dcf0      	bgt.n	8009d42 <_printf_float+0x442>
 8009d60:	e6fa      	b.n	8009b58 <_printf_float+0x258>
 8009d62:	f04f 0800 	mov.w	r8, #0
 8009d66:	f104 0919 	add.w	r9, r4, #25
 8009d6a:	e7f4      	b.n	8009d56 <_printf_float+0x456>

08009d6c <_printf_common>:
 8009d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d70:	4616      	mov	r6, r2
 8009d72:	4699      	mov	r9, r3
 8009d74:	688a      	ldr	r2, [r1, #8]
 8009d76:	690b      	ldr	r3, [r1, #16]
 8009d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	bfb8      	it	lt
 8009d80:	4613      	movlt	r3, r2
 8009d82:	6033      	str	r3, [r6, #0]
 8009d84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d88:	4607      	mov	r7, r0
 8009d8a:	460c      	mov	r4, r1
 8009d8c:	b10a      	cbz	r2, 8009d92 <_printf_common+0x26>
 8009d8e:	3301      	adds	r3, #1
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	0699      	lsls	r1, r3, #26
 8009d96:	bf42      	ittt	mi
 8009d98:	6833      	ldrmi	r3, [r6, #0]
 8009d9a:	3302      	addmi	r3, #2
 8009d9c:	6033      	strmi	r3, [r6, #0]
 8009d9e:	6825      	ldr	r5, [r4, #0]
 8009da0:	f015 0506 	ands.w	r5, r5, #6
 8009da4:	d106      	bne.n	8009db4 <_printf_common+0x48>
 8009da6:	f104 0a19 	add.w	sl, r4, #25
 8009daa:	68e3      	ldr	r3, [r4, #12]
 8009dac:	6832      	ldr	r2, [r6, #0]
 8009dae:	1a9b      	subs	r3, r3, r2
 8009db0:	42ab      	cmp	r3, r5
 8009db2:	dc26      	bgt.n	8009e02 <_printf_common+0x96>
 8009db4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009db8:	1e13      	subs	r3, r2, #0
 8009dba:	6822      	ldr	r2, [r4, #0]
 8009dbc:	bf18      	it	ne
 8009dbe:	2301      	movne	r3, #1
 8009dc0:	0692      	lsls	r2, r2, #26
 8009dc2:	d42b      	bmi.n	8009e1c <_printf_common+0xb0>
 8009dc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dc8:	4649      	mov	r1, r9
 8009dca:	4638      	mov	r0, r7
 8009dcc:	47c0      	blx	r8
 8009dce:	3001      	adds	r0, #1
 8009dd0:	d01e      	beq.n	8009e10 <_printf_common+0xa4>
 8009dd2:	6823      	ldr	r3, [r4, #0]
 8009dd4:	68e5      	ldr	r5, [r4, #12]
 8009dd6:	6832      	ldr	r2, [r6, #0]
 8009dd8:	f003 0306 	and.w	r3, r3, #6
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	bf08      	it	eq
 8009de0:	1aad      	subeq	r5, r5, r2
 8009de2:	68a3      	ldr	r3, [r4, #8]
 8009de4:	6922      	ldr	r2, [r4, #16]
 8009de6:	bf0c      	ite	eq
 8009de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dec:	2500      	movne	r5, #0
 8009dee:	4293      	cmp	r3, r2
 8009df0:	bfc4      	itt	gt
 8009df2:	1a9b      	subgt	r3, r3, r2
 8009df4:	18ed      	addgt	r5, r5, r3
 8009df6:	2600      	movs	r6, #0
 8009df8:	341a      	adds	r4, #26
 8009dfa:	42b5      	cmp	r5, r6
 8009dfc:	d11a      	bne.n	8009e34 <_printf_common+0xc8>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	e008      	b.n	8009e14 <_printf_common+0xa8>
 8009e02:	2301      	movs	r3, #1
 8009e04:	4652      	mov	r2, sl
 8009e06:	4649      	mov	r1, r9
 8009e08:	4638      	mov	r0, r7
 8009e0a:	47c0      	blx	r8
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d103      	bne.n	8009e18 <_printf_common+0xac>
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295
 8009e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e18:	3501      	adds	r5, #1
 8009e1a:	e7c6      	b.n	8009daa <_printf_common+0x3e>
 8009e1c:	18e1      	adds	r1, r4, r3
 8009e1e:	1c5a      	adds	r2, r3, #1
 8009e20:	2030      	movs	r0, #48	; 0x30
 8009e22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e26:	4422      	add	r2, r4
 8009e28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e30:	3302      	adds	r3, #2
 8009e32:	e7c7      	b.n	8009dc4 <_printf_common+0x58>
 8009e34:	2301      	movs	r3, #1
 8009e36:	4622      	mov	r2, r4
 8009e38:	4649      	mov	r1, r9
 8009e3a:	4638      	mov	r0, r7
 8009e3c:	47c0      	blx	r8
 8009e3e:	3001      	adds	r0, #1
 8009e40:	d0e6      	beq.n	8009e10 <_printf_common+0xa4>
 8009e42:	3601      	adds	r6, #1
 8009e44:	e7d9      	b.n	8009dfa <_printf_common+0x8e>
	...

08009e48 <_printf_i>:
 8009e48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e4c:	7e0f      	ldrb	r7, [r1, #24]
 8009e4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e50:	2f78      	cmp	r7, #120	; 0x78
 8009e52:	4691      	mov	r9, r2
 8009e54:	4680      	mov	r8, r0
 8009e56:	460c      	mov	r4, r1
 8009e58:	469a      	mov	sl, r3
 8009e5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e5e:	d807      	bhi.n	8009e70 <_printf_i+0x28>
 8009e60:	2f62      	cmp	r7, #98	; 0x62
 8009e62:	d80a      	bhi.n	8009e7a <_printf_i+0x32>
 8009e64:	2f00      	cmp	r7, #0
 8009e66:	f000 80d8 	beq.w	800a01a <_printf_i+0x1d2>
 8009e6a:	2f58      	cmp	r7, #88	; 0x58
 8009e6c:	f000 80a3 	beq.w	8009fb6 <_printf_i+0x16e>
 8009e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e78:	e03a      	b.n	8009ef0 <_printf_i+0xa8>
 8009e7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e7e:	2b15      	cmp	r3, #21
 8009e80:	d8f6      	bhi.n	8009e70 <_printf_i+0x28>
 8009e82:	a101      	add	r1, pc, #4	; (adr r1, 8009e88 <_printf_i+0x40>)
 8009e84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e88:	08009ee1 	.word	0x08009ee1
 8009e8c:	08009ef5 	.word	0x08009ef5
 8009e90:	08009e71 	.word	0x08009e71
 8009e94:	08009e71 	.word	0x08009e71
 8009e98:	08009e71 	.word	0x08009e71
 8009e9c:	08009e71 	.word	0x08009e71
 8009ea0:	08009ef5 	.word	0x08009ef5
 8009ea4:	08009e71 	.word	0x08009e71
 8009ea8:	08009e71 	.word	0x08009e71
 8009eac:	08009e71 	.word	0x08009e71
 8009eb0:	08009e71 	.word	0x08009e71
 8009eb4:	0800a001 	.word	0x0800a001
 8009eb8:	08009f25 	.word	0x08009f25
 8009ebc:	08009fe3 	.word	0x08009fe3
 8009ec0:	08009e71 	.word	0x08009e71
 8009ec4:	08009e71 	.word	0x08009e71
 8009ec8:	0800a023 	.word	0x0800a023
 8009ecc:	08009e71 	.word	0x08009e71
 8009ed0:	08009f25 	.word	0x08009f25
 8009ed4:	08009e71 	.word	0x08009e71
 8009ed8:	08009e71 	.word	0x08009e71
 8009edc:	08009feb 	.word	0x08009feb
 8009ee0:	682b      	ldr	r3, [r5, #0]
 8009ee2:	1d1a      	adds	r2, r3, #4
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	602a      	str	r2, [r5, #0]
 8009ee8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ef0:	2301      	movs	r3, #1
 8009ef2:	e0a3      	b.n	800a03c <_printf_i+0x1f4>
 8009ef4:	6820      	ldr	r0, [r4, #0]
 8009ef6:	6829      	ldr	r1, [r5, #0]
 8009ef8:	0606      	lsls	r6, r0, #24
 8009efa:	f101 0304 	add.w	r3, r1, #4
 8009efe:	d50a      	bpl.n	8009f16 <_printf_i+0xce>
 8009f00:	680e      	ldr	r6, [r1, #0]
 8009f02:	602b      	str	r3, [r5, #0]
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	da03      	bge.n	8009f10 <_printf_i+0xc8>
 8009f08:	232d      	movs	r3, #45	; 0x2d
 8009f0a:	4276      	negs	r6, r6
 8009f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f10:	485e      	ldr	r0, [pc, #376]	; (800a08c <_printf_i+0x244>)
 8009f12:	230a      	movs	r3, #10
 8009f14:	e019      	b.n	8009f4a <_printf_i+0x102>
 8009f16:	680e      	ldr	r6, [r1, #0]
 8009f18:	602b      	str	r3, [r5, #0]
 8009f1a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f1e:	bf18      	it	ne
 8009f20:	b236      	sxthne	r6, r6
 8009f22:	e7ef      	b.n	8009f04 <_printf_i+0xbc>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	6820      	ldr	r0, [r4, #0]
 8009f28:	1d19      	adds	r1, r3, #4
 8009f2a:	6029      	str	r1, [r5, #0]
 8009f2c:	0601      	lsls	r1, r0, #24
 8009f2e:	d501      	bpl.n	8009f34 <_printf_i+0xec>
 8009f30:	681e      	ldr	r6, [r3, #0]
 8009f32:	e002      	b.n	8009f3a <_printf_i+0xf2>
 8009f34:	0646      	lsls	r6, r0, #25
 8009f36:	d5fb      	bpl.n	8009f30 <_printf_i+0xe8>
 8009f38:	881e      	ldrh	r6, [r3, #0]
 8009f3a:	4854      	ldr	r0, [pc, #336]	; (800a08c <_printf_i+0x244>)
 8009f3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f3e:	bf0c      	ite	eq
 8009f40:	2308      	moveq	r3, #8
 8009f42:	230a      	movne	r3, #10
 8009f44:	2100      	movs	r1, #0
 8009f46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f4a:	6865      	ldr	r5, [r4, #4]
 8009f4c:	60a5      	str	r5, [r4, #8]
 8009f4e:	2d00      	cmp	r5, #0
 8009f50:	bfa2      	ittt	ge
 8009f52:	6821      	ldrge	r1, [r4, #0]
 8009f54:	f021 0104 	bicge.w	r1, r1, #4
 8009f58:	6021      	strge	r1, [r4, #0]
 8009f5a:	b90e      	cbnz	r6, 8009f60 <_printf_i+0x118>
 8009f5c:	2d00      	cmp	r5, #0
 8009f5e:	d04d      	beq.n	8009ffc <_printf_i+0x1b4>
 8009f60:	4615      	mov	r5, r2
 8009f62:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f66:	fb03 6711 	mls	r7, r3, r1, r6
 8009f6a:	5dc7      	ldrb	r7, [r0, r7]
 8009f6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f70:	4637      	mov	r7, r6
 8009f72:	42bb      	cmp	r3, r7
 8009f74:	460e      	mov	r6, r1
 8009f76:	d9f4      	bls.n	8009f62 <_printf_i+0x11a>
 8009f78:	2b08      	cmp	r3, #8
 8009f7a:	d10b      	bne.n	8009f94 <_printf_i+0x14c>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	07de      	lsls	r6, r3, #31
 8009f80:	d508      	bpl.n	8009f94 <_printf_i+0x14c>
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	6861      	ldr	r1, [r4, #4]
 8009f86:	4299      	cmp	r1, r3
 8009f88:	bfde      	ittt	le
 8009f8a:	2330      	movle	r3, #48	; 0x30
 8009f8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f90:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f94:	1b52      	subs	r2, r2, r5
 8009f96:	6122      	str	r2, [r4, #16]
 8009f98:	f8cd a000 	str.w	sl, [sp]
 8009f9c:	464b      	mov	r3, r9
 8009f9e:	aa03      	add	r2, sp, #12
 8009fa0:	4621      	mov	r1, r4
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	f7ff fee2 	bl	8009d6c <_printf_common>
 8009fa8:	3001      	adds	r0, #1
 8009faa:	d14c      	bne.n	800a046 <_printf_i+0x1fe>
 8009fac:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb0:	b004      	add	sp, #16
 8009fb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fb6:	4835      	ldr	r0, [pc, #212]	; (800a08c <_printf_i+0x244>)
 8009fb8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fbc:	6829      	ldr	r1, [r5, #0]
 8009fbe:	6823      	ldr	r3, [r4, #0]
 8009fc0:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fc4:	6029      	str	r1, [r5, #0]
 8009fc6:	061d      	lsls	r5, r3, #24
 8009fc8:	d514      	bpl.n	8009ff4 <_printf_i+0x1ac>
 8009fca:	07df      	lsls	r7, r3, #31
 8009fcc:	bf44      	itt	mi
 8009fce:	f043 0320 	orrmi.w	r3, r3, #32
 8009fd2:	6023      	strmi	r3, [r4, #0]
 8009fd4:	b91e      	cbnz	r6, 8009fde <_printf_i+0x196>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	f023 0320 	bic.w	r3, r3, #32
 8009fdc:	6023      	str	r3, [r4, #0]
 8009fde:	2310      	movs	r3, #16
 8009fe0:	e7b0      	b.n	8009f44 <_printf_i+0xfc>
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	f043 0320 	orr.w	r3, r3, #32
 8009fe8:	6023      	str	r3, [r4, #0]
 8009fea:	2378      	movs	r3, #120	; 0x78
 8009fec:	4828      	ldr	r0, [pc, #160]	; (800a090 <_printf_i+0x248>)
 8009fee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ff2:	e7e3      	b.n	8009fbc <_printf_i+0x174>
 8009ff4:	0659      	lsls	r1, r3, #25
 8009ff6:	bf48      	it	mi
 8009ff8:	b2b6      	uxthmi	r6, r6
 8009ffa:	e7e6      	b.n	8009fca <_printf_i+0x182>
 8009ffc:	4615      	mov	r5, r2
 8009ffe:	e7bb      	b.n	8009f78 <_printf_i+0x130>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	6826      	ldr	r6, [r4, #0]
 800a004:	6961      	ldr	r1, [r4, #20]
 800a006:	1d18      	adds	r0, r3, #4
 800a008:	6028      	str	r0, [r5, #0]
 800a00a:	0635      	lsls	r5, r6, #24
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	d501      	bpl.n	800a014 <_printf_i+0x1cc>
 800a010:	6019      	str	r1, [r3, #0]
 800a012:	e002      	b.n	800a01a <_printf_i+0x1d2>
 800a014:	0670      	lsls	r0, r6, #25
 800a016:	d5fb      	bpl.n	800a010 <_printf_i+0x1c8>
 800a018:	8019      	strh	r1, [r3, #0]
 800a01a:	2300      	movs	r3, #0
 800a01c:	6123      	str	r3, [r4, #16]
 800a01e:	4615      	mov	r5, r2
 800a020:	e7ba      	b.n	8009f98 <_printf_i+0x150>
 800a022:	682b      	ldr	r3, [r5, #0]
 800a024:	1d1a      	adds	r2, r3, #4
 800a026:	602a      	str	r2, [r5, #0]
 800a028:	681d      	ldr	r5, [r3, #0]
 800a02a:	6862      	ldr	r2, [r4, #4]
 800a02c:	2100      	movs	r1, #0
 800a02e:	4628      	mov	r0, r5
 800a030:	f7f6 f8f6 	bl	8000220 <memchr>
 800a034:	b108      	cbz	r0, 800a03a <_printf_i+0x1f2>
 800a036:	1b40      	subs	r0, r0, r5
 800a038:	6060      	str	r0, [r4, #4]
 800a03a:	6863      	ldr	r3, [r4, #4]
 800a03c:	6123      	str	r3, [r4, #16]
 800a03e:	2300      	movs	r3, #0
 800a040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a044:	e7a8      	b.n	8009f98 <_printf_i+0x150>
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	462a      	mov	r2, r5
 800a04a:	4649      	mov	r1, r9
 800a04c:	4640      	mov	r0, r8
 800a04e:	47d0      	blx	sl
 800a050:	3001      	adds	r0, #1
 800a052:	d0ab      	beq.n	8009fac <_printf_i+0x164>
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	079b      	lsls	r3, r3, #30
 800a058:	d413      	bmi.n	800a082 <_printf_i+0x23a>
 800a05a:	68e0      	ldr	r0, [r4, #12]
 800a05c:	9b03      	ldr	r3, [sp, #12]
 800a05e:	4298      	cmp	r0, r3
 800a060:	bfb8      	it	lt
 800a062:	4618      	movlt	r0, r3
 800a064:	e7a4      	b.n	8009fb0 <_printf_i+0x168>
 800a066:	2301      	movs	r3, #1
 800a068:	4632      	mov	r2, r6
 800a06a:	4649      	mov	r1, r9
 800a06c:	4640      	mov	r0, r8
 800a06e:	47d0      	blx	sl
 800a070:	3001      	adds	r0, #1
 800a072:	d09b      	beq.n	8009fac <_printf_i+0x164>
 800a074:	3501      	adds	r5, #1
 800a076:	68e3      	ldr	r3, [r4, #12]
 800a078:	9903      	ldr	r1, [sp, #12]
 800a07a:	1a5b      	subs	r3, r3, r1
 800a07c:	42ab      	cmp	r3, r5
 800a07e:	dcf2      	bgt.n	800a066 <_printf_i+0x21e>
 800a080:	e7eb      	b.n	800a05a <_printf_i+0x212>
 800a082:	2500      	movs	r5, #0
 800a084:	f104 0619 	add.w	r6, r4, #25
 800a088:	e7f5      	b.n	800a076 <_printf_i+0x22e>
 800a08a:	bf00      	nop
 800a08c:	0800eb58 	.word	0x0800eb58
 800a090:	0800eb69 	.word	0x0800eb69

0800a094 <_scanf_float>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	b087      	sub	sp, #28
 800a09a:	4617      	mov	r7, r2
 800a09c:	9303      	str	r3, [sp, #12]
 800a09e:	688b      	ldr	r3, [r1, #8]
 800a0a0:	1e5a      	subs	r2, r3, #1
 800a0a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0a6:	bf83      	ittte	hi
 800a0a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0ac:	195b      	addhi	r3, r3, r5
 800a0ae:	9302      	strhi	r3, [sp, #8]
 800a0b0:	2300      	movls	r3, #0
 800a0b2:	bf86      	itte	hi
 800a0b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0b8:	608b      	strhi	r3, [r1, #8]
 800a0ba:	9302      	strls	r3, [sp, #8]
 800a0bc:	680b      	ldr	r3, [r1, #0]
 800a0be:	468b      	mov	fp, r1
 800a0c0:	2500      	movs	r5, #0
 800a0c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0c6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a0ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0ce:	4680      	mov	r8, r0
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	465e      	mov	r6, fp
 800a0d4:	46aa      	mov	sl, r5
 800a0d6:	46a9      	mov	r9, r5
 800a0d8:	9501      	str	r5, [sp, #4]
 800a0da:	68a2      	ldr	r2, [r4, #8]
 800a0dc:	b152      	cbz	r2, 800a0f4 <_scanf_float+0x60>
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	2b4e      	cmp	r3, #78	; 0x4e
 800a0e4:	d864      	bhi.n	800a1b0 <_scanf_float+0x11c>
 800a0e6:	2b40      	cmp	r3, #64	; 0x40
 800a0e8:	d83c      	bhi.n	800a164 <_scanf_float+0xd0>
 800a0ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a0ee:	b2c8      	uxtb	r0, r1
 800a0f0:	280e      	cmp	r0, #14
 800a0f2:	d93a      	bls.n	800a16a <_scanf_float+0xd6>
 800a0f4:	f1b9 0f00 	cmp.w	r9, #0
 800a0f8:	d003      	beq.n	800a102 <_scanf_float+0x6e>
 800a0fa:	6823      	ldr	r3, [r4, #0]
 800a0fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a106:	f1ba 0f01 	cmp.w	sl, #1
 800a10a:	f200 8113 	bhi.w	800a334 <_scanf_float+0x2a0>
 800a10e:	455e      	cmp	r6, fp
 800a110:	f200 8105 	bhi.w	800a31e <_scanf_float+0x28a>
 800a114:	2501      	movs	r5, #1
 800a116:	4628      	mov	r0, r5
 800a118:	b007      	add	sp, #28
 800a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a122:	2a0d      	cmp	r2, #13
 800a124:	d8e6      	bhi.n	800a0f4 <_scanf_float+0x60>
 800a126:	a101      	add	r1, pc, #4	; (adr r1, 800a12c <_scanf_float+0x98>)
 800a128:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a12c:	0800a26b 	.word	0x0800a26b
 800a130:	0800a0f5 	.word	0x0800a0f5
 800a134:	0800a0f5 	.word	0x0800a0f5
 800a138:	0800a0f5 	.word	0x0800a0f5
 800a13c:	0800a2cb 	.word	0x0800a2cb
 800a140:	0800a2a3 	.word	0x0800a2a3
 800a144:	0800a0f5 	.word	0x0800a0f5
 800a148:	0800a0f5 	.word	0x0800a0f5
 800a14c:	0800a279 	.word	0x0800a279
 800a150:	0800a0f5 	.word	0x0800a0f5
 800a154:	0800a0f5 	.word	0x0800a0f5
 800a158:	0800a0f5 	.word	0x0800a0f5
 800a15c:	0800a0f5 	.word	0x0800a0f5
 800a160:	0800a231 	.word	0x0800a231
 800a164:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a168:	e7db      	b.n	800a122 <_scanf_float+0x8e>
 800a16a:	290e      	cmp	r1, #14
 800a16c:	d8c2      	bhi.n	800a0f4 <_scanf_float+0x60>
 800a16e:	a001      	add	r0, pc, #4	; (adr r0, 800a174 <_scanf_float+0xe0>)
 800a170:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a174:	0800a223 	.word	0x0800a223
 800a178:	0800a0f5 	.word	0x0800a0f5
 800a17c:	0800a223 	.word	0x0800a223
 800a180:	0800a2b7 	.word	0x0800a2b7
 800a184:	0800a0f5 	.word	0x0800a0f5
 800a188:	0800a1d1 	.word	0x0800a1d1
 800a18c:	0800a20d 	.word	0x0800a20d
 800a190:	0800a20d 	.word	0x0800a20d
 800a194:	0800a20d 	.word	0x0800a20d
 800a198:	0800a20d 	.word	0x0800a20d
 800a19c:	0800a20d 	.word	0x0800a20d
 800a1a0:	0800a20d 	.word	0x0800a20d
 800a1a4:	0800a20d 	.word	0x0800a20d
 800a1a8:	0800a20d 	.word	0x0800a20d
 800a1ac:	0800a20d 	.word	0x0800a20d
 800a1b0:	2b6e      	cmp	r3, #110	; 0x6e
 800a1b2:	d809      	bhi.n	800a1c8 <_scanf_float+0x134>
 800a1b4:	2b60      	cmp	r3, #96	; 0x60
 800a1b6:	d8b2      	bhi.n	800a11e <_scanf_float+0x8a>
 800a1b8:	2b54      	cmp	r3, #84	; 0x54
 800a1ba:	d077      	beq.n	800a2ac <_scanf_float+0x218>
 800a1bc:	2b59      	cmp	r3, #89	; 0x59
 800a1be:	d199      	bne.n	800a0f4 <_scanf_float+0x60>
 800a1c0:	2d07      	cmp	r5, #7
 800a1c2:	d197      	bne.n	800a0f4 <_scanf_float+0x60>
 800a1c4:	2508      	movs	r5, #8
 800a1c6:	e029      	b.n	800a21c <_scanf_float+0x188>
 800a1c8:	2b74      	cmp	r3, #116	; 0x74
 800a1ca:	d06f      	beq.n	800a2ac <_scanf_float+0x218>
 800a1cc:	2b79      	cmp	r3, #121	; 0x79
 800a1ce:	e7f6      	b.n	800a1be <_scanf_float+0x12a>
 800a1d0:	6821      	ldr	r1, [r4, #0]
 800a1d2:	05c8      	lsls	r0, r1, #23
 800a1d4:	d51a      	bpl.n	800a20c <_scanf_float+0x178>
 800a1d6:	9b02      	ldr	r3, [sp, #8]
 800a1d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1dc:	6021      	str	r1, [r4, #0]
 800a1de:	f109 0901 	add.w	r9, r9, #1
 800a1e2:	b11b      	cbz	r3, 800a1ec <_scanf_float+0x158>
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	3201      	adds	r2, #1
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	60a2      	str	r2, [r4, #8]
 800a1ec:	68a3      	ldr	r3, [r4, #8]
 800a1ee:	3b01      	subs	r3, #1
 800a1f0:	60a3      	str	r3, [r4, #8]
 800a1f2:	6923      	ldr	r3, [r4, #16]
 800a1f4:	3301      	adds	r3, #1
 800a1f6:	6123      	str	r3, [r4, #16]
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	607b      	str	r3, [r7, #4]
 800a200:	f340 8084 	ble.w	800a30c <_scanf_float+0x278>
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	3301      	adds	r3, #1
 800a208:	603b      	str	r3, [r7, #0]
 800a20a:	e766      	b.n	800a0da <_scanf_float+0x46>
 800a20c:	eb1a 0f05 	cmn.w	sl, r5
 800a210:	f47f af70 	bne.w	800a0f4 <_scanf_float+0x60>
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a21a:	6022      	str	r2, [r4, #0]
 800a21c:	f806 3b01 	strb.w	r3, [r6], #1
 800a220:	e7e4      	b.n	800a1ec <_scanf_float+0x158>
 800a222:	6822      	ldr	r2, [r4, #0]
 800a224:	0610      	lsls	r0, r2, #24
 800a226:	f57f af65 	bpl.w	800a0f4 <_scanf_float+0x60>
 800a22a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a22e:	e7f4      	b.n	800a21a <_scanf_float+0x186>
 800a230:	f1ba 0f00 	cmp.w	sl, #0
 800a234:	d10e      	bne.n	800a254 <_scanf_float+0x1c0>
 800a236:	f1b9 0f00 	cmp.w	r9, #0
 800a23a:	d10e      	bne.n	800a25a <_scanf_float+0x1c6>
 800a23c:	6822      	ldr	r2, [r4, #0]
 800a23e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a242:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a246:	d108      	bne.n	800a25a <_scanf_float+0x1c6>
 800a248:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a24c:	6022      	str	r2, [r4, #0]
 800a24e:	f04f 0a01 	mov.w	sl, #1
 800a252:	e7e3      	b.n	800a21c <_scanf_float+0x188>
 800a254:	f1ba 0f02 	cmp.w	sl, #2
 800a258:	d055      	beq.n	800a306 <_scanf_float+0x272>
 800a25a:	2d01      	cmp	r5, #1
 800a25c:	d002      	beq.n	800a264 <_scanf_float+0x1d0>
 800a25e:	2d04      	cmp	r5, #4
 800a260:	f47f af48 	bne.w	800a0f4 <_scanf_float+0x60>
 800a264:	3501      	adds	r5, #1
 800a266:	b2ed      	uxtb	r5, r5
 800a268:	e7d8      	b.n	800a21c <_scanf_float+0x188>
 800a26a:	f1ba 0f01 	cmp.w	sl, #1
 800a26e:	f47f af41 	bne.w	800a0f4 <_scanf_float+0x60>
 800a272:	f04f 0a02 	mov.w	sl, #2
 800a276:	e7d1      	b.n	800a21c <_scanf_float+0x188>
 800a278:	b97d      	cbnz	r5, 800a29a <_scanf_float+0x206>
 800a27a:	f1b9 0f00 	cmp.w	r9, #0
 800a27e:	f47f af3c 	bne.w	800a0fa <_scanf_float+0x66>
 800a282:	6822      	ldr	r2, [r4, #0]
 800a284:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a288:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a28c:	f47f af39 	bne.w	800a102 <_scanf_float+0x6e>
 800a290:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a294:	6022      	str	r2, [r4, #0]
 800a296:	2501      	movs	r5, #1
 800a298:	e7c0      	b.n	800a21c <_scanf_float+0x188>
 800a29a:	2d03      	cmp	r5, #3
 800a29c:	d0e2      	beq.n	800a264 <_scanf_float+0x1d0>
 800a29e:	2d05      	cmp	r5, #5
 800a2a0:	e7de      	b.n	800a260 <_scanf_float+0x1cc>
 800a2a2:	2d02      	cmp	r5, #2
 800a2a4:	f47f af26 	bne.w	800a0f4 <_scanf_float+0x60>
 800a2a8:	2503      	movs	r5, #3
 800a2aa:	e7b7      	b.n	800a21c <_scanf_float+0x188>
 800a2ac:	2d06      	cmp	r5, #6
 800a2ae:	f47f af21 	bne.w	800a0f4 <_scanf_float+0x60>
 800a2b2:	2507      	movs	r5, #7
 800a2b4:	e7b2      	b.n	800a21c <_scanf_float+0x188>
 800a2b6:	6822      	ldr	r2, [r4, #0]
 800a2b8:	0591      	lsls	r1, r2, #22
 800a2ba:	f57f af1b 	bpl.w	800a0f4 <_scanf_float+0x60>
 800a2be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a2c2:	6022      	str	r2, [r4, #0]
 800a2c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2c8:	e7a8      	b.n	800a21c <_scanf_float+0x188>
 800a2ca:	6822      	ldr	r2, [r4, #0]
 800a2cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a2d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2d4:	d006      	beq.n	800a2e4 <_scanf_float+0x250>
 800a2d6:	0550      	lsls	r0, r2, #21
 800a2d8:	f57f af0c 	bpl.w	800a0f4 <_scanf_float+0x60>
 800a2dc:	f1b9 0f00 	cmp.w	r9, #0
 800a2e0:	f43f af0f 	beq.w	800a102 <_scanf_float+0x6e>
 800a2e4:	0591      	lsls	r1, r2, #22
 800a2e6:	bf58      	it	pl
 800a2e8:	9901      	ldrpl	r1, [sp, #4]
 800a2ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2ee:	bf58      	it	pl
 800a2f0:	eba9 0101 	subpl.w	r1, r9, r1
 800a2f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a2f8:	bf58      	it	pl
 800a2fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a2fe:	6022      	str	r2, [r4, #0]
 800a300:	f04f 0900 	mov.w	r9, #0
 800a304:	e78a      	b.n	800a21c <_scanf_float+0x188>
 800a306:	f04f 0a03 	mov.w	sl, #3
 800a30a:	e787      	b.n	800a21c <_scanf_float+0x188>
 800a30c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a310:	4639      	mov	r1, r7
 800a312:	4640      	mov	r0, r8
 800a314:	4798      	blx	r3
 800a316:	2800      	cmp	r0, #0
 800a318:	f43f aedf 	beq.w	800a0da <_scanf_float+0x46>
 800a31c:	e6ea      	b.n	800a0f4 <_scanf_float+0x60>
 800a31e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a322:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a326:	463a      	mov	r2, r7
 800a328:	4640      	mov	r0, r8
 800a32a:	4798      	blx	r3
 800a32c:	6923      	ldr	r3, [r4, #16]
 800a32e:	3b01      	subs	r3, #1
 800a330:	6123      	str	r3, [r4, #16]
 800a332:	e6ec      	b.n	800a10e <_scanf_float+0x7a>
 800a334:	1e6b      	subs	r3, r5, #1
 800a336:	2b06      	cmp	r3, #6
 800a338:	d825      	bhi.n	800a386 <_scanf_float+0x2f2>
 800a33a:	2d02      	cmp	r5, #2
 800a33c:	d836      	bhi.n	800a3ac <_scanf_float+0x318>
 800a33e:	455e      	cmp	r6, fp
 800a340:	f67f aee8 	bls.w	800a114 <_scanf_float+0x80>
 800a344:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a348:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a34c:	463a      	mov	r2, r7
 800a34e:	4640      	mov	r0, r8
 800a350:	4798      	blx	r3
 800a352:	6923      	ldr	r3, [r4, #16]
 800a354:	3b01      	subs	r3, #1
 800a356:	6123      	str	r3, [r4, #16]
 800a358:	e7f1      	b.n	800a33e <_scanf_float+0x2aa>
 800a35a:	9802      	ldr	r0, [sp, #8]
 800a35c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a360:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a364:	9002      	str	r0, [sp, #8]
 800a366:	463a      	mov	r2, r7
 800a368:	4640      	mov	r0, r8
 800a36a:	4798      	blx	r3
 800a36c:	6923      	ldr	r3, [r4, #16]
 800a36e:	3b01      	subs	r3, #1
 800a370:	6123      	str	r3, [r4, #16]
 800a372:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a376:	fa5f fa8a 	uxtb.w	sl, sl
 800a37a:	f1ba 0f02 	cmp.w	sl, #2
 800a37e:	d1ec      	bne.n	800a35a <_scanf_float+0x2c6>
 800a380:	3d03      	subs	r5, #3
 800a382:	b2ed      	uxtb	r5, r5
 800a384:	1b76      	subs	r6, r6, r5
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	05da      	lsls	r2, r3, #23
 800a38a:	d52f      	bpl.n	800a3ec <_scanf_float+0x358>
 800a38c:	055b      	lsls	r3, r3, #21
 800a38e:	d510      	bpl.n	800a3b2 <_scanf_float+0x31e>
 800a390:	455e      	cmp	r6, fp
 800a392:	f67f aebf 	bls.w	800a114 <_scanf_float+0x80>
 800a396:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a39a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a39e:	463a      	mov	r2, r7
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	4798      	blx	r3
 800a3a4:	6923      	ldr	r3, [r4, #16]
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	6123      	str	r3, [r4, #16]
 800a3aa:	e7f1      	b.n	800a390 <_scanf_float+0x2fc>
 800a3ac:	46aa      	mov	sl, r5
 800a3ae:	9602      	str	r6, [sp, #8]
 800a3b0:	e7df      	b.n	800a372 <_scanf_float+0x2de>
 800a3b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3b6:	6923      	ldr	r3, [r4, #16]
 800a3b8:	2965      	cmp	r1, #101	; 0x65
 800a3ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3be:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3c2:	6123      	str	r3, [r4, #16]
 800a3c4:	d00c      	beq.n	800a3e0 <_scanf_float+0x34c>
 800a3c6:	2945      	cmp	r1, #69	; 0x45
 800a3c8:	d00a      	beq.n	800a3e0 <_scanf_float+0x34c>
 800a3ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3ce:	463a      	mov	r2, r7
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	4798      	blx	r3
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3da:	3b01      	subs	r3, #1
 800a3dc:	1eb5      	subs	r5, r6, #2
 800a3de:	6123      	str	r3, [r4, #16]
 800a3e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3e4:	463a      	mov	r2, r7
 800a3e6:	4640      	mov	r0, r8
 800a3e8:	4798      	blx	r3
 800a3ea:	462e      	mov	r6, r5
 800a3ec:	6825      	ldr	r5, [r4, #0]
 800a3ee:	f015 0510 	ands.w	r5, r5, #16
 800a3f2:	d159      	bne.n	800a4a8 <_scanf_float+0x414>
 800a3f4:	7035      	strb	r5, [r6, #0]
 800a3f6:	6823      	ldr	r3, [r4, #0]
 800a3f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a3fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a400:	d11b      	bne.n	800a43a <_scanf_float+0x3a6>
 800a402:	9b01      	ldr	r3, [sp, #4]
 800a404:	454b      	cmp	r3, r9
 800a406:	eba3 0209 	sub.w	r2, r3, r9
 800a40a:	d123      	bne.n	800a454 <_scanf_float+0x3c0>
 800a40c:	2200      	movs	r2, #0
 800a40e:	4659      	mov	r1, fp
 800a410:	4640      	mov	r0, r8
 800a412:	f000 ff27 	bl	800b264 <_strtod_r>
 800a416:	6822      	ldr	r2, [r4, #0]
 800a418:	9b03      	ldr	r3, [sp, #12]
 800a41a:	f012 0f02 	tst.w	r2, #2
 800a41e:	ec57 6b10 	vmov	r6, r7, d0
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	d021      	beq.n	800a46a <_scanf_float+0x3d6>
 800a426:	9903      	ldr	r1, [sp, #12]
 800a428:	1d1a      	adds	r2, r3, #4
 800a42a:	600a      	str	r2, [r1, #0]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	e9c3 6700 	strd	r6, r7, [r3]
 800a432:	68e3      	ldr	r3, [r4, #12]
 800a434:	3301      	adds	r3, #1
 800a436:	60e3      	str	r3, [r4, #12]
 800a438:	e66d      	b.n	800a116 <_scanf_float+0x82>
 800a43a:	9b04      	ldr	r3, [sp, #16]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0e5      	beq.n	800a40c <_scanf_float+0x378>
 800a440:	9905      	ldr	r1, [sp, #20]
 800a442:	230a      	movs	r3, #10
 800a444:	462a      	mov	r2, r5
 800a446:	3101      	adds	r1, #1
 800a448:	4640      	mov	r0, r8
 800a44a:	f000 ff93 	bl	800b374 <_strtol_r>
 800a44e:	9b04      	ldr	r3, [sp, #16]
 800a450:	9e05      	ldr	r6, [sp, #20]
 800a452:	1ac2      	subs	r2, r0, r3
 800a454:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a458:	429e      	cmp	r6, r3
 800a45a:	bf28      	it	cs
 800a45c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a460:	4912      	ldr	r1, [pc, #72]	; (800a4ac <_scanf_float+0x418>)
 800a462:	4630      	mov	r0, r6
 800a464:	f000 f82c 	bl	800a4c0 <siprintf>
 800a468:	e7d0      	b.n	800a40c <_scanf_float+0x378>
 800a46a:	9903      	ldr	r1, [sp, #12]
 800a46c:	f012 0f04 	tst.w	r2, #4
 800a470:	f103 0204 	add.w	r2, r3, #4
 800a474:	600a      	str	r2, [r1, #0]
 800a476:	d1d9      	bne.n	800a42c <_scanf_float+0x398>
 800a478:	f8d3 8000 	ldr.w	r8, [r3]
 800a47c:	ee10 2a10 	vmov	r2, s0
 800a480:	ee10 0a10 	vmov	r0, s0
 800a484:	463b      	mov	r3, r7
 800a486:	4639      	mov	r1, r7
 800a488:	f7f6 fb70 	bl	8000b6c <__aeabi_dcmpun>
 800a48c:	b128      	cbz	r0, 800a49a <_scanf_float+0x406>
 800a48e:	4808      	ldr	r0, [pc, #32]	; (800a4b0 <_scanf_float+0x41c>)
 800a490:	f000 f810 	bl	800a4b4 <nanf>
 800a494:	ed88 0a00 	vstr	s0, [r8]
 800a498:	e7cb      	b.n	800a432 <_scanf_float+0x39e>
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 fbc3 	bl	8000c28 <__aeabi_d2f>
 800a4a2:	f8c8 0000 	str.w	r0, [r8]
 800a4a6:	e7c4      	b.n	800a432 <_scanf_float+0x39e>
 800a4a8:	2500      	movs	r5, #0
 800a4aa:	e634      	b.n	800a116 <_scanf_float+0x82>
 800a4ac:	0800eb7a 	.word	0x0800eb7a
 800a4b0:	0800ef9b 	.word	0x0800ef9b

0800a4b4 <nanf>:
 800a4b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4bc <nanf+0x8>
 800a4b8:	4770      	bx	lr
 800a4ba:	bf00      	nop
 800a4bc:	7fc00000 	.word	0x7fc00000

0800a4c0 <siprintf>:
 800a4c0:	b40e      	push	{r1, r2, r3}
 800a4c2:	b500      	push	{lr}
 800a4c4:	b09c      	sub	sp, #112	; 0x70
 800a4c6:	ab1d      	add	r3, sp, #116	; 0x74
 800a4c8:	9002      	str	r0, [sp, #8]
 800a4ca:	9006      	str	r0, [sp, #24]
 800a4cc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a4d0:	4809      	ldr	r0, [pc, #36]	; (800a4f8 <siprintf+0x38>)
 800a4d2:	9107      	str	r1, [sp, #28]
 800a4d4:	9104      	str	r1, [sp, #16]
 800a4d6:	4909      	ldr	r1, [pc, #36]	; (800a4fc <siprintf+0x3c>)
 800a4d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4dc:	9105      	str	r1, [sp, #20]
 800a4de:	6800      	ldr	r0, [r0, #0]
 800a4e0:	9301      	str	r3, [sp, #4]
 800a4e2:	a902      	add	r1, sp, #8
 800a4e4:	f002 ffa8 	bl	800d438 <_svfiprintf_r>
 800a4e8:	9b02      	ldr	r3, [sp, #8]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	701a      	strb	r2, [r3, #0]
 800a4ee:	b01c      	add	sp, #112	; 0x70
 800a4f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a4f4:	b003      	add	sp, #12
 800a4f6:	4770      	bx	lr
 800a4f8:	20000024 	.word	0x20000024
 800a4fc:	ffff0208 	.word	0xffff0208

0800a500 <siscanf>:
 800a500:	b40e      	push	{r1, r2, r3}
 800a502:	b510      	push	{r4, lr}
 800a504:	b09f      	sub	sp, #124	; 0x7c
 800a506:	ac21      	add	r4, sp, #132	; 0x84
 800a508:	f44f 7101 	mov.w	r1, #516	; 0x204
 800a50c:	f854 2b04 	ldr.w	r2, [r4], #4
 800a510:	9201      	str	r2, [sp, #4]
 800a512:	f8ad 101c 	strh.w	r1, [sp, #28]
 800a516:	9004      	str	r0, [sp, #16]
 800a518:	9008      	str	r0, [sp, #32]
 800a51a:	f7f5 fe79 	bl	8000210 <strlen>
 800a51e:	4b0c      	ldr	r3, [pc, #48]	; (800a550 <siscanf+0x50>)
 800a520:	9005      	str	r0, [sp, #20]
 800a522:	9009      	str	r0, [sp, #36]	; 0x24
 800a524:	930d      	str	r3, [sp, #52]	; 0x34
 800a526:	480b      	ldr	r0, [pc, #44]	; (800a554 <siscanf+0x54>)
 800a528:	9a01      	ldr	r2, [sp, #4]
 800a52a:	6800      	ldr	r0, [r0, #0]
 800a52c:	9403      	str	r4, [sp, #12]
 800a52e:	2300      	movs	r3, #0
 800a530:	9311      	str	r3, [sp, #68]	; 0x44
 800a532:	9316      	str	r3, [sp, #88]	; 0x58
 800a534:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a538:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a53c:	a904      	add	r1, sp, #16
 800a53e:	4623      	mov	r3, r4
 800a540:	f003 f8d4 	bl	800d6ec <__ssvfiscanf_r>
 800a544:	b01f      	add	sp, #124	; 0x7c
 800a546:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a54a:	b003      	add	sp, #12
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	0800a57b 	.word	0x0800a57b
 800a554:	20000024 	.word	0x20000024

0800a558 <__sread>:
 800a558:	b510      	push	{r4, lr}
 800a55a:	460c      	mov	r4, r1
 800a55c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a560:	f003 fb8e 	bl	800dc80 <_read_r>
 800a564:	2800      	cmp	r0, #0
 800a566:	bfab      	itete	ge
 800a568:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a56a:	89a3      	ldrhlt	r3, [r4, #12]
 800a56c:	181b      	addge	r3, r3, r0
 800a56e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a572:	bfac      	ite	ge
 800a574:	6563      	strge	r3, [r4, #84]	; 0x54
 800a576:	81a3      	strhlt	r3, [r4, #12]
 800a578:	bd10      	pop	{r4, pc}

0800a57a <__seofread>:
 800a57a:	2000      	movs	r0, #0
 800a57c:	4770      	bx	lr

0800a57e <__swrite>:
 800a57e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a582:	461f      	mov	r7, r3
 800a584:	898b      	ldrh	r3, [r1, #12]
 800a586:	05db      	lsls	r3, r3, #23
 800a588:	4605      	mov	r5, r0
 800a58a:	460c      	mov	r4, r1
 800a58c:	4616      	mov	r6, r2
 800a58e:	d505      	bpl.n	800a59c <__swrite+0x1e>
 800a590:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a594:	2302      	movs	r3, #2
 800a596:	2200      	movs	r2, #0
 800a598:	f002 f900 	bl	800c79c <_lseek_r>
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a5a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a5a6:	81a3      	strh	r3, [r4, #12]
 800a5a8:	4632      	mov	r2, r6
 800a5aa:	463b      	mov	r3, r7
 800a5ac:	4628      	mov	r0, r5
 800a5ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b2:	f000 bee1 	b.w	800b378 <_write_r>

0800a5b6 <__sseek>:
 800a5b6:	b510      	push	{r4, lr}
 800a5b8:	460c      	mov	r4, r1
 800a5ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5be:	f002 f8ed 	bl	800c79c <_lseek_r>
 800a5c2:	1c43      	adds	r3, r0, #1
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	bf15      	itete	ne
 800a5c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5d2:	81a3      	strheq	r3, [r4, #12]
 800a5d4:	bf18      	it	ne
 800a5d6:	81a3      	strhne	r3, [r4, #12]
 800a5d8:	bd10      	pop	{r4, pc}

0800a5da <__sclose>:
 800a5da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5de:	f000 bedd 	b.w	800b39c <_close_r>

0800a5e2 <strcpy>:
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5e8:	f803 2b01 	strb.w	r2, [r3], #1
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	d1f9      	bne.n	800a5e4 <strcpy+0x2>
 800a5f0:	4770      	bx	lr

0800a5f2 <strstr>:
 800a5f2:	780a      	ldrb	r2, [r1, #0]
 800a5f4:	b570      	push	{r4, r5, r6, lr}
 800a5f6:	b96a      	cbnz	r2, 800a614 <strstr+0x22>
 800a5f8:	bd70      	pop	{r4, r5, r6, pc}
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d109      	bne.n	800a612 <strstr+0x20>
 800a5fe:	460c      	mov	r4, r1
 800a600:	4605      	mov	r5, r0
 800a602:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a606:	2b00      	cmp	r3, #0
 800a608:	d0f6      	beq.n	800a5f8 <strstr+0x6>
 800a60a:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a60e:	429e      	cmp	r6, r3
 800a610:	d0f7      	beq.n	800a602 <strstr+0x10>
 800a612:	3001      	adds	r0, #1
 800a614:	7803      	ldrb	r3, [r0, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d1ef      	bne.n	800a5fa <strstr+0x8>
 800a61a:	4618      	mov	r0, r3
 800a61c:	e7ec      	b.n	800a5f8 <strstr+0x6>

0800a61e <sulp>:
 800a61e:	b570      	push	{r4, r5, r6, lr}
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
 800a624:	ec45 4b10 	vmov	d0, r4, r5
 800a628:	4616      	mov	r6, r2
 800a62a:	f002 fc63 	bl	800cef4 <__ulp>
 800a62e:	ec51 0b10 	vmov	r0, r1, d0
 800a632:	b17e      	cbz	r6, 800a654 <sulp+0x36>
 800a634:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a638:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	dd09      	ble.n	800a654 <sulp+0x36>
 800a640:	051b      	lsls	r3, r3, #20
 800a642:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a646:	2400      	movs	r4, #0
 800a648:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a64c:	4622      	mov	r2, r4
 800a64e:	462b      	mov	r3, r5
 800a650:	f7f5 fff2 	bl	8000638 <__aeabi_dmul>
 800a654:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a658 <_strtod_l>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	ed2d 8b02 	vpush	{d8}
 800a660:	b09d      	sub	sp, #116	; 0x74
 800a662:	461f      	mov	r7, r3
 800a664:	2300      	movs	r3, #0
 800a666:	9318      	str	r3, [sp, #96]	; 0x60
 800a668:	4ba2      	ldr	r3, [pc, #648]	; (800a8f4 <_strtod_l+0x29c>)
 800a66a:	9213      	str	r2, [sp, #76]	; 0x4c
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	9305      	str	r3, [sp, #20]
 800a670:	4604      	mov	r4, r0
 800a672:	4618      	mov	r0, r3
 800a674:	4688      	mov	r8, r1
 800a676:	f7f5 fdcb 	bl	8000210 <strlen>
 800a67a:	f04f 0a00 	mov.w	sl, #0
 800a67e:	4605      	mov	r5, r0
 800a680:	f04f 0b00 	mov.w	fp, #0
 800a684:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a68a:	781a      	ldrb	r2, [r3, #0]
 800a68c:	2a2b      	cmp	r2, #43	; 0x2b
 800a68e:	d04e      	beq.n	800a72e <_strtod_l+0xd6>
 800a690:	d83b      	bhi.n	800a70a <_strtod_l+0xb2>
 800a692:	2a0d      	cmp	r2, #13
 800a694:	d834      	bhi.n	800a700 <_strtod_l+0xa8>
 800a696:	2a08      	cmp	r2, #8
 800a698:	d834      	bhi.n	800a704 <_strtod_l+0xac>
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	d03e      	beq.n	800a71c <_strtod_l+0xc4>
 800a69e:	2300      	movs	r3, #0
 800a6a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a6a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a6a4:	7833      	ldrb	r3, [r6, #0]
 800a6a6:	2b30      	cmp	r3, #48	; 0x30
 800a6a8:	f040 80b0 	bne.w	800a80c <_strtod_l+0x1b4>
 800a6ac:	7873      	ldrb	r3, [r6, #1]
 800a6ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a6b2:	2b58      	cmp	r3, #88	; 0x58
 800a6b4:	d168      	bne.n	800a788 <_strtod_l+0x130>
 800a6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	ab18      	add	r3, sp, #96	; 0x60
 800a6bc:	9702      	str	r7, [sp, #8]
 800a6be:	9300      	str	r3, [sp, #0]
 800a6c0:	4a8d      	ldr	r2, [pc, #564]	; (800a8f8 <_strtod_l+0x2a0>)
 800a6c2:	ab19      	add	r3, sp, #100	; 0x64
 800a6c4:	a917      	add	r1, sp, #92	; 0x5c
 800a6c6:	4620      	mov	r0, r4
 800a6c8:	f001 fd5c 	bl	800c184 <__gethex>
 800a6cc:	f010 0707 	ands.w	r7, r0, #7
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	d005      	beq.n	800a6e0 <_strtod_l+0x88>
 800a6d4:	2f06      	cmp	r7, #6
 800a6d6:	d12c      	bne.n	800a732 <_strtod_l+0xda>
 800a6d8:	3601      	adds	r6, #1
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9617      	str	r6, [sp, #92]	; 0x5c
 800a6de:	930a      	str	r3, [sp, #40]	; 0x28
 800a6e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f040 8590 	bne.w	800b208 <_strtod_l+0xbb0>
 800a6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6ea:	b1eb      	cbz	r3, 800a728 <_strtod_l+0xd0>
 800a6ec:	4652      	mov	r2, sl
 800a6ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6f2:	ec43 2b10 	vmov	d0, r2, r3
 800a6f6:	b01d      	add	sp, #116	; 0x74
 800a6f8:	ecbd 8b02 	vpop	{d8}
 800a6fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a700:	2a20      	cmp	r2, #32
 800a702:	d1cc      	bne.n	800a69e <_strtod_l+0x46>
 800a704:	3301      	adds	r3, #1
 800a706:	9317      	str	r3, [sp, #92]	; 0x5c
 800a708:	e7be      	b.n	800a688 <_strtod_l+0x30>
 800a70a:	2a2d      	cmp	r2, #45	; 0x2d
 800a70c:	d1c7      	bne.n	800a69e <_strtod_l+0x46>
 800a70e:	2201      	movs	r2, #1
 800a710:	920a      	str	r2, [sp, #40]	; 0x28
 800a712:	1c5a      	adds	r2, r3, #1
 800a714:	9217      	str	r2, [sp, #92]	; 0x5c
 800a716:	785b      	ldrb	r3, [r3, #1]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1c2      	bne.n	800a6a2 <_strtod_l+0x4a>
 800a71c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a71e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a722:	2b00      	cmp	r3, #0
 800a724:	f040 856e 	bne.w	800b204 <_strtod_l+0xbac>
 800a728:	4652      	mov	r2, sl
 800a72a:	465b      	mov	r3, fp
 800a72c:	e7e1      	b.n	800a6f2 <_strtod_l+0x9a>
 800a72e:	2200      	movs	r2, #0
 800a730:	e7ee      	b.n	800a710 <_strtod_l+0xb8>
 800a732:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a734:	b13a      	cbz	r2, 800a746 <_strtod_l+0xee>
 800a736:	2135      	movs	r1, #53	; 0x35
 800a738:	a81a      	add	r0, sp, #104	; 0x68
 800a73a:	f002 fce6 	bl	800d10a <__copybits>
 800a73e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a740:	4620      	mov	r0, r4
 800a742:	f002 f8a5 	bl	800c890 <_Bfree>
 800a746:	3f01      	subs	r7, #1
 800a748:	2f04      	cmp	r7, #4
 800a74a:	d806      	bhi.n	800a75a <_strtod_l+0x102>
 800a74c:	e8df f007 	tbb	[pc, r7]
 800a750:	1714030a 	.word	0x1714030a
 800a754:	0a          	.byte	0x0a
 800a755:	00          	.byte	0x00
 800a756:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a75a:	0728      	lsls	r0, r5, #28
 800a75c:	d5c0      	bpl.n	800a6e0 <_strtod_l+0x88>
 800a75e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a762:	e7bd      	b.n	800a6e0 <_strtod_l+0x88>
 800a764:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a768:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a76a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a76e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a772:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a776:	e7f0      	b.n	800a75a <_strtod_l+0x102>
 800a778:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a8fc <_strtod_l+0x2a4>
 800a77c:	e7ed      	b.n	800a75a <_strtod_l+0x102>
 800a77e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a782:	f04f 3aff 	mov.w	sl, #4294967295
 800a786:	e7e8      	b.n	800a75a <_strtod_l+0x102>
 800a788:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a78a:	1c5a      	adds	r2, r3, #1
 800a78c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b30      	cmp	r3, #48	; 0x30
 800a792:	d0f9      	beq.n	800a788 <_strtod_l+0x130>
 800a794:	2b00      	cmp	r3, #0
 800a796:	d0a3      	beq.n	800a6e0 <_strtod_l+0x88>
 800a798:	2301      	movs	r3, #1
 800a79a:	f04f 0900 	mov.w	r9, #0
 800a79e:	9304      	str	r3, [sp, #16]
 800a7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a7a2:	9308      	str	r3, [sp, #32]
 800a7a4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a7a8:	464f      	mov	r7, r9
 800a7aa:	220a      	movs	r2, #10
 800a7ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a7ae:	7806      	ldrb	r6, [r0, #0]
 800a7b0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a7b4:	b2d9      	uxtb	r1, r3
 800a7b6:	2909      	cmp	r1, #9
 800a7b8:	d92a      	bls.n	800a810 <_strtod_l+0x1b8>
 800a7ba:	9905      	ldr	r1, [sp, #20]
 800a7bc:	462a      	mov	r2, r5
 800a7be:	f003 fac3 	bl	800dd48 <strncmp>
 800a7c2:	b398      	cbz	r0, 800a82c <_strtod_l+0x1d4>
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	4632      	mov	r2, r6
 800a7c8:	463d      	mov	r5, r7
 800a7ca:	9005      	str	r0, [sp, #20]
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2a65      	cmp	r2, #101	; 0x65
 800a7d0:	d001      	beq.n	800a7d6 <_strtod_l+0x17e>
 800a7d2:	2a45      	cmp	r2, #69	; 0x45
 800a7d4:	d118      	bne.n	800a808 <_strtod_l+0x1b0>
 800a7d6:	b91d      	cbnz	r5, 800a7e0 <_strtod_l+0x188>
 800a7d8:	9a04      	ldr	r2, [sp, #16]
 800a7da:	4302      	orrs	r2, r0
 800a7dc:	d09e      	beq.n	800a71c <_strtod_l+0xc4>
 800a7de:	2500      	movs	r5, #0
 800a7e0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a7e4:	f108 0201 	add.w	r2, r8, #1
 800a7e8:	9217      	str	r2, [sp, #92]	; 0x5c
 800a7ea:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a7ee:	2a2b      	cmp	r2, #43	; 0x2b
 800a7f0:	d075      	beq.n	800a8de <_strtod_l+0x286>
 800a7f2:	2a2d      	cmp	r2, #45	; 0x2d
 800a7f4:	d07b      	beq.n	800a8ee <_strtod_l+0x296>
 800a7f6:	f04f 0c00 	mov.w	ip, #0
 800a7fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a7fe:	2909      	cmp	r1, #9
 800a800:	f240 8082 	bls.w	800a908 <_strtod_l+0x2b0>
 800a804:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a808:	2600      	movs	r6, #0
 800a80a:	e09d      	b.n	800a948 <_strtod_l+0x2f0>
 800a80c:	2300      	movs	r3, #0
 800a80e:	e7c4      	b.n	800a79a <_strtod_l+0x142>
 800a810:	2f08      	cmp	r7, #8
 800a812:	bfd8      	it	le
 800a814:	9907      	ldrle	r1, [sp, #28]
 800a816:	f100 0001 	add.w	r0, r0, #1
 800a81a:	bfda      	itte	le
 800a81c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a820:	9307      	strle	r3, [sp, #28]
 800a822:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a826:	3701      	adds	r7, #1
 800a828:	9017      	str	r0, [sp, #92]	; 0x5c
 800a82a:	e7bf      	b.n	800a7ac <_strtod_l+0x154>
 800a82c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a82e:	195a      	adds	r2, r3, r5
 800a830:	9217      	str	r2, [sp, #92]	; 0x5c
 800a832:	5d5a      	ldrb	r2, [r3, r5]
 800a834:	2f00      	cmp	r7, #0
 800a836:	d037      	beq.n	800a8a8 <_strtod_l+0x250>
 800a838:	9005      	str	r0, [sp, #20]
 800a83a:	463d      	mov	r5, r7
 800a83c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a840:	2b09      	cmp	r3, #9
 800a842:	d912      	bls.n	800a86a <_strtod_l+0x212>
 800a844:	2301      	movs	r3, #1
 800a846:	e7c2      	b.n	800a7ce <_strtod_l+0x176>
 800a848:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a84e:	785a      	ldrb	r2, [r3, #1]
 800a850:	3001      	adds	r0, #1
 800a852:	2a30      	cmp	r2, #48	; 0x30
 800a854:	d0f8      	beq.n	800a848 <_strtod_l+0x1f0>
 800a856:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a85a:	2b08      	cmp	r3, #8
 800a85c:	f200 84d9 	bhi.w	800b212 <_strtod_l+0xbba>
 800a860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a862:	9005      	str	r0, [sp, #20]
 800a864:	2000      	movs	r0, #0
 800a866:	9308      	str	r3, [sp, #32]
 800a868:	4605      	mov	r5, r0
 800a86a:	3a30      	subs	r2, #48	; 0x30
 800a86c:	f100 0301 	add.w	r3, r0, #1
 800a870:	d014      	beq.n	800a89c <_strtod_l+0x244>
 800a872:	9905      	ldr	r1, [sp, #20]
 800a874:	4419      	add	r1, r3
 800a876:	9105      	str	r1, [sp, #20]
 800a878:	462b      	mov	r3, r5
 800a87a:	eb00 0e05 	add.w	lr, r0, r5
 800a87e:	210a      	movs	r1, #10
 800a880:	4573      	cmp	r3, lr
 800a882:	d113      	bne.n	800a8ac <_strtod_l+0x254>
 800a884:	182b      	adds	r3, r5, r0
 800a886:	2b08      	cmp	r3, #8
 800a888:	f105 0501 	add.w	r5, r5, #1
 800a88c:	4405      	add	r5, r0
 800a88e:	dc1c      	bgt.n	800a8ca <_strtod_l+0x272>
 800a890:	9907      	ldr	r1, [sp, #28]
 800a892:	230a      	movs	r3, #10
 800a894:	fb03 2301 	mla	r3, r3, r1, r2
 800a898:	9307      	str	r3, [sp, #28]
 800a89a:	2300      	movs	r3, #0
 800a89c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a89e:	1c51      	adds	r1, r2, #1
 800a8a0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a8a2:	7852      	ldrb	r2, [r2, #1]
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	e7c9      	b.n	800a83c <_strtod_l+0x1e4>
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	e7d2      	b.n	800a852 <_strtod_l+0x1fa>
 800a8ac:	2b08      	cmp	r3, #8
 800a8ae:	dc04      	bgt.n	800a8ba <_strtod_l+0x262>
 800a8b0:	9e07      	ldr	r6, [sp, #28]
 800a8b2:	434e      	muls	r6, r1
 800a8b4:	9607      	str	r6, [sp, #28]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	e7e2      	b.n	800a880 <_strtod_l+0x228>
 800a8ba:	f103 0c01 	add.w	ip, r3, #1
 800a8be:	f1bc 0f10 	cmp.w	ip, #16
 800a8c2:	bfd8      	it	le
 800a8c4:	fb01 f909 	mulle.w	r9, r1, r9
 800a8c8:	e7f5      	b.n	800a8b6 <_strtod_l+0x25e>
 800a8ca:	2d10      	cmp	r5, #16
 800a8cc:	bfdc      	itt	le
 800a8ce:	230a      	movle	r3, #10
 800a8d0:	fb03 2909 	mlale	r9, r3, r9, r2
 800a8d4:	e7e1      	b.n	800a89a <_strtod_l+0x242>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	9305      	str	r3, [sp, #20]
 800a8da:	2301      	movs	r3, #1
 800a8dc:	e77c      	b.n	800a7d8 <_strtod_l+0x180>
 800a8de:	f04f 0c00 	mov.w	ip, #0
 800a8e2:	f108 0202 	add.w	r2, r8, #2
 800a8e6:	9217      	str	r2, [sp, #92]	; 0x5c
 800a8e8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a8ec:	e785      	b.n	800a7fa <_strtod_l+0x1a2>
 800a8ee:	f04f 0c01 	mov.w	ip, #1
 800a8f2:	e7f6      	b.n	800a8e2 <_strtod_l+0x28a>
 800a8f4:	0800edc8 	.word	0x0800edc8
 800a8f8:	0800eb80 	.word	0x0800eb80
 800a8fc:	7ff00000 	.word	0x7ff00000
 800a900:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a902:	1c51      	adds	r1, r2, #1
 800a904:	9117      	str	r1, [sp, #92]	; 0x5c
 800a906:	7852      	ldrb	r2, [r2, #1]
 800a908:	2a30      	cmp	r2, #48	; 0x30
 800a90a:	d0f9      	beq.n	800a900 <_strtod_l+0x2a8>
 800a90c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a910:	2908      	cmp	r1, #8
 800a912:	f63f af79 	bhi.w	800a808 <_strtod_l+0x1b0>
 800a916:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a91a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a91c:	9206      	str	r2, [sp, #24]
 800a91e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a920:	1c51      	adds	r1, r2, #1
 800a922:	9117      	str	r1, [sp, #92]	; 0x5c
 800a924:	7852      	ldrb	r2, [r2, #1]
 800a926:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a92a:	2e09      	cmp	r6, #9
 800a92c:	d937      	bls.n	800a99e <_strtod_l+0x346>
 800a92e:	9e06      	ldr	r6, [sp, #24]
 800a930:	1b89      	subs	r1, r1, r6
 800a932:	2908      	cmp	r1, #8
 800a934:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a938:	dc02      	bgt.n	800a940 <_strtod_l+0x2e8>
 800a93a:	4576      	cmp	r6, lr
 800a93c:	bfa8      	it	ge
 800a93e:	4676      	movge	r6, lr
 800a940:	f1bc 0f00 	cmp.w	ip, #0
 800a944:	d000      	beq.n	800a948 <_strtod_l+0x2f0>
 800a946:	4276      	negs	r6, r6
 800a948:	2d00      	cmp	r5, #0
 800a94a:	d14d      	bne.n	800a9e8 <_strtod_l+0x390>
 800a94c:	9904      	ldr	r1, [sp, #16]
 800a94e:	4301      	orrs	r1, r0
 800a950:	f47f aec6 	bne.w	800a6e0 <_strtod_l+0x88>
 800a954:	2b00      	cmp	r3, #0
 800a956:	f47f aee1 	bne.w	800a71c <_strtod_l+0xc4>
 800a95a:	2a69      	cmp	r2, #105	; 0x69
 800a95c:	d027      	beq.n	800a9ae <_strtod_l+0x356>
 800a95e:	dc24      	bgt.n	800a9aa <_strtod_l+0x352>
 800a960:	2a49      	cmp	r2, #73	; 0x49
 800a962:	d024      	beq.n	800a9ae <_strtod_l+0x356>
 800a964:	2a4e      	cmp	r2, #78	; 0x4e
 800a966:	f47f aed9 	bne.w	800a71c <_strtod_l+0xc4>
 800a96a:	499f      	ldr	r1, [pc, #636]	; (800abe8 <_strtod_l+0x590>)
 800a96c:	a817      	add	r0, sp, #92	; 0x5c
 800a96e:	f001 fe61 	bl	800c634 <__match>
 800a972:	2800      	cmp	r0, #0
 800a974:	f43f aed2 	beq.w	800a71c <_strtod_l+0xc4>
 800a978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b28      	cmp	r3, #40	; 0x28
 800a97e:	d12d      	bne.n	800a9dc <_strtod_l+0x384>
 800a980:	499a      	ldr	r1, [pc, #616]	; (800abec <_strtod_l+0x594>)
 800a982:	aa1a      	add	r2, sp, #104	; 0x68
 800a984:	a817      	add	r0, sp, #92	; 0x5c
 800a986:	f001 fe69 	bl	800c65c <__hexnan>
 800a98a:	2805      	cmp	r0, #5
 800a98c:	d126      	bne.n	800a9dc <_strtod_l+0x384>
 800a98e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a990:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a994:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a998:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a99c:	e6a0      	b.n	800a6e0 <_strtod_l+0x88>
 800a99e:	210a      	movs	r1, #10
 800a9a0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a9a4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a9a8:	e7b9      	b.n	800a91e <_strtod_l+0x2c6>
 800a9aa:	2a6e      	cmp	r2, #110	; 0x6e
 800a9ac:	e7db      	b.n	800a966 <_strtod_l+0x30e>
 800a9ae:	4990      	ldr	r1, [pc, #576]	; (800abf0 <_strtod_l+0x598>)
 800a9b0:	a817      	add	r0, sp, #92	; 0x5c
 800a9b2:	f001 fe3f 	bl	800c634 <__match>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f aeb0 	beq.w	800a71c <_strtod_l+0xc4>
 800a9bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9be:	498d      	ldr	r1, [pc, #564]	; (800abf4 <_strtod_l+0x59c>)
 800a9c0:	3b01      	subs	r3, #1
 800a9c2:	a817      	add	r0, sp, #92	; 0x5c
 800a9c4:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9c6:	f001 fe35 	bl	800c634 <__match>
 800a9ca:	b910      	cbnz	r0, 800a9d2 <_strtod_l+0x37a>
 800a9cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	9317      	str	r3, [sp, #92]	; 0x5c
 800a9d2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ac04 <_strtod_l+0x5ac>
 800a9d6:	f04f 0a00 	mov.w	sl, #0
 800a9da:	e681      	b.n	800a6e0 <_strtod_l+0x88>
 800a9dc:	4886      	ldr	r0, [pc, #536]	; (800abf8 <_strtod_l+0x5a0>)
 800a9de:	f003 f963 	bl	800dca8 <nan>
 800a9e2:	ec5b ab10 	vmov	sl, fp, d0
 800a9e6:	e67b      	b.n	800a6e0 <_strtod_l+0x88>
 800a9e8:	9b05      	ldr	r3, [sp, #20]
 800a9ea:	9807      	ldr	r0, [sp, #28]
 800a9ec:	1af3      	subs	r3, r6, r3
 800a9ee:	2f00      	cmp	r7, #0
 800a9f0:	bf08      	it	eq
 800a9f2:	462f      	moveq	r7, r5
 800a9f4:	2d10      	cmp	r5, #16
 800a9f6:	9306      	str	r3, [sp, #24]
 800a9f8:	46a8      	mov	r8, r5
 800a9fa:	bfa8      	it	ge
 800a9fc:	f04f 0810 	movge.w	r8, #16
 800aa00:	f7f5 fda0 	bl	8000544 <__aeabi_ui2d>
 800aa04:	2d09      	cmp	r5, #9
 800aa06:	4682      	mov	sl, r0
 800aa08:	468b      	mov	fp, r1
 800aa0a:	dd13      	ble.n	800aa34 <_strtod_l+0x3dc>
 800aa0c:	4b7b      	ldr	r3, [pc, #492]	; (800abfc <_strtod_l+0x5a4>)
 800aa0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800aa16:	f7f5 fe0f 	bl	8000638 <__aeabi_dmul>
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	4648      	mov	r0, r9
 800aa1e:	468b      	mov	fp, r1
 800aa20:	f7f5 fd90 	bl	8000544 <__aeabi_ui2d>
 800aa24:	4602      	mov	r2, r0
 800aa26:	460b      	mov	r3, r1
 800aa28:	4650      	mov	r0, sl
 800aa2a:	4659      	mov	r1, fp
 800aa2c:	f7f5 fc4e 	bl	80002cc <__adddf3>
 800aa30:	4682      	mov	sl, r0
 800aa32:	468b      	mov	fp, r1
 800aa34:	2d0f      	cmp	r5, #15
 800aa36:	dc38      	bgt.n	800aaaa <_strtod_l+0x452>
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f43f ae50 	beq.w	800a6e0 <_strtod_l+0x88>
 800aa40:	dd24      	ble.n	800aa8c <_strtod_l+0x434>
 800aa42:	2b16      	cmp	r3, #22
 800aa44:	dc0b      	bgt.n	800aa5e <_strtod_l+0x406>
 800aa46:	496d      	ldr	r1, [pc, #436]	; (800abfc <_strtod_l+0x5a4>)
 800aa48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa50:	4652      	mov	r2, sl
 800aa52:	465b      	mov	r3, fp
 800aa54:	f7f5 fdf0 	bl	8000638 <__aeabi_dmul>
 800aa58:	4682      	mov	sl, r0
 800aa5a:	468b      	mov	fp, r1
 800aa5c:	e640      	b.n	800a6e0 <_strtod_l+0x88>
 800aa5e:	9a06      	ldr	r2, [sp, #24]
 800aa60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800aa64:	4293      	cmp	r3, r2
 800aa66:	db20      	blt.n	800aaaa <_strtod_l+0x452>
 800aa68:	4c64      	ldr	r4, [pc, #400]	; (800abfc <_strtod_l+0x5a4>)
 800aa6a:	f1c5 050f 	rsb	r5, r5, #15
 800aa6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800aa72:	4652      	mov	r2, sl
 800aa74:	465b      	mov	r3, fp
 800aa76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa7a:	f7f5 fddd 	bl	8000638 <__aeabi_dmul>
 800aa7e:	9b06      	ldr	r3, [sp, #24]
 800aa80:	1b5d      	subs	r5, r3, r5
 800aa82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800aa86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800aa8a:	e7e3      	b.n	800aa54 <_strtod_l+0x3fc>
 800aa8c:	9b06      	ldr	r3, [sp, #24]
 800aa8e:	3316      	adds	r3, #22
 800aa90:	db0b      	blt.n	800aaaa <_strtod_l+0x452>
 800aa92:	9b05      	ldr	r3, [sp, #20]
 800aa94:	1b9e      	subs	r6, r3, r6
 800aa96:	4b59      	ldr	r3, [pc, #356]	; (800abfc <_strtod_l+0x5a4>)
 800aa98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800aa9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aaa0:	4650      	mov	r0, sl
 800aaa2:	4659      	mov	r1, fp
 800aaa4:	f7f5 fef2 	bl	800088c <__aeabi_ddiv>
 800aaa8:	e7d6      	b.n	800aa58 <_strtod_l+0x400>
 800aaaa:	9b06      	ldr	r3, [sp, #24]
 800aaac:	eba5 0808 	sub.w	r8, r5, r8
 800aab0:	4498      	add	r8, r3
 800aab2:	f1b8 0f00 	cmp.w	r8, #0
 800aab6:	dd74      	ble.n	800aba2 <_strtod_l+0x54a>
 800aab8:	f018 030f 	ands.w	r3, r8, #15
 800aabc:	d00a      	beq.n	800aad4 <_strtod_l+0x47c>
 800aabe:	494f      	ldr	r1, [pc, #316]	; (800abfc <_strtod_l+0x5a4>)
 800aac0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aac4:	4652      	mov	r2, sl
 800aac6:	465b      	mov	r3, fp
 800aac8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aacc:	f7f5 fdb4 	bl	8000638 <__aeabi_dmul>
 800aad0:	4682      	mov	sl, r0
 800aad2:	468b      	mov	fp, r1
 800aad4:	f038 080f 	bics.w	r8, r8, #15
 800aad8:	d04f      	beq.n	800ab7a <_strtod_l+0x522>
 800aada:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aade:	dd22      	ble.n	800ab26 <_strtod_l+0x4ce>
 800aae0:	2500      	movs	r5, #0
 800aae2:	462e      	mov	r6, r5
 800aae4:	9507      	str	r5, [sp, #28]
 800aae6:	9505      	str	r5, [sp, #20]
 800aae8:	2322      	movs	r3, #34	; 0x22
 800aaea:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ac04 <_strtod_l+0x5ac>
 800aaee:	6023      	str	r3, [r4, #0]
 800aaf0:	f04f 0a00 	mov.w	sl, #0
 800aaf4:	9b07      	ldr	r3, [sp, #28]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	f43f adf2 	beq.w	800a6e0 <_strtod_l+0x88>
 800aafc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aafe:	4620      	mov	r0, r4
 800ab00:	f001 fec6 	bl	800c890 <_Bfree>
 800ab04:	9905      	ldr	r1, [sp, #20]
 800ab06:	4620      	mov	r0, r4
 800ab08:	f001 fec2 	bl	800c890 <_Bfree>
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f001 febe 	bl	800c890 <_Bfree>
 800ab14:	9907      	ldr	r1, [sp, #28]
 800ab16:	4620      	mov	r0, r4
 800ab18:	f001 feba 	bl	800c890 <_Bfree>
 800ab1c:	4629      	mov	r1, r5
 800ab1e:	4620      	mov	r0, r4
 800ab20:	f001 feb6 	bl	800c890 <_Bfree>
 800ab24:	e5dc      	b.n	800a6e0 <_strtod_l+0x88>
 800ab26:	4b36      	ldr	r3, [pc, #216]	; (800ac00 <_strtod_l+0x5a8>)
 800ab28:	9304      	str	r3, [sp, #16]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ab30:	4650      	mov	r0, sl
 800ab32:	4659      	mov	r1, fp
 800ab34:	4699      	mov	r9, r3
 800ab36:	f1b8 0f01 	cmp.w	r8, #1
 800ab3a:	dc21      	bgt.n	800ab80 <_strtod_l+0x528>
 800ab3c:	b10b      	cbz	r3, 800ab42 <_strtod_l+0x4ea>
 800ab3e:	4682      	mov	sl, r0
 800ab40:	468b      	mov	fp, r1
 800ab42:	4b2f      	ldr	r3, [pc, #188]	; (800ac00 <_strtod_l+0x5a8>)
 800ab44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ab48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ab4c:	4652      	mov	r2, sl
 800ab4e:	465b      	mov	r3, fp
 800ab50:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ab54:	f7f5 fd70 	bl	8000638 <__aeabi_dmul>
 800ab58:	4b2a      	ldr	r3, [pc, #168]	; (800ac04 <_strtod_l+0x5ac>)
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	400b      	ands	r3, r1
 800ab5e:	492a      	ldr	r1, [pc, #168]	; (800ac08 <_strtod_l+0x5b0>)
 800ab60:	428b      	cmp	r3, r1
 800ab62:	4682      	mov	sl, r0
 800ab64:	d8bc      	bhi.n	800aae0 <_strtod_l+0x488>
 800ab66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ab6a:	428b      	cmp	r3, r1
 800ab6c:	bf86      	itte	hi
 800ab6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ac0c <_strtod_l+0x5b4>
 800ab72:	f04f 3aff 	movhi.w	sl, #4294967295
 800ab76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	9304      	str	r3, [sp, #16]
 800ab7e:	e084      	b.n	800ac8a <_strtod_l+0x632>
 800ab80:	f018 0f01 	tst.w	r8, #1
 800ab84:	d005      	beq.n	800ab92 <_strtod_l+0x53a>
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab8c:	f7f5 fd54 	bl	8000638 <__aeabi_dmul>
 800ab90:	2301      	movs	r3, #1
 800ab92:	9a04      	ldr	r2, [sp, #16]
 800ab94:	3208      	adds	r2, #8
 800ab96:	f109 0901 	add.w	r9, r9, #1
 800ab9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab9e:	9204      	str	r2, [sp, #16]
 800aba0:	e7c9      	b.n	800ab36 <_strtod_l+0x4de>
 800aba2:	d0ea      	beq.n	800ab7a <_strtod_l+0x522>
 800aba4:	f1c8 0800 	rsb	r8, r8, #0
 800aba8:	f018 020f 	ands.w	r2, r8, #15
 800abac:	d00a      	beq.n	800abc4 <_strtod_l+0x56c>
 800abae:	4b13      	ldr	r3, [pc, #76]	; (800abfc <_strtod_l+0x5a4>)
 800abb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800abb4:	4650      	mov	r0, sl
 800abb6:	4659      	mov	r1, fp
 800abb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abbc:	f7f5 fe66 	bl	800088c <__aeabi_ddiv>
 800abc0:	4682      	mov	sl, r0
 800abc2:	468b      	mov	fp, r1
 800abc4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800abc8:	d0d7      	beq.n	800ab7a <_strtod_l+0x522>
 800abca:	f1b8 0f1f 	cmp.w	r8, #31
 800abce:	dd1f      	ble.n	800ac10 <_strtod_l+0x5b8>
 800abd0:	2500      	movs	r5, #0
 800abd2:	462e      	mov	r6, r5
 800abd4:	9507      	str	r5, [sp, #28]
 800abd6:	9505      	str	r5, [sp, #20]
 800abd8:	2322      	movs	r3, #34	; 0x22
 800abda:	f04f 0a00 	mov.w	sl, #0
 800abde:	f04f 0b00 	mov.w	fp, #0
 800abe2:	6023      	str	r3, [r4, #0]
 800abe4:	e786      	b.n	800aaf4 <_strtod_l+0x49c>
 800abe6:	bf00      	nop
 800abe8:	0800eb55 	.word	0x0800eb55
 800abec:	0800eb94 	.word	0x0800eb94
 800abf0:	0800eb4d 	.word	0x0800eb4d
 800abf4:	0800ecd4 	.word	0x0800ecd4
 800abf8:	0800ef9b 	.word	0x0800ef9b
 800abfc:	0800ee60 	.word	0x0800ee60
 800ac00:	0800ee38 	.word	0x0800ee38
 800ac04:	7ff00000 	.word	0x7ff00000
 800ac08:	7ca00000 	.word	0x7ca00000
 800ac0c:	7fefffff 	.word	0x7fefffff
 800ac10:	f018 0310 	ands.w	r3, r8, #16
 800ac14:	bf18      	it	ne
 800ac16:	236a      	movne	r3, #106	; 0x6a
 800ac18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800afc8 <_strtod_l+0x970>
 800ac1c:	9304      	str	r3, [sp, #16]
 800ac1e:	4650      	mov	r0, sl
 800ac20:	4659      	mov	r1, fp
 800ac22:	2300      	movs	r3, #0
 800ac24:	f018 0f01 	tst.w	r8, #1
 800ac28:	d004      	beq.n	800ac34 <_strtod_l+0x5dc>
 800ac2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ac2e:	f7f5 fd03 	bl	8000638 <__aeabi_dmul>
 800ac32:	2301      	movs	r3, #1
 800ac34:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ac38:	f109 0908 	add.w	r9, r9, #8
 800ac3c:	d1f2      	bne.n	800ac24 <_strtod_l+0x5cc>
 800ac3e:	b10b      	cbz	r3, 800ac44 <_strtod_l+0x5ec>
 800ac40:	4682      	mov	sl, r0
 800ac42:	468b      	mov	fp, r1
 800ac44:	9b04      	ldr	r3, [sp, #16]
 800ac46:	b1c3      	cbz	r3, 800ac7a <_strtod_l+0x622>
 800ac48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ac4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	4659      	mov	r1, fp
 800ac54:	dd11      	ble.n	800ac7a <_strtod_l+0x622>
 800ac56:	2b1f      	cmp	r3, #31
 800ac58:	f340 8124 	ble.w	800aea4 <_strtod_l+0x84c>
 800ac5c:	2b34      	cmp	r3, #52	; 0x34
 800ac5e:	bfde      	ittt	le
 800ac60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ac64:	f04f 33ff 	movle.w	r3, #4294967295
 800ac68:	fa03 f202 	lslle.w	r2, r3, r2
 800ac6c:	f04f 0a00 	mov.w	sl, #0
 800ac70:	bfcc      	ite	gt
 800ac72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ac76:	ea02 0b01 	andle.w	fp, r2, r1
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	4650      	mov	r0, sl
 800ac80:	4659      	mov	r1, fp
 800ac82:	f7f5 ff41 	bl	8000b08 <__aeabi_dcmpeq>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d1a2      	bne.n	800abd0 <_strtod_l+0x578>
 800ac8a:	9b07      	ldr	r3, [sp, #28]
 800ac8c:	9300      	str	r3, [sp, #0]
 800ac8e:	9908      	ldr	r1, [sp, #32]
 800ac90:	462b      	mov	r3, r5
 800ac92:	463a      	mov	r2, r7
 800ac94:	4620      	mov	r0, r4
 800ac96:	f001 fe63 	bl	800c960 <__s2b>
 800ac9a:	9007      	str	r0, [sp, #28]
 800ac9c:	2800      	cmp	r0, #0
 800ac9e:	f43f af1f 	beq.w	800aae0 <_strtod_l+0x488>
 800aca2:	9b05      	ldr	r3, [sp, #20]
 800aca4:	1b9e      	subs	r6, r3, r6
 800aca6:	9b06      	ldr	r3, [sp, #24]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	bfb4      	ite	lt
 800acac:	4633      	movlt	r3, r6
 800acae:	2300      	movge	r3, #0
 800acb0:	930c      	str	r3, [sp, #48]	; 0x30
 800acb2:	9b06      	ldr	r3, [sp, #24]
 800acb4:	2500      	movs	r5, #0
 800acb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800acba:	9312      	str	r3, [sp, #72]	; 0x48
 800acbc:	462e      	mov	r6, r5
 800acbe:	9b07      	ldr	r3, [sp, #28]
 800acc0:	4620      	mov	r0, r4
 800acc2:	6859      	ldr	r1, [r3, #4]
 800acc4:	f001 fda4 	bl	800c810 <_Balloc>
 800acc8:	9005      	str	r0, [sp, #20]
 800acca:	2800      	cmp	r0, #0
 800accc:	f43f af0c 	beq.w	800aae8 <_strtod_l+0x490>
 800acd0:	9b07      	ldr	r3, [sp, #28]
 800acd2:	691a      	ldr	r2, [r3, #16]
 800acd4:	3202      	adds	r2, #2
 800acd6:	f103 010c 	add.w	r1, r3, #12
 800acda:	0092      	lsls	r2, r2, #2
 800acdc:	300c      	adds	r0, #12
 800acde:	f001 fd89 	bl	800c7f4 <memcpy>
 800ace2:	ec4b ab10 	vmov	d0, sl, fp
 800ace6:	aa1a      	add	r2, sp, #104	; 0x68
 800ace8:	a919      	add	r1, sp, #100	; 0x64
 800acea:	4620      	mov	r0, r4
 800acec:	f002 f97e 	bl	800cfec <__d2b>
 800acf0:	ec4b ab18 	vmov	d8, sl, fp
 800acf4:	9018      	str	r0, [sp, #96]	; 0x60
 800acf6:	2800      	cmp	r0, #0
 800acf8:	f43f aef6 	beq.w	800aae8 <_strtod_l+0x490>
 800acfc:	2101      	movs	r1, #1
 800acfe:	4620      	mov	r0, r4
 800ad00:	f001 fec8 	bl	800ca94 <__i2b>
 800ad04:	4606      	mov	r6, r0
 800ad06:	2800      	cmp	r0, #0
 800ad08:	f43f aeee 	beq.w	800aae8 <_strtod_l+0x490>
 800ad0c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ad0e:	9904      	ldr	r1, [sp, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	bfab      	itete	ge
 800ad14:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ad16:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ad18:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ad1a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ad1e:	bfac      	ite	ge
 800ad20:	eb03 0902 	addge.w	r9, r3, r2
 800ad24:	1ad7      	sublt	r7, r2, r3
 800ad26:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ad28:	eba3 0801 	sub.w	r8, r3, r1
 800ad2c:	4490      	add	r8, r2
 800ad2e:	4ba1      	ldr	r3, [pc, #644]	; (800afb4 <_strtod_l+0x95c>)
 800ad30:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad34:	4598      	cmp	r8, r3
 800ad36:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ad3a:	f280 80c7 	bge.w	800aecc <_strtod_l+0x874>
 800ad3e:	eba3 0308 	sub.w	r3, r3, r8
 800ad42:	2b1f      	cmp	r3, #31
 800ad44:	eba2 0203 	sub.w	r2, r2, r3
 800ad48:	f04f 0101 	mov.w	r1, #1
 800ad4c:	f300 80b1 	bgt.w	800aeb2 <_strtod_l+0x85a>
 800ad50:	fa01 f303 	lsl.w	r3, r1, r3
 800ad54:	930d      	str	r3, [sp, #52]	; 0x34
 800ad56:	2300      	movs	r3, #0
 800ad58:	9308      	str	r3, [sp, #32]
 800ad5a:	eb09 0802 	add.w	r8, r9, r2
 800ad5e:	9b04      	ldr	r3, [sp, #16]
 800ad60:	45c1      	cmp	r9, r8
 800ad62:	4417      	add	r7, r2
 800ad64:	441f      	add	r7, r3
 800ad66:	464b      	mov	r3, r9
 800ad68:	bfa8      	it	ge
 800ad6a:	4643      	movge	r3, r8
 800ad6c:	42bb      	cmp	r3, r7
 800ad6e:	bfa8      	it	ge
 800ad70:	463b      	movge	r3, r7
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	bfc2      	ittt	gt
 800ad76:	eba8 0803 	subgt.w	r8, r8, r3
 800ad7a:	1aff      	subgt	r7, r7, r3
 800ad7c:	eba9 0903 	subgt.w	r9, r9, r3
 800ad80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	dd17      	ble.n	800adb6 <_strtod_l+0x75e>
 800ad86:	4631      	mov	r1, r6
 800ad88:	461a      	mov	r2, r3
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f001 ff42 	bl	800cc14 <__pow5mult>
 800ad90:	4606      	mov	r6, r0
 800ad92:	2800      	cmp	r0, #0
 800ad94:	f43f aea8 	beq.w	800aae8 <_strtod_l+0x490>
 800ad98:	4601      	mov	r1, r0
 800ad9a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f001 fe8f 	bl	800cac0 <__multiply>
 800ada2:	900b      	str	r0, [sp, #44]	; 0x2c
 800ada4:	2800      	cmp	r0, #0
 800ada6:	f43f ae9f 	beq.w	800aae8 <_strtod_l+0x490>
 800adaa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800adac:	4620      	mov	r0, r4
 800adae:	f001 fd6f 	bl	800c890 <_Bfree>
 800adb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800adb4:	9318      	str	r3, [sp, #96]	; 0x60
 800adb6:	f1b8 0f00 	cmp.w	r8, #0
 800adba:	f300 808c 	bgt.w	800aed6 <_strtod_l+0x87e>
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	dd08      	ble.n	800add6 <_strtod_l+0x77e>
 800adc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800adc6:	9905      	ldr	r1, [sp, #20]
 800adc8:	4620      	mov	r0, r4
 800adca:	f001 ff23 	bl	800cc14 <__pow5mult>
 800adce:	9005      	str	r0, [sp, #20]
 800add0:	2800      	cmp	r0, #0
 800add2:	f43f ae89 	beq.w	800aae8 <_strtod_l+0x490>
 800add6:	2f00      	cmp	r7, #0
 800add8:	dd08      	ble.n	800adec <_strtod_l+0x794>
 800adda:	9905      	ldr	r1, [sp, #20]
 800addc:	463a      	mov	r2, r7
 800adde:	4620      	mov	r0, r4
 800ade0:	f001 ff72 	bl	800ccc8 <__lshift>
 800ade4:	9005      	str	r0, [sp, #20]
 800ade6:	2800      	cmp	r0, #0
 800ade8:	f43f ae7e 	beq.w	800aae8 <_strtod_l+0x490>
 800adec:	f1b9 0f00 	cmp.w	r9, #0
 800adf0:	dd08      	ble.n	800ae04 <_strtod_l+0x7ac>
 800adf2:	4631      	mov	r1, r6
 800adf4:	464a      	mov	r2, r9
 800adf6:	4620      	mov	r0, r4
 800adf8:	f001 ff66 	bl	800ccc8 <__lshift>
 800adfc:	4606      	mov	r6, r0
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f ae72 	beq.w	800aae8 <_strtod_l+0x490>
 800ae04:	9a05      	ldr	r2, [sp, #20]
 800ae06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ae08:	4620      	mov	r0, r4
 800ae0a:	f001 ffe9 	bl	800cde0 <__mdiff>
 800ae0e:	4605      	mov	r5, r0
 800ae10:	2800      	cmp	r0, #0
 800ae12:	f43f ae69 	beq.w	800aae8 <_strtod_l+0x490>
 800ae16:	68c3      	ldr	r3, [r0, #12]
 800ae18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	60c3      	str	r3, [r0, #12]
 800ae1e:	4631      	mov	r1, r6
 800ae20:	f001 ffc2 	bl	800cda8 <__mcmp>
 800ae24:	2800      	cmp	r0, #0
 800ae26:	da60      	bge.n	800aeea <_strtod_l+0x892>
 800ae28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ae2e:	f040 8082 	bne.w	800af36 <_strtod_l+0x8de>
 800ae32:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d17d      	bne.n	800af36 <_strtod_l+0x8de>
 800ae3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ae3e:	0d1b      	lsrs	r3, r3, #20
 800ae40:	051b      	lsls	r3, r3, #20
 800ae42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ae46:	d976      	bls.n	800af36 <_strtod_l+0x8de>
 800ae48:	696b      	ldr	r3, [r5, #20]
 800ae4a:	b913      	cbnz	r3, 800ae52 <_strtod_l+0x7fa>
 800ae4c:	692b      	ldr	r3, [r5, #16]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	dd71      	ble.n	800af36 <_strtod_l+0x8de>
 800ae52:	4629      	mov	r1, r5
 800ae54:	2201      	movs	r2, #1
 800ae56:	4620      	mov	r0, r4
 800ae58:	f001 ff36 	bl	800ccc8 <__lshift>
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4605      	mov	r5, r0
 800ae60:	f001 ffa2 	bl	800cda8 <__mcmp>
 800ae64:	2800      	cmp	r0, #0
 800ae66:	dd66      	ble.n	800af36 <_strtod_l+0x8de>
 800ae68:	9904      	ldr	r1, [sp, #16]
 800ae6a:	4a53      	ldr	r2, [pc, #332]	; (800afb8 <_strtod_l+0x960>)
 800ae6c:	465b      	mov	r3, fp
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	f000 8081 	beq.w	800af76 <_strtod_l+0x91e>
 800ae74:	ea02 010b 	and.w	r1, r2, fp
 800ae78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ae7c:	dc7b      	bgt.n	800af76 <_strtod_l+0x91e>
 800ae7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ae82:	f77f aea9 	ble.w	800abd8 <_strtod_l+0x580>
 800ae86:	4b4d      	ldr	r3, [pc, #308]	; (800afbc <_strtod_l+0x964>)
 800ae88:	4650      	mov	r0, sl
 800ae8a:	4659      	mov	r1, fp
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f7f5 fbd3 	bl	8000638 <__aeabi_dmul>
 800ae92:	460b      	mov	r3, r1
 800ae94:	4303      	orrs	r3, r0
 800ae96:	bf08      	it	eq
 800ae98:	2322      	moveq	r3, #34	; 0x22
 800ae9a:	4682      	mov	sl, r0
 800ae9c:	468b      	mov	fp, r1
 800ae9e:	bf08      	it	eq
 800aea0:	6023      	streq	r3, [r4, #0]
 800aea2:	e62b      	b.n	800aafc <_strtod_l+0x4a4>
 800aea4:	f04f 32ff 	mov.w	r2, #4294967295
 800aea8:	fa02 f303 	lsl.w	r3, r2, r3
 800aeac:	ea03 0a0a 	and.w	sl, r3, sl
 800aeb0:	e6e3      	b.n	800ac7a <_strtod_l+0x622>
 800aeb2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800aeb6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800aeba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800aebe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aec2:	fa01 f308 	lsl.w	r3, r1, r8
 800aec6:	9308      	str	r3, [sp, #32]
 800aec8:	910d      	str	r1, [sp, #52]	; 0x34
 800aeca:	e746      	b.n	800ad5a <_strtod_l+0x702>
 800aecc:	2300      	movs	r3, #0
 800aece:	9308      	str	r3, [sp, #32]
 800aed0:	2301      	movs	r3, #1
 800aed2:	930d      	str	r3, [sp, #52]	; 0x34
 800aed4:	e741      	b.n	800ad5a <_strtod_l+0x702>
 800aed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aed8:	4642      	mov	r2, r8
 800aeda:	4620      	mov	r0, r4
 800aedc:	f001 fef4 	bl	800ccc8 <__lshift>
 800aee0:	9018      	str	r0, [sp, #96]	; 0x60
 800aee2:	2800      	cmp	r0, #0
 800aee4:	f47f af6b 	bne.w	800adbe <_strtod_l+0x766>
 800aee8:	e5fe      	b.n	800aae8 <_strtod_l+0x490>
 800aeea:	465f      	mov	r7, fp
 800aeec:	d16e      	bne.n	800afcc <_strtod_l+0x974>
 800aeee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aef0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aef4:	b342      	cbz	r2, 800af48 <_strtod_l+0x8f0>
 800aef6:	4a32      	ldr	r2, [pc, #200]	; (800afc0 <_strtod_l+0x968>)
 800aef8:	4293      	cmp	r3, r2
 800aefa:	d128      	bne.n	800af4e <_strtod_l+0x8f6>
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	4651      	mov	r1, sl
 800af00:	b1eb      	cbz	r3, 800af3e <_strtod_l+0x8e6>
 800af02:	4b2d      	ldr	r3, [pc, #180]	; (800afb8 <_strtod_l+0x960>)
 800af04:	403b      	ands	r3, r7
 800af06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af0a:	f04f 32ff 	mov.w	r2, #4294967295
 800af0e:	d819      	bhi.n	800af44 <_strtod_l+0x8ec>
 800af10:	0d1b      	lsrs	r3, r3, #20
 800af12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800af16:	fa02 f303 	lsl.w	r3, r2, r3
 800af1a:	4299      	cmp	r1, r3
 800af1c:	d117      	bne.n	800af4e <_strtod_l+0x8f6>
 800af1e:	4b29      	ldr	r3, [pc, #164]	; (800afc4 <_strtod_l+0x96c>)
 800af20:	429f      	cmp	r7, r3
 800af22:	d102      	bne.n	800af2a <_strtod_l+0x8d2>
 800af24:	3101      	adds	r1, #1
 800af26:	f43f addf 	beq.w	800aae8 <_strtod_l+0x490>
 800af2a:	4b23      	ldr	r3, [pc, #140]	; (800afb8 <_strtod_l+0x960>)
 800af2c:	403b      	ands	r3, r7
 800af2e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800af32:	f04f 0a00 	mov.w	sl, #0
 800af36:	9b04      	ldr	r3, [sp, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1a4      	bne.n	800ae86 <_strtod_l+0x82e>
 800af3c:	e5de      	b.n	800aafc <_strtod_l+0x4a4>
 800af3e:	f04f 33ff 	mov.w	r3, #4294967295
 800af42:	e7ea      	b.n	800af1a <_strtod_l+0x8c2>
 800af44:	4613      	mov	r3, r2
 800af46:	e7e8      	b.n	800af1a <_strtod_l+0x8c2>
 800af48:	ea53 030a 	orrs.w	r3, r3, sl
 800af4c:	d08c      	beq.n	800ae68 <_strtod_l+0x810>
 800af4e:	9b08      	ldr	r3, [sp, #32]
 800af50:	b1db      	cbz	r3, 800af8a <_strtod_l+0x932>
 800af52:	423b      	tst	r3, r7
 800af54:	d0ef      	beq.n	800af36 <_strtod_l+0x8de>
 800af56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af58:	9a04      	ldr	r2, [sp, #16]
 800af5a:	4650      	mov	r0, sl
 800af5c:	4659      	mov	r1, fp
 800af5e:	b1c3      	cbz	r3, 800af92 <_strtod_l+0x93a>
 800af60:	f7ff fb5d 	bl	800a61e <sulp>
 800af64:	4602      	mov	r2, r0
 800af66:	460b      	mov	r3, r1
 800af68:	ec51 0b18 	vmov	r0, r1, d8
 800af6c:	f7f5 f9ae 	bl	80002cc <__adddf3>
 800af70:	4682      	mov	sl, r0
 800af72:	468b      	mov	fp, r1
 800af74:	e7df      	b.n	800af36 <_strtod_l+0x8de>
 800af76:	4013      	ands	r3, r2
 800af78:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800af7c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800af80:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800af84:	f04f 3aff 	mov.w	sl, #4294967295
 800af88:	e7d5      	b.n	800af36 <_strtod_l+0x8de>
 800af8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af8c:	ea13 0f0a 	tst.w	r3, sl
 800af90:	e7e0      	b.n	800af54 <_strtod_l+0x8fc>
 800af92:	f7ff fb44 	bl	800a61e <sulp>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	ec51 0b18 	vmov	r0, r1, d8
 800af9e:	f7f5 f993 	bl	80002c8 <__aeabi_dsub>
 800afa2:	2200      	movs	r2, #0
 800afa4:	2300      	movs	r3, #0
 800afa6:	4682      	mov	sl, r0
 800afa8:	468b      	mov	fp, r1
 800afaa:	f7f5 fdad 	bl	8000b08 <__aeabi_dcmpeq>
 800afae:	2800      	cmp	r0, #0
 800afb0:	d0c1      	beq.n	800af36 <_strtod_l+0x8de>
 800afb2:	e611      	b.n	800abd8 <_strtod_l+0x580>
 800afb4:	fffffc02 	.word	0xfffffc02
 800afb8:	7ff00000 	.word	0x7ff00000
 800afbc:	39500000 	.word	0x39500000
 800afc0:	000fffff 	.word	0x000fffff
 800afc4:	7fefffff 	.word	0x7fefffff
 800afc8:	0800eba8 	.word	0x0800eba8
 800afcc:	4631      	mov	r1, r6
 800afce:	4628      	mov	r0, r5
 800afd0:	f002 f868 	bl	800d0a4 <__ratio>
 800afd4:	ec59 8b10 	vmov	r8, r9, d0
 800afd8:	ee10 0a10 	vmov	r0, s0
 800afdc:	2200      	movs	r2, #0
 800afde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800afe2:	4649      	mov	r1, r9
 800afe4:	f7f5 fda4 	bl	8000b30 <__aeabi_dcmple>
 800afe8:	2800      	cmp	r0, #0
 800afea:	d07a      	beq.n	800b0e2 <_strtod_l+0xa8a>
 800afec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d04a      	beq.n	800b088 <_strtod_l+0xa30>
 800aff2:	4b95      	ldr	r3, [pc, #596]	; (800b248 <_strtod_l+0xbf0>)
 800aff4:	2200      	movs	r2, #0
 800aff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800affa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b248 <_strtod_l+0xbf0>
 800affe:	f04f 0800 	mov.w	r8, #0
 800b002:	4b92      	ldr	r3, [pc, #584]	; (800b24c <_strtod_l+0xbf4>)
 800b004:	403b      	ands	r3, r7
 800b006:	930d      	str	r3, [sp, #52]	; 0x34
 800b008:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b00a:	4b91      	ldr	r3, [pc, #580]	; (800b250 <_strtod_l+0xbf8>)
 800b00c:	429a      	cmp	r2, r3
 800b00e:	f040 80b0 	bne.w	800b172 <_strtod_l+0xb1a>
 800b012:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b016:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b01a:	ec4b ab10 	vmov	d0, sl, fp
 800b01e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b022:	f001 ff67 	bl	800cef4 <__ulp>
 800b026:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b02a:	ec53 2b10 	vmov	r2, r3, d0
 800b02e:	f7f5 fb03 	bl	8000638 <__aeabi_dmul>
 800b032:	4652      	mov	r2, sl
 800b034:	465b      	mov	r3, fp
 800b036:	f7f5 f949 	bl	80002cc <__adddf3>
 800b03a:	460b      	mov	r3, r1
 800b03c:	4983      	ldr	r1, [pc, #524]	; (800b24c <_strtod_l+0xbf4>)
 800b03e:	4a85      	ldr	r2, [pc, #532]	; (800b254 <_strtod_l+0xbfc>)
 800b040:	4019      	ands	r1, r3
 800b042:	4291      	cmp	r1, r2
 800b044:	4682      	mov	sl, r0
 800b046:	d960      	bls.n	800b10a <_strtod_l+0xab2>
 800b048:	ee18 3a90 	vmov	r3, s17
 800b04c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b050:	4293      	cmp	r3, r2
 800b052:	d104      	bne.n	800b05e <_strtod_l+0xa06>
 800b054:	ee18 3a10 	vmov	r3, s16
 800b058:	3301      	adds	r3, #1
 800b05a:	f43f ad45 	beq.w	800aae8 <_strtod_l+0x490>
 800b05e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b260 <_strtod_l+0xc08>
 800b062:	f04f 3aff 	mov.w	sl, #4294967295
 800b066:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b068:	4620      	mov	r0, r4
 800b06a:	f001 fc11 	bl	800c890 <_Bfree>
 800b06e:	9905      	ldr	r1, [sp, #20]
 800b070:	4620      	mov	r0, r4
 800b072:	f001 fc0d 	bl	800c890 <_Bfree>
 800b076:	4631      	mov	r1, r6
 800b078:	4620      	mov	r0, r4
 800b07a:	f001 fc09 	bl	800c890 <_Bfree>
 800b07e:	4629      	mov	r1, r5
 800b080:	4620      	mov	r0, r4
 800b082:	f001 fc05 	bl	800c890 <_Bfree>
 800b086:	e61a      	b.n	800acbe <_strtod_l+0x666>
 800b088:	f1ba 0f00 	cmp.w	sl, #0
 800b08c:	d11b      	bne.n	800b0c6 <_strtod_l+0xa6e>
 800b08e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b092:	b9f3      	cbnz	r3, 800b0d2 <_strtod_l+0xa7a>
 800b094:	4b6c      	ldr	r3, [pc, #432]	; (800b248 <_strtod_l+0xbf0>)
 800b096:	2200      	movs	r2, #0
 800b098:	4640      	mov	r0, r8
 800b09a:	4649      	mov	r1, r9
 800b09c:	f7f5 fd3e 	bl	8000b1c <__aeabi_dcmplt>
 800b0a0:	b9d0      	cbnz	r0, 800b0d8 <_strtod_l+0xa80>
 800b0a2:	4640      	mov	r0, r8
 800b0a4:	4649      	mov	r1, r9
 800b0a6:	4b6c      	ldr	r3, [pc, #432]	; (800b258 <_strtod_l+0xc00>)
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f7f5 fac5 	bl	8000638 <__aeabi_dmul>
 800b0ae:	4680      	mov	r8, r0
 800b0b0:	4689      	mov	r9, r1
 800b0b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b0b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b0ba:	9315      	str	r3, [sp, #84]	; 0x54
 800b0bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b0c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b0c4:	e79d      	b.n	800b002 <_strtod_l+0x9aa>
 800b0c6:	f1ba 0f01 	cmp.w	sl, #1
 800b0ca:	d102      	bne.n	800b0d2 <_strtod_l+0xa7a>
 800b0cc:	2f00      	cmp	r7, #0
 800b0ce:	f43f ad83 	beq.w	800abd8 <_strtod_l+0x580>
 800b0d2:	4b62      	ldr	r3, [pc, #392]	; (800b25c <_strtod_l+0xc04>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	e78e      	b.n	800aff6 <_strtod_l+0x99e>
 800b0d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b258 <_strtod_l+0xc00>
 800b0dc:	f04f 0800 	mov.w	r8, #0
 800b0e0:	e7e7      	b.n	800b0b2 <_strtod_l+0xa5a>
 800b0e2:	4b5d      	ldr	r3, [pc, #372]	; (800b258 <_strtod_l+0xc00>)
 800b0e4:	4640      	mov	r0, r8
 800b0e6:	4649      	mov	r1, r9
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	f7f5 faa5 	bl	8000638 <__aeabi_dmul>
 800b0ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b0f0:	4680      	mov	r8, r0
 800b0f2:	4689      	mov	r9, r1
 800b0f4:	b933      	cbnz	r3, 800b104 <_strtod_l+0xaac>
 800b0f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b0fa:	900e      	str	r0, [sp, #56]	; 0x38
 800b0fc:	930f      	str	r3, [sp, #60]	; 0x3c
 800b0fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b102:	e7dd      	b.n	800b0c0 <_strtod_l+0xa68>
 800b104:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b108:	e7f9      	b.n	800b0fe <_strtod_l+0xaa6>
 800b10a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1a8      	bne.n	800b066 <_strtod_l+0xa0e>
 800b114:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b11a:	0d1b      	lsrs	r3, r3, #20
 800b11c:	051b      	lsls	r3, r3, #20
 800b11e:	429a      	cmp	r2, r3
 800b120:	d1a1      	bne.n	800b066 <_strtod_l+0xa0e>
 800b122:	4640      	mov	r0, r8
 800b124:	4649      	mov	r1, r9
 800b126:	f7f5 fde7 	bl	8000cf8 <__aeabi_d2lz>
 800b12a:	f7f5 fa57 	bl	80005dc <__aeabi_l2d>
 800b12e:	4602      	mov	r2, r0
 800b130:	460b      	mov	r3, r1
 800b132:	4640      	mov	r0, r8
 800b134:	4649      	mov	r1, r9
 800b136:	f7f5 f8c7 	bl	80002c8 <__aeabi_dsub>
 800b13a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b13c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b140:	ea43 030a 	orr.w	r3, r3, sl
 800b144:	4313      	orrs	r3, r2
 800b146:	4680      	mov	r8, r0
 800b148:	4689      	mov	r9, r1
 800b14a:	d055      	beq.n	800b1f8 <_strtod_l+0xba0>
 800b14c:	a336      	add	r3, pc, #216	; (adr r3, 800b228 <_strtod_l+0xbd0>)
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	f7f5 fce3 	bl	8000b1c <__aeabi_dcmplt>
 800b156:	2800      	cmp	r0, #0
 800b158:	f47f acd0 	bne.w	800aafc <_strtod_l+0x4a4>
 800b15c:	a334      	add	r3, pc, #208	; (adr r3, 800b230 <_strtod_l+0xbd8>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	4640      	mov	r0, r8
 800b164:	4649      	mov	r1, r9
 800b166:	f7f5 fcf7 	bl	8000b58 <__aeabi_dcmpgt>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	f43f af7b 	beq.w	800b066 <_strtod_l+0xa0e>
 800b170:	e4c4      	b.n	800aafc <_strtod_l+0x4a4>
 800b172:	9b04      	ldr	r3, [sp, #16]
 800b174:	b333      	cbz	r3, 800b1c4 <_strtod_l+0xb6c>
 800b176:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b178:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b17c:	d822      	bhi.n	800b1c4 <_strtod_l+0xb6c>
 800b17e:	a32e      	add	r3, pc, #184	; (adr r3, 800b238 <_strtod_l+0xbe0>)
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	4640      	mov	r0, r8
 800b186:	4649      	mov	r1, r9
 800b188:	f7f5 fcd2 	bl	8000b30 <__aeabi_dcmple>
 800b18c:	b1a0      	cbz	r0, 800b1b8 <_strtod_l+0xb60>
 800b18e:	4649      	mov	r1, r9
 800b190:	4640      	mov	r0, r8
 800b192:	f7f5 fd29 	bl	8000be8 <__aeabi_d2uiz>
 800b196:	2801      	cmp	r0, #1
 800b198:	bf38      	it	cc
 800b19a:	2001      	movcc	r0, #1
 800b19c:	f7f5 f9d2 	bl	8000544 <__aeabi_ui2d>
 800b1a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b1a2:	4680      	mov	r8, r0
 800b1a4:	4689      	mov	r9, r1
 800b1a6:	bb23      	cbnz	r3, 800b1f2 <_strtod_l+0xb9a>
 800b1a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b1ac:	9010      	str	r0, [sp, #64]	; 0x40
 800b1ae:	9311      	str	r3, [sp, #68]	; 0x44
 800b1b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b1b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b1b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b1bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b1c0:	1a9b      	subs	r3, r3, r2
 800b1c2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1c8:	eeb0 0a48 	vmov.f32	s0, s16
 800b1cc:	eef0 0a68 	vmov.f32	s1, s17
 800b1d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b1d4:	f001 fe8e 	bl	800cef4 <__ulp>
 800b1d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b1dc:	ec53 2b10 	vmov	r2, r3, d0
 800b1e0:	f7f5 fa2a 	bl	8000638 <__aeabi_dmul>
 800b1e4:	ec53 2b18 	vmov	r2, r3, d8
 800b1e8:	f7f5 f870 	bl	80002cc <__adddf3>
 800b1ec:	4682      	mov	sl, r0
 800b1ee:	468b      	mov	fp, r1
 800b1f0:	e78d      	b.n	800b10e <_strtod_l+0xab6>
 800b1f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b1f6:	e7db      	b.n	800b1b0 <_strtod_l+0xb58>
 800b1f8:	a311      	add	r3, pc, #68	; (adr r3, 800b240 <_strtod_l+0xbe8>)
 800b1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1fe:	f7f5 fc8d 	bl	8000b1c <__aeabi_dcmplt>
 800b202:	e7b2      	b.n	800b16a <_strtod_l+0xb12>
 800b204:	2300      	movs	r3, #0
 800b206:	930a      	str	r3, [sp, #40]	; 0x28
 800b208:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b20a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	f7ff ba6b 	b.w	800a6e8 <_strtod_l+0x90>
 800b212:	2a65      	cmp	r2, #101	; 0x65
 800b214:	f43f ab5f 	beq.w	800a8d6 <_strtod_l+0x27e>
 800b218:	2a45      	cmp	r2, #69	; 0x45
 800b21a:	f43f ab5c 	beq.w	800a8d6 <_strtod_l+0x27e>
 800b21e:	2301      	movs	r3, #1
 800b220:	f7ff bb94 	b.w	800a94c <_strtod_l+0x2f4>
 800b224:	f3af 8000 	nop.w
 800b228:	94a03595 	.word	0x94a03595
 800b22c:	3fdfffff 	.word	0x3fdfffff
 800b230:	35afe535 	.word	0x35afe535
 800b234:	3fe00000 	.word	0x3fe00000
 800b238:	ffc00000 	.word	0xffc00000
 800b23c:	41dfffff 	.word	0x41dfffff
 800b240:	94a03595 	.word	0x94a03595
 800b244:	3fcfffff 	.word	0x3fcfffff
 800b248:	3ff00000 	.word	0x3ff00000
 800b24c:	7ff00000 	.word	0x7ff00000
 800b250:	7fe00000 	.word	0x7fe00000
 800b254:	7c9fffff 	.word	0x7c9fffff
 800b258:	3fe00000 	.word	0x3fe00000
 800b25c:	bff00000 	.word	0xbff00000
 800b260:	7fefffff 	.word	0x7fefffff

0800b264 <_strtod_r>:
 800b264:	4b01      	ldr	r3, [pc, #4]	; (800b26c <_strtod_r+0x8>)
 800b266:	f7ff b9f7 	b.w	800a658 <_strtod_l>
 800b26a:	bf00      	nop
 800b26c:	2000008c 	.word	0x2000008c

0800b270 <_strtol_l.constprop.0>:
 800b270:	2b01      	cmp	r3, #1
 800b272:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b276:	d001      	beq.n	800b27c <_strtol_l.constprop.0+0xc>
 800b278:	2b24      	cmp	r3, #36	; 0x24
 800b27a:	d906      	bls.n	800b28a <_strtol_l.constprop.0+0x1a>
 800b27c:	f7fe fa6e 	bl	800975c <__errno>
 800b280:	2316      	movs	r3, #22
 800b282:	6003      	str	r3, [r0, #0]
 800b284:	2000      	movs	r0, #0
 800b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b370 <_strtol_l.constprop.0+0x100>
 800b28e:	460d      	mov	r5, r1
 800b290:	462e      	mov	r6, r5
 800b292:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b296:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b29a:	f017 0708 	ands.w	r7, r7, #8
 800b29e:	d1f7      	bne.n	800b290 <_strtol_l.constprop.0+0x20>
 800b2a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b2a2:	d132      	bne.n	800b30a <_strtol_l.constprop.0+0x9a>
 800b2a4:	782c      	ldrb	r4, [r5, #0]
 800b2a6:	2701      	movs	r7, #1
 800b2a8:	1cb5      	adds	r5, r6, #2
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d05b      	beq.n	800b366 <_strtol_l.constprop.0+0xf6>
 800b2ae:	2b10      	cmp	r3, #16
 800b2b0:	d109      	bne.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b2b2:	2c30      	cmp	r4, #48	; 0x30
 800b2b4:	d107      	bne.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b2b6:	782c      	ldrb	r4, [r5, #0]
 800b2b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b2bc:	2c58      	cmp	r4, #88	; 0x58
 800b2be:	d14d      	bne.n	800b35c <_strtol_l.constprop.0+0xec>
 800b2c0:	786c      	ldrb	r4, [r5, #1]
 800b2c2:	2310      	movs	r3, #16
 800b2c4:	3502      	adds	r5, #2
 800b2c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b2ca:	f108 38ff 	add.w	r8, r8, #4294967295
 800b2ce:	f04f 0c00 	mov.w	ip, #0
 800b2d2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b2d6:	4666      	mov	r6, ip
 800b2d8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b2dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b2e0:	f1be 0f09 	cmp.w	lr, #9
 800b2e4:	d816      	bhi.n	800b314 <_strtol_l.constprop.0+0xa4>
 800b2e6:	4674      	mov	r4, lr
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	dd24      	ble.n	800b336 <_strtol_l.constprop.0+0xc6>
 800b2ec:	f1bc 0f00 	cmp.w	ip, #0
 800b2f0:	db1e      	blt.n	800b330 <_strtol_l.constprop.0+0xc0>
 800b2f2:	45b1      	cmp	r9, r6
 800b2f4:	d31c      	bcc.n	800b330 <_strtol_l.constprop.0+0xc0>
 800b2f6:	d101      	bne.n	800b2fc <_strtol_l.constprop.0+0x8c>
 800b2f8:	45a2      	cmp	sl, r4
 800b2fa:	db19      	blt.n	800b330 <_strtol_l.constprop.0+0xc0>
 800b2fc:	fb06 4603 	mla	r6, r6, r3, r4
 800b300:	f04f 0c01 	mov.w	ip, #1
 800b304:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b308:	e7e8      	b.n	800b2dc <_strtol_l.constprop.0+0x6c>
 800b30a:	2c2b      	cmp	r4, #43	; 0x2b
 800b30c:	bf04      	itt	eq
 800b30e:	782c      	ldrbeq	r4, [r5, #0]
 800b310:	1cb5      	addeq	r5, r6, #2
 800b312:	e7ca      	b.n	800b2aa <_strtol_l.constprop.0+0x3a>
 800b314:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b318:	f1be 0f19 	cmp.w	lr, #25
 800b31c:	d801      	bhi.n	800b322 <_strtol_l.constprop.0+0xb2>
 800b31e:	3c37      	subs	r4, #55	; 0x37
 800b320:	e7e2      	b.n	800b2e8 <_strtol_l.constprop.0+0x78>
 800b322:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b326:	f1be 0f19 	cmp.w	lr, #25
 800b32a:	d804      	bhi.n	800b336 <_strtol_l.constprop.0+0xc6>
 800b32c:	3c57      	subs	r4, #87	; 0x57
 800b32e:	e7db      	b.n	800b2e8 <_strtol_l.constprop.0+0x78>
 800b330:	f04f 3cff 	mov.w	ip, #4294967295
 800b334:	e7e6      	b.n	800b304 <_strtol_l.constprop.0+0x94>
 800b336:	f1bc 0f00 	cmp.w	ip, #0
 800b33a:	da05      	bge.n	800b348 <_strtol_l.constprop.0+0xd8>
 800b33c:	2322      	movs	r3, #34	; 0x22
 800b33e:	6003      	str	r3, [r0, #0]
 800b340:	4646      	mov	r6, r8
 800b342:	b942      	cbnz	r2, 800b356 <_strtol_l.constprop.0+0xe6>
 800b344:	4630      	mov	r0, r6
 800b346:	e79e      	b.n	800b286 <_strtol_l.constprop.0+0x16>
 800b348:	b107      	cbz	r7, 800b34c <_strtol_l.constprop.0+0xdc>
 800b34a:	4276      	negs	r6, r6
 800b34c:	2a00      	cmp	r2, #0
 800b34e:	d0f9      	beq.n	800b344 <_strtol_l.constprop.0+0xd4>
 800b350:	f1bc 0f00 	cmp.w	ip, #0
 800b354:	d000      	beq.n	800b358 <_strtol_l.constprop.0+0xe8>
 800b356:	1e69      	subs	r1, r5, #1
 800b358:	6011      	str	r1, [r2, #0]
 800b35a:	e7f3      	b.n	800b344 <_strtol_l.constprop.0+0xd4>
 800b35c:	2430      	movs	r4, #48	; 0x30
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d1b1      	bne.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b362:	2308      	movs	r3, #8
 800b364:	e7af      	b.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b366:	2c30      	cmp	r4, #48	; 0x30
 800b368:	d0a5      	beq.n	800b2b6 <_strtol_l.constprop.0+0x46>
 800b36a:	230a      	movs	r3, #10
 800b36c:	e7ab      	b.n	800b2c6 <_strtol_l.constprop.0+0x56>
 800b36e:	bf00      	nop
 800b370:	0800ebd1 	.word	0x0800ebd1

0800b374 <_strtol_r>:
 800b374:	f7ff bf7c 	b.w	800b270 <_strtol_l.constprop.0>

0800b378 <_write_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4d07      	ldr	r5, [pc, #28]	; (800b398 <_write_r+0x20>)
 800b37c:	4604      	mov	r4, r0
 800b37e:	4608      	mov	r0, r1
 800b380:	4611      	mov	r1, r2
 800b382:	2200      	movs	r2, #0
 800b384:	602a      	str	r2, [r5, #0]
 800b386:	461a      	mov	r2, r3
 800b388:	f7f7 f88b 	bl	80024a2 <_write>
 800b38c:	1c43      	adds	r3, r0, #1
 800b38e:	d102      	bne.n	800b396 <_write_r+0x1e>
 800b390:	682b      	ldr	r3, [r5, #0]
 800b392:	b103      	cbz	r3, 800b396 <_write_r+0x1e>
 800b394:	6023      	str	r3, [r4, #0]
 800b396:	bd38      	pop	{r3, r4, r5, pc}
 800b398:	20001344 	.word	0x20001344

0800b39c <_close_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d06      	ldr	r5, [pc, #24]	; (800b3b8 <_close_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	602b      	str	r3, [r5, #0]
 800b3a8:	f7f7 f897 	bl	80024da <_close>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_close_r+0x1a>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_close_r+0x1a>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	20001344 	.word	0x20001344

0800b3bc <quorem>:
 800b3bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3c0:	6903      	ldr	r3, [r0, #16]
 800b3c2:	690c      	ldr	r4, [r1, #16]
 800b3c4:	42a3      	cmp	r3, r4
 800b3c6:	4607      	mov	r7, r0
 800b3c8:	f2c0 8081 	blt.w	800b4ce <quorem+0x112>
 800b3cc:	3c01      	subs	r4, #1
 800b3ce:	f101 0814 	add.w	r8, r1, #20
 800b3d2:	f100 0514 	add.w	r5, r0, #20
 800b3d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3da:	9301      	str	r3, [sp, #4]
 800b3dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b3e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b3ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b3f0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b3f4:	d331      	bcc.n	800b45a <quorem+0x9e>
 800b3f6:	f04f 0e00 	mov.w	lr, #0
 800b3fa:	4640      	mov	r0, r8
 800b3fc:	46ac      	mov	ip, r5
 800b3fe:	46f2      	mov	sl, lr
 800b400:	f850 2b04 	ldr.w	r2, [r0], #4
 800b404:	b293      	uxth	r3, r2
 800b406:	fb06 e303 	mla	r3, r6, r3, lr
 800b40a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b40e:	b29b      	uxth	r3, r3
 800b410:	ebaa 0303 	sub.w	r3, sl, r3
 800b414:	f8dc a000 	ldr.w	sl, [ip]
 800b418:	0c12      	lsrs	r2, r2, #16
 800b41a:	fa13 f38a 	uxtah	r3, r3, sl
 800b41e:	fb06 e202 	mla	r2, r6, r2, lr
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	9b00      	ldr	r3, [sp, #0]
 800b426:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b42a:	b292      	uxth	r2, r2
 800b42c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b430:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b434:	f8bd 3000 	ldrh.w	r3, [sp]
 800b438:	4581      	cmp	r9, r0
 800b43a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b43e:	f84c 3b04 	str.w	r3, [ip], #4
 800b442:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b446:	d2db      	bcs.n	800b400 <quorem+0x44>
 800b448:	f855 300b 	ldr.w	r3, [r5, fp]
 800b44c:	b92b      	cbnz	r3, 800b45a <quorem+0x9e>
 800b44e:	9b01      	ldr	r3, [sp, #4]
 800b450:	3b04      	subs	r3, #4
 800b452:	429d      	cmp	r5, r3
 800b454:	461a      	mov	r2, r3
 800b456:	d32e      	bcc.n	800b4b6 <quorem+0xfa>
 800b458:	613c      	str	r4, [r7, #16]
 800b45a:	4638      	mov	r0, r7
 800b45c:	f001 fca4 	bl	800cda8 <__mcmp>
 800b460:	2800      	cmp	r0, #0
 800b462:	db24      	blt.n	800b4ae <quorem+0xf2>
 800b464:	3601      	adds	r6, #1
 800b466:	4628      	mov	r0, r5
 800b468:	f04f 0c00 	mov.w	ip, #0
 800b46c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b470:	f8d0 e000 	ldr.w	lr, [r0]
 800b474:	b293      	uxth	r3, r2
 800b476:	ebac 0303 	sub.w	r3, ip, r3
 800b47a:	0c12      	lsrs	r2, r2, #16
 800b47c:	fa13 f38e 	uxtah	r3, r3, lr
 800b480:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b484:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b488:	b29b      	uxth	r3, r3
 800b48a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b48e:	45c1      	cmp	r9, r8
 800b490:	f840 3b04 	str.w	r3, [r0], #4
 800b494:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b498:	d2e8      	bcs.n	800b46c <quorem+0xb0>
 800b49a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b49e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b4a2:	b922      	cbnz	r2, 800b4ae <quorem+0xf2>
 800b4a4:	3b04      	subs	r3, #4
 800b4a6:	429d      	cmp	r5, r3
 800b4a8:	461a      	mov	r2, r3
 800b4aa:	d30a      	bcc.n	800b4c2 <quorem+0x106>
 800b4ac:	613c      	str	r4, [r7, #16]
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	b003      	add	sp, #12
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b6:	6812      	ldr	r2, [r2, #0]
 800b4b8:	3b04      	subs	r3, #4
 800b4ba:	2a00      	cmp	r2, #0
 800b4bc:	d1cc      	bne.n	800b458 <quorem+0x9c>
 800b4be:	3c01      	subs	r4, #1
 800b4c0:	e7c7      	b.n	800b452 <quorem+0x96>
 800b4c2:	6812      	ldr	r2, [r2, #0]
 800b4c4:	3b04      	subs	r3, #4
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	d1f0      	bne.n	800b4ac <quorem+0xf0>
 800b4ca:	3c01      	subs	r4, #1
 800b4cc:	e7eb      	b.n	800b4a6 <quorem+0xea>
 800b4ce:	2000      	movs	r0, #0
 800b4d0:	e7ee      	b.n	800b4b0 <quorem+0xf4>
 800b4d2:	0000      	movs	r0, r0
 800b4d4:	0000      	movs	r0, r0
	...

0800b4d8 <_dtoa_r>:
 800b4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4dc:	ed2d 8b04 	vpush	{d8-d9}
 800b4e0:	ec57 6b10 	vmov	r6, r7, d0
 800b4e4:	b093      	sub	sp, #76	; 0x4c
 800b4e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b4e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b4ec:	9106      	str	r1, [sp, #24]
 800b4ee:	ee10 aa10 	vmov	sl, s0
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b4f8:	46bb      	mov	fp, r7
 800b4fa:	b975      	cbnz	r5, 800b51a <_dtoa_r+0x42>
 800b4fc:	2010      	movs	r0, #16
 800b4fe:	f001 f95f 	bl	800c7c0 <malloc>
 800b502:	4602      	mov	r2, r0
 800b504:	6260      	str	r0, [r4, #36]	; 0x24
 800b506:	b920      	cbnz	r0, 800b512 <_dtoa_r+0x3a>
 800b508:	4ba7      	ldr	r3, [pc, #668]	; (800b7a8 <_dtoa_r+0x2d0>)
 800b50a:	21ea      	movs	r1, #234	; 0xea
 800b50c:	48a7      	ldr	r0, [pc, #668]	; (800b7ac <_dtoa_r+0x2d4>)
 800b50e:	f002 fceb 	bl	800dee8 <__assert_func>
 800b512:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b516:	6005      	str	r5, [r0, #0]
 800b518:	60c5      	str	r5, [r0, #12]
 800b51a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b51c:	6819      	ldr	r1, [r3, #0]
 800b51e:	b151      	cbz	r1, 800b536 <_dtoa_r+0x5e>
 800b520:	685a      	ldr	r2, [r3, #4]
 800b522:	604a      	str	r2, [r1, #4]
 800b524:	2301      	movs	r3, #1
 800b526:	4093      	lsls	r3, r2
 800b528:	608b      	str	r3, [r1, #8]
 800b52a:	4620      	mov	r0, r4
 800b52c:	f001 f9b0 	bl	800c890 <_Bfree>
 800b530:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b532:	2200      	movs	r2, #0
 800b534:	601a      	str	r2, [r3, #0]
 800b536:	1e3b      	subs	r3, r7, #0
 800b538:	bfaa      	itet	ge
 800b53a:	2300      	movge	r3, #0
 800b53c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b540:	f8c8 3000 	strge.w	r3, [r8]
 800b544:	4b9a      	ldr	r3, [pc, #616]	; (800b7b0 <_dtoa_r+0x2d8>)
 800b546:	bfbc      	itt	lt
 800b548:	2201      	movlt	r2, #1
 800b54a:	f8c8 2000 	strlt.w	r2, [r8]
 800b54e:	ea33 030b 	bics.w	r3, r3, fp
 800b552:	d11b      	bne.n	800b58c <_dtoa_r+0xb4>
 800b554:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b556:	f242 730f 	movw	r3, #9999	; 0x270f
 800b55a:	6013      	str	r3, [r2, #0]
 800b55c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b560:	4333      	orrs	r3, r6
 800b562:	f000 8592 	beq.w	800c08a <_dtoa_r+0xbb2>
 800b566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b568:	b963      	cbnz	r3, 800b584 <_dtoa_r+0xac>
 800b56a:	4b92      	ldr	r3, [pc, #584]	; (800b7b4 <_dtoa_r+0x2dc>)
 800b56c:	e022      	b.n	800b5b4 <_dtoa_r+0xdc>
 800b56e:	4b92      	ldr	r3, [pc, #584]	; (800b7b8 <_dtoa_r+0x2e0>)
 800b570:	9301      	str	r3, [sp, #4]
 800b572:	3308      	adds	r3, #8
 800b574:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b576:	6013      	str	r3, [r2, #0]
 800b578:	9801      	ldr	r0, [sp, #4]
 800b57a:	b013      	add	sp, #76	; 0x4c
 800b57c:	ecbd 8b04 	vpop	{d8-d9}
 800b580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b584:	4b8b      	ldr	r3, [pc, #556]	; (800b7b4 <_dtoa_r+0x2dc>)
 800b586:	9301      	str	r3, [sp, #4]
 800b588:	3303      	adds	r3, #3
 800b58a:	e7f3      	b.n	800b574 <_dtoa_r+0x9c>
 800b58c:	2200      	movs	r2, #0
 800b58e:	2300      	movs	r3, #0
 800b590:	4650      	mov	r0, sl
 800b592:	4659      	mov	r1, fp
 800b594:	f7f5 fab8 	bl	8000b08 <__aeabi_dcmpeq>
 800b598:	ec4b ab19 	vmov	d9, sl, fp
 800b59c:	4680      	mov	r8, r0
 800b59e:	b158      	cbz	r0, 800b5b8 <_dtoa_r+0xe0>
 800b5a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	f000 856b 	beq.w	800c084 <_dtoa_r+0xbac>
 800b5ae:	4883      	ldr	r0, [pc, #524]	; (800b7bc <_dtoa_r+0x2e4>)
 800b5b0:	6018      	str	r0, [r3, #0]
 800b5b2:	1e43      	subs	r3, r0, #1
 800b5b4:	9301      	str	r3, [sp, #4]
 800b5b6:	e7df      	b.n	800b578 <_dtoa_r+0xa0>
 800b5b8:	ec4b ab10 	vmov	d0, sl, fp
 800b5bc:	aa10      	add	r2, sp, #64	; 0x40
 800b5be:	a911      	add	r1, sp, #68	; 0x44
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f001 fd13 	bl	800cfec <__d2b>
 800b5c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b5ca:	ee08 0a10 	vmov	s16, r0
 800b5ce:	2d00      	cmp	r5, #0
 800b5d0:	f000 8084 	beq.w	800b6dc <_dtoa_r+0x204>
 800b5d4:	ee19 3a90 	vmov	r3, s19
 800b5d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b5dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b5e0:	4656      	mov	r6, sl
 800b5e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b5e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b5ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b5ee:	4b74      	ldr	r3, [pc, #464]	; (800b7c0 <_dtoa_r+0x2e8>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f4 fe67 	bl	80002c8 <__aeabi_dsub>
 800b5fa:	a365      	add	r3, pc, #404	; (adr r3, 800b790 <_dtoa_r+0x2b8>)
 800b5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b600:	f7f5 f81a 	bl	8000638 <__aeabi_dmul>
 800b604:	a364      	add	r3, pc, #400	; (adr r3, 800b798 <_dtoa_r+0x2c0>)
 800b606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60a:	f7f4 fe5f 	bl	80002cc <__adddf3>
 800b60e:	4606      	mov	r6, r0
 800b610:	4628      	mov	r0, r5
 800b612:	460f      	mov	r7, r1
 800b614:	f7f4 ffa6 	bl	8000564 <__aeabi_i2d>
 800b618:	a361      	add	r3, pc, #388	; (adr r3, 800b7a0 <_dtoa_r+0x2c8>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f7f5 f80b 	bl	8000638 <__aeabi_dmul>
 800b622:	4602      	mov	r2, r0
 800b624:	460b      	mov	r3, r1
 800b626:	4630      	mov	r0, r6
 800b628:	4639      	mov	r1, r7
 800b62a:	f7f4 fe4f 	bl	80002cc <__adddf3>
 800b62e:	4606      	mov	r6, r0
 800b630:	460f      	mov	r7, r1
 800b632:	f7f5 fab1 	bl	8000b98 <__aeabi_d2iz>
 800b636:	2200      	movs	r2, #0
 800b638:	9000      	str	r0, [sp, #0]
 800b63a:	2300      	movs	r3, #0
 800b63c:	4630      	mov	r0, r6
 800b63e:	4639      	mov	r1, r7
 800b640:	f7f5 fa6c 	bl	8000b1c <__aeabi_dcmplt>
 800b644:	b150      	cbz	r0, 800b65c <_dtoa_r+0x184>
 800b646:	9800      	ldr	r0, [sp, #0]
 800b648:	f7f4 ff8c 	bl	8000564 <__aeabi_i2d>
 800b64c:	4632      	mov	r2, r6
 800b64e:	463b      	mov	r3, r7
 800b650:	f7f5 fa5a 	bl	8000b08 <__aeabi_dcmpeq>
 800b654:	b910      	cbnz	r0, 800b65c <_dtoa_r+0x184>
 800b656:	9b00      	ldr	r3, [sp, #0]
 800b658:	3b01      	subs	r3, #1
 800b65a:	9300      	str	r3, [sp, #0]
 800b65c:	9b00      	ldr	r3, [sp, #0]
 800b65e:	2b16      	cmp	r3, #22
 800b660:	d85a      	bhi.n	800b718 <_dtoa_r+0x240>
 800b662:	9a00      	ldr	r2, [sp, #0]
 800b664:	4b57      	ldr	r3, [pc, #348]	; (800b7c4 <_dtoa_r+0x2ec>)
 800b666:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66e:	ec51 0b19 	vmov	r0, r1, d9
 800b672:	f7f5 fa53 	bl	8000b1c <__aeabi_dcmplt>
 800b676:	2800      	cmp	r0, #0
 800b678:	d050      	beq.n	800b71c <_dtoa_r+0x244>
 800b67a:	9b00      	ldr	r3, [sp, #0]
 800b67c:	3b01      	subs	r3, #1
 800b67e:	9300      	str	r3, [sp, #0]
 800b680:	2300      	movs	r3, #0
 800b682:	930b      	str	r3, [sp, #44]	; 0x2c
 800b684:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b686:	1b5d      	subs	r5, r3, r5
 800b688:	1e6b      	subs	r3, r5, #1
 800b68a:	9305      	str	r3, [sp, #20]
 800b68c:	bf45      	ittet	mi
 800b68e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b692:	9304      	strmi	r3, [sp, #16]
 800b694:	2300      	movpl	r3, #0
 800b696:	2300      	movmi	r3, #0
 800b698:	bf4c      	ite	mi
 800b69a:	9305      	strmi	r3, [sp, #20]
 800b69c:	9304      	strpl	r3, [sp, #16]
 800b69e:	9b00      	ldr	r3, [sp, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	db3d      	blt.n	800b720 <_dtoa_r+0x248>
 800b6a4:	9b05      	ldr	r3, [sp, #20]
 800b6a6:	9a00      	ldr	r2, [sp, #0]
 800b6a8:	920a      	str	r2, [sp, #40]	; 0x28
 800b6aa:	4413      	add	r3, r2
 800b6ac:	9305      	str	r3, [sp, #20]
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	9307      	str	r3, [sp, #28]
 800b6b2:	9b06      	ldr	r3, [sp, #24]
 800b6b4:	2b09      	cmp	r3, #9
 800b6b6:	f200 8089 	bhi.w	800b7cc <_dtoa_r+0x2f4>
 800b6ba:	2b05      	cmp	r3, #5
 800b6bc:	bfc4      	itt	gt
 800b6be:	3b04      	subgt	r3, #4
 800b6c0:	9306      	strgt	r3, [sp, #24]
 800b6c2:	9b06      	ldr	r3, [sp, #24]
 800b6c4:	f1a3 0302 	sub.w	r3, r3, #2
 800b6c8:	bfcc      	ite	gt
 800b6ca:	2500      	movgt	r5, #0
 800b6cc:	2501      	movle	r5, #1
 800b6ce:	2b03      	cmp	r3, #3
 800b6d0:	f200 8087 	bhi.w	800b7e2 <_dtoa_r+0x30a>
 800b6d4:	e8df f003 	tbb	[pc, r3]
 800b6d8:	59383a2d 	.word	0x59383a2d
 800b6dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b6e0:	441d      	add	r5, r3
 800b6e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b6e6:	2b20      	cmp	r3, #32
 800b6e8:	bfc1      	itttt	gt
 800b6ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b6f2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b6f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b6fa:	bfda      	itte	le
 800b6fc:	f1c3 0320 	rsble	r3, r3, #32
 800b700:	fa06 f003 	lslle.w	r0, r6, r3
 800b704:	4318      	orrgt	r0, r3
 800b706:	f7f4 ff1d 	bl	8000544 <__aeabi_ui2d>
 800b70a:	2301      	movs	r3, #1
 800b70c:	4606      	mov	r6, r0
 800b70e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b712:	3d01      	subs	r5, #1
 800b714:	930e      	str	r3, [sp, #56]	; 0x38
 800b716:	e76a      	b.n	800b5ee <_dtoa_r+0x116>
 800b718:	2301      	movs	r3, #1
 800b71a:	e7b2      	b.n	800b682 <_dtoa_r+0x1aa>
 800b71c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b71e:	e7b1      	b.n	800b684 <_dtoa_r+0x1ac>
 800b720:	9b04      	ldr	r3, [sp, #16]
 800b722:	9a00      	ldr	r2, [sp, #0]
 800b724:	1a9b      	subs	r3, r3, r2
 800b726:	9304      	str	r3, [sp, #16]
 800b728:	4253      	negs	r3, r2
 800b72a:	9307      	str	r3, [sp, #28]
 800b72c:	2300      	movs	r3, #0
 800b72e:	930a      	str	r3, [sp, #40]	; 0x28
 800b730:	e7bf      	b.n	800b6b2 <_dtoa_r+0x1da>
 800b732:	2300      	movs	r3, #0
 800b734:	9308      	str	r3, [sp, #32]
 800b736:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b738:	2b00      	cmp	r3, #0
 800b73a:	dc55      	bgt.n	800b7e8 <_dtoa_r+0x310>
 800b73c:	2301      	movs	r3, #1
 800b73e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b742:	461a      	mov	r2, r3
 800b744:	9209      	str	r2, [sp, #36]	; 0x24
 800b746:	e00c      	b.n	800b762 <_dtoa_r+0x28a>
 800b748:	2301      	movs	r3, #1
 800b74a:	e7f3      	b.n	800b734 <_dtoa_r+0x25c>
 800b74c:	2300      	movs	r3, #0
 800b74e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b750:	9308      	str	r3, [sp, #32]
 800b752:	9b00      	ldr	r3, [sp, #0]
 800b754:	4413      	add	r3, r2
 800b756:	9302      	str	r3, [sp, #8]
 800b758:	3301      	adds	r3, #1
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	9303      	str	r3, [sp, #12]
 800b75e:	bfb8      	it	lt
 800b760:	2301      	movlt	r3, #1
 800b762:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b764:	2200      	movs	r2, #0
 800b766:	6042      	str	r2, [r0, #4]
 800b768:	2204      	movs	r2, #4
 800b76a:	f102 0614 	add.w	r6, r2, #20
 800b76e:	429e      	cmp	r6, r3
 800b770:	6841      	ldr	r1, [r0, #4]
 800b772:	d93d      	bls.n	800b7f0 <_dtoa_r+0x318>
 800b774:	4620      	mov	r0, r4
 800b776:	f001 f84b 	bl	800c810 <_Balloc>
 800b77a:	9001      	str	r0, [sp, #4]
 800b77c:	2800      	cmp	r0, #0
 800b77e:	d13b      	bne.n	800b7f8 <_dtoa_r+0x320>
 800b780:	4b11      	ldr	r3, [pc, #68]	; (800b7c8 <_dtoa_r+0x2f0>)
 800b782:	4602      	mov	r2, r0
 800b784:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b788:	e6c0      	b.n	800b50c <_dtoa_r+0x34>
 800b78a:	2301      	movs	r3, #1
 800b78c:	e7df      	b.n	800b74e <_dtoa_r+0x276>
 800b78e:	bf00      	nop
 800b790:	636f4361 	.word	0x636f4361
 800b794:	3fd287a7 	.word	0x3fd287a7
 800b798:	8b60c8b3 	.word	0x8b60c8b3
 800b79c:	3fc68a28 	.word	0x3fc68a28
 800b7a0:	509f79fb 	.word	0x509f79fb
 800b7a4:	3fd34413 	.word	0x3fd34413
 800b7a8:	0800ecde 	.word	0x0800ecde
 800b7ac:	0800ecf5 	.word	0x0800ecf5
 800b7b0:	7ff00000 	.word	0x7ff00000
 800b7b4:	0800ecda 	.word	0x0800ecda
 800b7b8:	0800ecd1 	.word	0x0800ecd1
 800b7bc:	0800ef4a 	.word	0x0800ef4a
 800b7c0:	3ff80000 	.word	0x3ff80000
 800b7c4:	0800ee60 	.word	0x0800ee60
 800b7c8:	0800ed50 	.word	0x0800ed50
 800b7cc:	2501      	movs	r5, #1
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	9306      	str	r3, [sp, #24]
 800b7d2:	9508      	str	r5, [sp, #32]
 800b7d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	2312      	movs	r3, #18
 800b7e0:	e7b0      	b.n	800b744 <_dtoa_r+0x26c>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	9308      	str	r3, [sp, #32]
 800b7e6:	e7f5      	b.n	800b7d4 <_dtoa_r+0x2fc>
 800b7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b7ee:	e7b8      	b.n	800b762 <_dtoa_r+0x28a>
 800b7f0:	3101      	adds	r1, #1
 800b7f2:	6041      	str	r1, [r0, #4]
 800b7f4:	0052      	lsls	r2, r2, #1
 800b7f6:	e7b8      	b.n	800b76a <_dtoa_r+0x292>
 800b7f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b7fa:	9a01      	ldr	r2, [sp, #4]
 800b7fc:	601a      	str	r2, [r3, #0]
 800b7fe:	9b03      	ldr	r3, [sp, #12]
 800b800:	2b0e      	cmp	r3, #14
 800b802:	f200 809d 	bhi.w	800b940 <_dtoa_r+0x468>
 800b806:	2d00      	cmp	r5, #0
 800b808:	f000 809a 	beq.w	800b940 <_dtoa_r+0x468>
 800b80c:	9b00      	ldr	r3, [sp, #0]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	dd32      	ble.n	800b878 <_dtoa_r+0x3a0>
 800b812:	4ab7      	ldr	r2, [pc, #732]	; (800baf0 <_dtoa_r+0x618>)
 800b814:	f003 030f 	and.w	r3, r3, #15
 800b818:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b81c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b820:	9b00      	ldr	r3, [sp, #0]
 800b822:	05d8      	lsls	r0, r3, #23
 800b824:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b828:	d516      	bpl.n	800b858 <_dtoa_r+0x380>
 800b82a:	4bb2      	ldr	r3, [pc, #712]	; (800baf4 <_dtoa_r+0x61c>)
 800b82c:	ec51 0b19 	vmov	r0, r1, d9
 800b830:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b834:	f7f5 f82a 	bl	800088c <__aeabi_ddiv>
 800b838:	f007 070f 	and.w	r7, r7, #15
 800b83c:	4682      	mov	sl, r0
 800b83e:	468b      	mov	fp, r1
 800b840:	2503      	movs	r5, #3
 800b842:	4eac      	ldr	r6, [pc, #688]	; (800baf4 <_dtoa_r+0x61c>)
 800b844:	b957      	cbnz	r7, 800b85c <_dtoa_r+0x384>
 800b846:	4642      	mov	r2, r8
 800b848:	464b      	mov	r3, r9
 800b84a:	4650      	mov	r0, sl
 800b84c:	4659      	mov	r1, fp
 800b84e:	f7f5 f81d 	bl	800088c <__aeabi_ddiv>
 800b852:	4682      	mov	sl, r0
 800b854:	468b      	mov	fp, r1
 800b856:	e028      	b.n	800b8aa <_dtoa_r+0x3d2>
 800b858:	2502      	movs	r5, #2
 800b85a:	e7f2      	b.n	800b842 <_dtoa_r+0x36a>
 800b85c:	07f9      	lsls	r1, r7, #31
 800b85e:	d508      	bpl.n	800b872 <_dtoa_r+0x39a>
 800b860:	4640      	mov	r0, r8
 800b862:	4649      	mov	r1, r9
 800b864:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b868:	f7f4 fee6 	bl	8000638 <__aeabi_dmul>
 800b86c:	3501      	adds	r5, #1
 800b86e:	4680      	mov	r8, r0
 800b870:	4689      	mov	r9, r1
 800b872:	107f      	asrs	r7, r7, #1
 800b874:	3608      	adds	r6, #8
 800b876:	e7e5      	b.n	800b844 <_dtoa_r+0x36c>
 800b878:	f000 809b 	beq.w	800b9b2 <_dtoa_r+0x4da>
 800b87c:	9b00      	ldr	r3, [sp, #0]
 800b87e:	4f9d      	ldr	r7, [pc, #628]	; (800baf4 <_dtoa_r+0x61c>)
 800b880:	425e      	negs	r6, r3
 800b882:	4b9b      	ldr	r3, [pc, #620]	; (800baf0 <_dtoa_r+0x618>)
 800b884:	f006 020f 	and.w	r2, r6, #15
 800b888:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	ec51 0b19 	vmov	r0, r1, d9
 800b894:	f7f4 fed0 	bl	8000638 <__aeabi_dmul>
 800b898:	1136      	asrs	r6, r6, #4
 800b89a:	4682      	mov	sl, r0
 800b89c:	468b      	mov	fp, r1
 800b89e:	2300      	movs	r3, #0
 800b8a0:	2502      	movs	r5, #2
 800b8a2:	2e00      	cmp	r6, #0
 800b8a4:	d17a      	bne.n	800b99c <_dtoa_r+0x4c4>
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d1d3      	bne.n	800b852 <_dtoa_r+0x37a>
 800b8aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	f000 8082 	beq.w	800b9b6 <_dtoa_r+0x4de>
 800b8b2:	4b91      	ldr	r3, [pc, #580]	; (800baf8 <_dtoa_r+0x620>)
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	4650      	mov	r0, sl
 800b8b8:	4659      	mov	r1, fp
 800b8ba:	f7f5 f92f 	bl	8000b1c <__aeabi_dcmplt>
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	d079      	beq.n	800b9b6 <_dtoa_r+0x4de>
 800b8c2:	9b03      	ldr	r3, [sp, #12]
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	d076      	beq.n	800b9b6 <_dtoa_r+0x4de>
 800b8c8:	9b02      	ldr	r3, [sp, #8]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	dd36      	ble.n	800b93c <_dtoa_r+0x464>
 800b8ce:	9b00      	ldr	r3, [sp, #0]
 800b8d0:	4650      	mov	r0, sl
 800b8d2:	4659      	mov	r1, fp
 800b8d4:	1e5f      	subs	r7, r3, #1
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	4b88      	ldr	r3, [pc, #544]	; (800bafc <_dtoa_r+0x624>)
 800b8da:	f7f4 fead 	bl	8000638 <__aeabi_dmul>
 800b8de:	9e02      	ldr	r6, [sp, #8]
 800b8e0:	4682      	mov	sl, r0
 800b8e2:	468b      	mov	fp, r1
 800b8e4:	3501      	adds	r5, #1
 800b8e6:	4628      	mov	r0, r5
 800b8e8:	f7f4 fe3c 	bl	8000564 <__aeabi_i2d>
 800b8ec:	4652      	mov	r2, sl
 800b8ee:	465b      	mov	r3, fp
 800b8f0:	f7f4 fea2 	bl	8000638 <__aeabi_dmul>
 800b8f4:	4b82      	ldr	r3, [pc, #520]	; (800bb00 <_dtoa_r+0x628>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	f7f4 fce8 	bl	80002cc <__adddf3>
 800b8fc:	46d0      	mov	r8, sl
 800b8fe:	46d9      	mov	r9, fp
 800b900:	4682      	mov	sl, r0
 800b902:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b906:	2e00      	cmp	r6, #0
 800b908:	d158      	bne.n	800b9bc <_dtoa_r+0x4e4>
 800b90a:	4b7e      	ldr	r3, [pc, #504]	; (800bb04 <_dtoa_r+0x62c>)
 800b90c:	2200      	movs	r2, #0
 800b90e:	4640      	mov	r0, r8
 800b910:	4649      	mov	r1, r9
 800b912:	f7f4 fcd9 	bl	80002c8 <__aeabi_dsub>
 800b916:	4652      	mov	r2, sl
 800b918:	465b      	mov	r3, fp
 800b91a:	4680      	mov	r8, r0
 800b91c:	4689      	mov	r9, r1
 800b91e:	f7f5 f91b 	bl	8000b58 <__aeabi_dcmpgt>
 800b922:	2800      	cmp	r0, #0
 800b924:	f040 8295 	bne.w	800be52 <_dtoa_r+0x97a>
 800b928:	4652      	mov	r2, sl
 800b92a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b92e:	4640      	mov	r0, r8
 800b930:	4649      	mov	r1, r9
 800b932:	f7f5 f8f3 	bl	8000b1c <__aeabi_dcmplt>
 800b936:	2800      	cmp	r0, #0
 800b938:	f040 8289 	bne.w	800be4e <_dtoa_r+0x976>
 800b93c:	ec5b ab19 	vmov	sl, fp, d9
 800b940:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b942:	2b00      	cmp	r3, #0
 800b944:	f2c0 8148 	blt.w	800bbd8 <_dtoa_r+0x700>
 800b948:	9a00      	ldr	r2, [sp, #0]
 800b94a:	2a0e      	cmp	r2, #14
 800b94c:	f300 8144 	bgt.w	800bbd8 <_dtoa_r+0x700>
 800b950:	4b67      	ldr	r3, [pc, #412]	; (800baf0 <_dtoa_r+0x618>)
 800b952:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b956:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b95a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f280 80d5 	bge.w	800bb0c <_dtoa_r+0x634>
 800b962:	9b03      	ldr	r3, [sp, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	f300 80d1 	bgt.w	800bb0c <_dtoa_r+0x634>
 800b96a:	f040 826f 	bne.w	800be4c <_dtoa_r+0x974>
 800b96e:	4b65      	ldr	r3, [pc, #404]	; (800bb04 <_dtoa_r+0x62c>)
 800b970:	2200      	movs	r2, #0
 800b972:	4640      	mov	r0, r8
 800b974:	4649      	mov	r1, r9
 800b976:	f7f4 fe5f 	bl	8000638 <__aeabi_dmul>
 800b97a:	4652      	mov	r2, sl
 800b97c:	465b      	mov	r3, fp
 800b97e:	f7f5 f8e1 	bl	8000b44 <__aeabi_dcmpge>
 800b982:	9e03      	ldr	r6, [sp, #12]
 800b984:	4637      	mov	r7, r6
 800b986:	2800      	cmp	r0, #0
 800b988:	f040 8245 	bne.w	800be16 <_dtoa_r+0x93e>
 800b98c:	9d01      	ldr	r5, [sp, #4]
 800b98e:	2331      	movs	r3, #49	; 0x31
 800b990:	f805 3b01 	strb.w	r3, [r5], #1
 800b994:	9b00      	ldr	r3, [sp, #0]
 800b996:	3301      	adds	r3, #1
 800b998:	9300      	str	r3, [sp, #0]
 800b99a:	e240      	b.n	800be1e <_dtoa_r+0x946>
 800b99c:	07f2      	lsls	r2, r6, #31
 800b99e:	d505      	bpl.n	800b9ac <_dtoa_r+0x4d4>
 800b9a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9a4:	f7f4 fe48 	bl	8000638 <__aeabi_dmul>
 800b9a8:	3501      	adds	r5, #1
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	1076      	asrs	r6, r6, #1
 800b9ae:	3708      	adds	r7, #8
 800b9b0:	e777      	b.n	800b8a2 <_dtoa_r+0x3ca>
 800b9b2:	2502      	movs	r5, #2
 800b9b4:	e779      	b.n	800b8aa <_dtoa_r+0x3d2>
 800b9b6:	9f00      	ldr	r7, [sp, #0]
 800b9b8:	9e03      	ldr	r6, [sp, #12]
 800b9ba:	e794      	b.n	800b8e6 <_dtoa_r+0x40e>
 800b9bc:	9901      	ldr	r1, [sp, #4]
 800b9be:	4b4c      	ldr	r3, [pc, #304]	; (800baf0 <_dtoa_r+0x618>)
 800b9c0:	4431      	add	r1, r6
 800b9c2:	910d      	str	r1, [sp, #52]	; 0x34
 800b9c4:	9908      	ldr	r1, [sp, #32]
 800b9c6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b9ca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b9ce:	2900      	cmp	r1, #0
 800b9d0:	d043      	beq.n	800ba5a <_dtoa_r+0x582>
 800b9d2:	494d      	ldr	r1, [pc, #308]	; (800bb08 <_dtoa_r+0x630>)
 800b9d4:	2000      	movs	r0, #0
 800b9d6:	f7f4 ff59 	bl	800088c <__aeabi_ddiv>
 800b9da:	4652      	mov	r2, sl
 800b9dc:	465b      	mov	r3, fp
 800b9de:	f7f4 fc73 	bl	80002c8 <__aeabi_dsub>
 800b9e2:	9d01      	ldr	r5, [sp, #4]
 800b9e4:	4682      	mov	sl, r0
 800b9e6:	468b      	mov	fp, r1
 800b9e8:	4649      	mov	r1, r9
 800b9ea:	4640      	mov	r0, r8
 800b9ec:	f7f5 f8d4 	bl	8000b98 <__aeabi_d2iz>
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	f7f4 fdb7 	bl	8000564 <__aeabi_i2d>
 800b9f6:	4602      	mov	r2, r0
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fc63 	bl	80002c8 <__aeabi_dsub>
 800ba02:	3630      	adds	r6, #48	; 0x30
 800ba04:	f805 6b01 	strb.w	r6, [r5], #1
 800ba08:	4652      	mov	r2, sl
 800ba0a:	465b      	mov	r3, fp
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4689      	mov	r9, r1
 800ba10:	f7f5 f884 	bl	8000b1c <__aeabi_dcmplt>
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d163      	bne.n	800bae0 <_dtoa_r+0x608>
 800ba18:	4642      	mov	r2, r8
 800ba1a:	464b      	mov	r3, r9
 800ba1c:	4936      	ldr	r1, [pc, #216]	; (800baf8 <_dtoa_r+0x620>)
 800ba1e:	2000      	movs	r0, #0
 800ba20:	f7f4 fc52 	bl	80002c8 <__aeabi_dsub>
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	f7f5 f878 	bl	8000b1c <__aeabi_dcmplt>
 800ba2c:	2800      	cmp	r0, #0
 800ba2e:	f040 80b5 	bne.w	800bb9c <_dtoa_r+0x6c4>
 800ba32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba34:	429d      	cmp	r5, r3
 800ba36:	d081      	beq.n	800b93c <_dtoa_r+0x464>
 800ba38:	4b30      	ldr	r3, [pc, #192]	; (800bafc <_dtoa_r+0x624>)
 800ba3a:	2200      	movs	r2, #0
 800ba3c:	4650      	mov	r0, sl
 800ba3e:	4659      	mov	r1, fp
 800ba40:	f7f4 fdfa 	bl	8000638 <__aeabi_dmul>
 800ba44:	4b2d      	ldr	r3, [pc, #180]	; (800bafc <_dtoa_r+0x624>)
 800ba46:	4682      	mov	sl, r0
 800ba48:	468b      	mov	fp, r1
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	4649      	mov	r1, r9
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f7f4 fdf2 	bl	8000638 <__aeabi_dmul>
 800ba54:	4680      	mov	r8, r0
 800ba56:	4689      	mov	r9, r1
 800ba58:	e7c6      	b.n	800b9e8 <_dtoa_r+0x510>
 800ba5a:	4650      	mov	r0, sl
 800ba5c:	4659      	mov	r1, fp
 800ba5e:	f7f4 fdeb 	bl	8000638 <__aeabi_dmul>
 800ba62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba64:	9d01      	ldr	r5, [sp, #4]
 800ba66:	930f      	str	r3, [sp, #60]	; 0x3c
 800ba68:	4682      	mov	sl, r0
 800ba6a:	468b      	mov	fp, r1
 800ba6c:	4649      	mov	r1, r9
 800ba6e:	4640      	mov	r0, r8
 800ba70:	f7f5 f892 	bl	8000b98 <__aeabi_d2iz>
 800ba74:	4606      	mov	r6, r0
 800ba76:	f7f4 fd75 	bl	8000564 <__aeabi_i2d>
 800ba7a:	3630      	adds	r6, #48	; 0x30
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	460b      	mov	r3, r1
 800ba80:	4640      	mov	r0, r8
 800ba82:	4649      	mov	r1, r9
 800ba84:	f7f4 fc20 	bl	80002c8 <__aeabi_dsub>
 800ba88:	f805 6b01 	strb.w	r6, [r5], #1
 800ba8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba8e:	429d      	cmp	r5, r3
 800ba90:	4680      	mov	r8, r0
 800ba92:	4689      	mov	r9, r1
 800ba94:	f04f 0200 	mov.w	r2, #0
 800ba98:	d124      	bne.n	800bae4 <_dtoa_r+0x60c>
 800ba9a:	4b1b      	ldr	r3, [pc, #108]	; (800bb08 <_dtoa_r+0x630>)
 800ba9c:	4650      	mov	r0, sl
 800ba9e:	4659      	mov	r1, fp
 800baa0:	f7f4 fc14 	bl	80002cc <__adddf3>
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	4640      	mov	r0, r8
 800baaa:	4649      	mov	r1, r9
 800baac:	f7f5 f854 	bl	8000b58 <__aeabi_dcmpgt>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d173      	bne.n	800bb9c <_dtoa_r+0x6c4>
 800bab4:	4652      	mov	r2, sl
 800bab6:	465b      	mov	r3, fp
 800bab8:	4913      	ldr	r1, [pc, #76]	; (800bb08 <_dtoa_r+0x630>)
 800baba:	2000      	movs	r0, #0
 800babc:	f7f4 fc04 	bl	80002c8 <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4640      	mov	r0, r8
 800bac6:	4649      	mov	r1, r9
 800bac8:	f7f5 f828 	bl	8000b1c <__aeabi_dcmplt>
 800bacc:	2800      	cmp	r0, #0
 800bace:	f43f af35 	beq.w	800b93c <_dtoa_r+0x464>
 800bad2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bad4:	1e6b      	subs	r3, r5, #1
 800bad6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bad8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800badc:	2b30      	cmp	r3, #48	; 0x30
 800bade:	d0f8      	beq.n	800bad2 <_dtoa_r+0x5fa>
 800bae0:	9700      	str	r7, [sp, #0]
 800bae2:	e049      	b.n	800bb78 <_dtoa_r+0x6a0>
 800bae4:	4b05      	ldr	r3, [pc, #20]	; (800bafc <_dtoa_r+0x624>)
 800bae6:	f7f4 fda7 	bl	8000638 <__aeabi_dmul>
 800baea:	4680      	mov	r8, r0
 800baec:	4689      	mov	r9, r1
 800baee:	e7bd      	b.n	800ba6c <_dtoa_r+0x594>
 800baf0:	0800ee60 	.word	0x0800ee60
 800baf4:	0800ee38 	.word	0x0800ee38
 800baf8:	3ff00000 	.word	0x3ff00000
 800bafc:	40240000 	.word	0x40240000
 800bb00:	401c0000 	.word	0x401c0000
 800bb04:	40140000 	.word	0x40140000
 800bb08:	3fe00000 	.word	0x3fe00000
 800bb0c:	9d01      	ldr	r5, [sp, #4]
 800bb0e:	4656      	mov	r6, sl
 800bb10:	465f      	mov	r7, fp
 800bb12:	4642      	mov	r2, r8
 800bb14:	464b      	mov	r3, r9
 800bb16:	4630      	mov	r0, r6
 800bb18:	4639      	mov	r1, r7
 800bb1a:	f7f4 feb7 	bl	800088c <__aeabi_ddiv>
 800bb1e:	f7f5 f83b 	bl	8000b98 <__aeabi_d2iz>
 800bb22:	4682      	mov	sl, r0
 800bb24:	f7f4 fd1e 	bl	8000564 <__aeabi_i2d>
 800bb28:	4642      	mov	r2, r8
 800bb2a:	464b      	mov	r3, r9
 800bb2c:	f7f4 fd84 	bl	8000638 <__aeabi_dmul>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4630      	mov	r0, r6
 800bb36:	4639      	mov	r1, r7
 800bb38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bb3c:	f7f4 fbc4 	bl	80002c8 <__aeabi_dsub>
 800bb40:	f805 6b01 	strb.w	r6, [r5], #1
 800bb44:	9e01      	ldr	r6, [sp, #4]
 800bb46:	9f03      	ldr	r7, [sp, #12]
 800bb48:	1bae      	subs	r6, r5, r6
 800bb4a:	42b7      	cmp	r7, r6
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	460b      	mov	r3, r1
 800bb50:	d135      	bne.n	800bbbe <_dtoa_r+0x6e6>
 800bb52:	f7f4 fbbb 	bl	80002cc <__adddf3>
 800bb56:	4642      	mov	r2, r8
 800bb58:	464b      	mov	r3, r9
 800bb5a:	4606      	mov	r6, r0
 800bb5c:	460f      	mov	r7, r1
 800bb5e:	f7f4 fffb 	bl	8000b58 <__aeabi_dcmpgt>
 800bb62:	b9d0      	cbnz	r0, 800bb9a <_dtoa_r+0x6c2>
 800bb64:	4642      	mov	r2, r8
 800bb66:	464b      	mov	r3, r9
 800bb68:	4630      	mov	r0, r6
 800bb6a:	4639      	mov	r1, r7
 800bb6c:	f7f4 ffcc 	bl	8000b08 <__aeabi_dcmpeq>
 800bb70:	b110      	cbz	r0, 800bb78 <_dtoa_r+0x6a0>
 800bb72:	f01a 0f01 	tst.w	sl, #1
 800bb76:	d110      	bne.n	800bb9a <_dtoa_r+0x6c2>
 800bb78:	4620      	mov	r0, r4
 800bb7a:	ee18 1a10 	vmov	r1, s16
 800bb7e:	f000 fe87 	bl	800c890 <_Bfree>
 800bb82:	2300      	movs	r3, #0
 800bb84:	9800      	ldr	r0, [sp, #0]
 800bb86:	702b      	strb	r3, [r5, #0]
 800bb88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb8a:	3001      	adds	r0, #1
 800bb8c:	6018      	str	r0, [r3, #0]
 800bb8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	f43f acf1 	beq.w	800b578 <_dtoa_r+0xa0>
 800bb96:	601d      	str	r5, [r3, #0]
 800bb98:	e4ee      	b.n	800b578 <_dtoa_r+0xa0>
 800bb9a:	9f00      	ldr	r7, [sp, #0]
 800bb9c:	462b      	mov	r3, r5
 800bb9e:	461d      	mov	r5, r3
 800bba0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bba4:	2a39      	cmp	r2, #57	; 0x39
 800bba6:	d106      	bne.n	800bbb6 <_dtoa_r+0x6de>
 800bba8:	9a01      	ldr	r2, [sp, #4]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d1f7      	bne.n	800bb9e <_dtoa_r+0x6c6>
 800bbae:	9901      	ldr	r1, [sp, #4]
 800bbb0:	2230      	movs	r2, #48	; 0x30
 800bbb2:	3701      	adds	r7, #1
 800bbb4:	700a      	strb	r2, [r1, #0]
 800bbb6:	781a      	ldrb	r2, [r3, #0]
 800bbb8:	3201      	adds	r2, #1
 800bbba:	701a      	strb	r2, [r3, #0]
 800bbbc:	e790      	b.n	800bae0 <_dtoa_r+0x608>
 800bbbe:	4ba6      	ldr	r3, [pc, #664]	; (800be58 <_dtoa_r+0x980>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	f7f4 fd39 	bl	8000638 <__aeabi_dmul>
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4606      	mov	r6, r0
 800bbcc:	460f      	mov	r7, r1
 800bbce:	f7f4 ff9b 	bl	8000b08 <__aeabi_dcmpeq>
 800bbd2:	2800      	cmp	r0, #0
 800bbd4:	d09d      	beq.n	800bb12 <_dtoa_r+0x63a>
 800bbd6:	e7cf      	b.n	800bb78 <_dtoa_r+0x6a0>
 800bbd8:	9a08      	ldr	r2, [sp, #32]
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	f000 80d7 	beq.w	800bd8e <_dtoa_r+0x8b6>
 800bbe0:	9a06      	ldr	r2, [sp, #24]
 800bbe2:	2a01      	cmp	r2, #1
 800bbe4:	f300 80ba 	bgt.w	800bd5c <_dtoa_r+0x884>
 800bbe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbea:	2a00      	cmp	r2, #0
 800bbec:	f000 80b2 	beq.w	800bd54 <_dtoa_r+0x87c>
 800bbf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bbf4:	9e07      	ldr	r6, [sp, #28]
 800bbf6:	9d04      	ldr	r5, [sp, #16]
 800bbf8:	9a04      	ldr	r2, [sp, #16]
 800bbfa:	441a      	add	r2, r3
 800bbfc:	9204      	str	r2, [sp, #16]
 800bbfe:	9a05      	ldr	r2, [sp, #20]
 800bc00:	2101      	movs	r1, #1
 800bc02:	441a      	add	r2, r3
 800bc04:	4620      	mov	r0, r4
 800bc06:	9205      	str	r2, [sp, #20]
 800bc08:	f000 ff44 	bl	800ca94 <__i2b>
 800bc0c:	4607      	mov	r7, r0
 800bc0e:	2d00      	cmp	r5, #0
 800bc10:	dd0c      	ble.n	800bc2c <_dtoa_r+0x754>
 800bc12:	9b05      	ldr	r3, [sp, #20]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	dd09      	ble.n	800bc2c <_dtoa_r+0x754>
 800bc18:	42ab      	cmp	r3, r5
 800bc1a:	9a04      	ldr	r2, [sp, #16]
 800bc1c:	bfa8      	it	ge
 800bc1e:	462b      	movge	r3, r5
 800bc20:	1ad2      	subs	r2, r2, r3
 800bc22:	9204      	str	r2, [sp, #16]
 800bc24:	9a05      	ldr	r2, [sp, #20]
 800bc26:	1aed      	subs	r5, r5, r3
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	9305      	str	r3, [sp, #20]
 800bc2c:	9b07      	ldr	r3, [sp, #28]
 800bc2e:	b31b      	cbz	r3, 800bc78 <_dtoa_r+0x7a0>
 800bc30:	9b08      	ldr	r3, [sp, #32]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f000 80af 	beq.w	800bd96 <_dtoa_r+0x8be>
 800bc38:	2e00      	cmp	r6, #0
 800bc3a:	dd13      	ble.n	800bc64 <_dtoa_r+0x78c>
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	4632      	mov	r2, r6
 800bc40:	4620      	mov	r0, r4
 800bc42:	f000 ffe7 	bl	800cc14 <__pow5mult>
 800bc46:	ee18 2a10 	vmov	r2, s16
 800bc4a:	4601      	mov	r1, r0
 800bc4c:	4607      	mov	r7, r0
 800bc4e:	4620      	mov	r0, r4
 800bc50:	f000 ff36 	bl	800cac0 <__multiply>
 800bc54:	ee18 1a10 	vmov	r1, s16
 800bc58:	4680      	mov	r8, r0
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 fe18 	bl	800c890 <_Bfree>
 800bc60:	ee08 8a10 	vmov	s16, r8
 800bc64:	9b07      	ldr	r3, [sp, #28]
 800bc66:	1b9a      	subs	r2, r3, r6
 800bc68:	d006      	beq.n	800bc78 <_dtoa_r+0x7a0>
 800bc6a:	ee18 1a10 	vmov	r1, s16
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f000 ffd0 	bl	800cc14 <__pow5mult>
 800bc74:	ee08 0a10 	vmov	s16, r0
 800bc78:	2101      	movs	r1, #1
 800bc7a:	4620      	mov	r0, r4
 800bc7c:	f000 ff0a 	bl	800ca94 <__i2b>
 800bc80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	4606      	mov	r6, r0
 800bc86:	f340 8088 	ble.w	800bd9a <_dtoa_r+0x8c2>
 800bc8a:	461a      	mov	r2, r3
 800bc8c:	4601      	mov	r1, r0
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f000 ffc0 	bl	800cc14 <__pow5mult>
 800bc94:	9b06      	ldr	r3, [sp, #24]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	4606      	mov	r6, r0
 800bc9a:	f340 8081 	ble.w	800bda0 <_dtoa_r+0x8c8>
 800bc9e:	f04f 0800 	mov.w	r8, #0
 800bca2:	6933      	ldr	r3, [r6, #16]
 800bca4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bca8:	6918      	ldr	r0, [r3, #16]
 800bcaa:	f000 fea3 	bl	800c9f4 <__hi0bits>
 800bcae:	f1c0 0020 	rsb	r0, r0, #32
 800bcb2:	9b05      	ldr	r3, [sp, #20]
 800bcb4:	4418      	add	r0, r3
 800bcb6:	f010 001f 	ands.w	r0, r0, #31
 800bcba:	f000 8092 	beq.w	800bde2 <_dtoa_r+0x90a>
 800bcbe:	f1c0 0320 	rsb	r3, r0, #32
 800bcc2:	2b04      	cmp	r3, #4
 800bcc4:	f340 808a 	ble.w	800bddc <_dtoa_r+0x904>
 800bcc8:	f1c0 001c 	rsb	r0, r0, #28
 800bccc:	9b04      	ldr	r3, [sp, #16]
 800bcce:	4403      	add	r3, r0
 800bcd0:	9304      	str	r3, [sp, #16]
 800bcd2:	9b05      	ldr	r3, [sp, #20]
 800bcd4:	4403      	add	r3, r0
 800bcd6:	4405      	add	r5, r0
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	9b04      	ldr	r3, [sp, #16]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	dd07      	ble.n	800bcf0 <_dtoa_r+0x818>
 800bce0:	ee18 1a10 	vmov	r1, s16
 800bce4:	461a      	mov	r2, r3
 800bce6:	4620      	mov	r0, r4
 800bce8:	f000 ffee 	bl	800ccc8 <__lshift>
 800bcec:	ee08 0a10 	vmov	s16, r0
 800bcf0:	9b05      	ldr	r3, [sp, #20]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	dd05      	ble.n	800bd02 <_dtoa_r+0x82a>
 800bcf6:	4631      	mov	r1, r6
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	f000 ffe4 	bl	800ccc8 <__lshift>
 800bd00:	4606      	mov	r6, r0
 800bd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d06e      	beq.n	800bde6 <_dtoa_r+0x90e>
 800bd08:	ee18 0a10 	vmov	r0, s16
 800bd0c:	4631      	mov	r1, r6
 800bd0e:	f001 f84b 	bl	800cda8 <__mcmp>
 800bd12:	2800      	cmp	r0, #0
 800bd14:	da67      	bge.n	800bde6 <_dtoa_r+0x90e>
 800bd16:	9b00      	ldr	r3, [sp, #0]
 800bd18:	3b01      	subs	r3, #1
 800bd1a:	ee18 1a10 	vmov	r1, s16
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	220a      	movs	r2, #10
 800bd22:	2300      	movs	r3, #0
 800bd24:	4620      	mov	r0, r4
 800bd26:	f000 fdd5 	bl	800c8d4 <__multadd>
 800bd2a:	9b08      	ldr	r3, [sp, #32]
 800bd2c:	ee08 0a10 	vmov	s16, r0
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 81b1 	beq.w	800c098 <_dtoa_r+0xbc0>
 800bd36:	2300      	movs	r3, #0
 800bd38:	4639      	mov	r1, r7
 800bd3a:	220a      	movs	r2, #10
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	f000 fdc9 	bl	800c8d4 <__multadd>
 800bd42:	9b02      	ldr	r3, [sp, #8]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	4607      	mov	r7, r0
 800bd48:	f300 808e 	bgt.w	800be68 <_dtoa_r+0x990>
 800bd4c:	9b06      	ldr	r3, [sp, #24]
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	dc51      	bgt.n	800bdf6 <_dtoa_r+0x91e>
 800bd52:	e089      	b.n	800be68 <_dtoa_r+0x990>
 800bd54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bd5a:	e74b      	b.n	800bbf4 <_dtoa_r+0x71c>
 800bd5c:	9b03      	ldr	r3, [sp, #12]
 800bd5e:	1e5e      	subs	r6, r3, #1
 800bd60:	9b07      	ldr	r3, [sp, #28]
 800bd62:	42b3      	cmp	r3, r6
 800bd64:	bfbf      	itttt	lt
 800bd66:	9b07      	ldrlt	r3, [sp, #28]
 800bd68:	9607      	strlt	r6, [sp, #28]
 800bd6a:	1af2      	sublt	r2, r6, r3
 800bd6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bd6e:	bfb6      	itet	lt
 800bd70:	189b      	addlt	r3, r3, r2
 800bd72:	1b9e      	subge	r6, r3, r6
 800bd74:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bd76:	9b03      	ldr	r3, [sp, #12]
 800bd78:	bfb8      	it	lt
 800bd7a:	2600      	movlt	r6, #0
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	bfb7      	itett	lt
 800bd80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bd84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bd88:	1a9d      	sublt	r5, r3, r2
 800bd8a:	2300      	movlt	r3, #0
 800bd8c:	e734      	b.n	800bbf8 <_dtoa_r+0x720>
 800bd8e:	9e07      	ldr	r6, [sp, #28]
 800bd90:	9d04      	ldr	r5, [sp, #16]
 800bd92:	9f08      	ldr	r7, [sp, #32]
 800bd94:	e73b      	b.n	800bc0e <_dtoa_r+0x736>
 800bd96:	9a07      	ldr	r2, [sp, #28]
 800bd98:	e767      	b.n	800bc6a <_dtoa_r+0x792>
 800bd9a:	9b06      	ldr	r3, [sp, #24]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	dc18      	bgt.n	800bdd2 <_dtoa_r+0x8fa>
 800bda0:	f1ba 0f00 	cmp.w	sl, #0
 800bda4:	d115      	bne.n	800bdd2 <_dtoa_r+0x8fa>
 800bda6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bdaa:	b993      	cbnz	r3, 800bdd2 <_dtoa_r+0x8fa>
 800bdac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bdb0:	0d1b      	lsrs	r3, r3, #20
 800bdb2:	051b      	lsls	r3, r3, #20
 800bdb4:	b183      	cbz	r3, 800bdd8 <_dtoa_r+0x900>
 800bdb6:	9b04      	ldr	r3, [sp, #16]
 800bdb8:	3301      	adds	r3, #1
 800bdba:	9304      	str	r3, [sp, #16]
 800bdbc:	9b05      	ldr	r3, [sp, #20]
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	9305      	str	r3, [sp, #20]
 800bdc2:	f04f 0801 	mov.w	r8, #1
 800bdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f47f af6a 	bne.w	800bca2 <_dtoa_r+0x7ca>
 800bdce:	2001      	movs	r0, #1
 800bdd0:	e76f      	b.n	800bcb2 <_dtoa_r+0x7da>
 800bdd2:	f04f 0800 	mov.w	r8, #0
 800bdd6:	e7f6      	b.n	800bdc6 <_dtoa_r+0x8ee>
 800bdd8:	4698      	mov	r8, r3
 800bdda:	e7f4      	b.n	800bdc6 <_dtoa_r+0x8ee>
 800bddc:	f43f af7d 	beq.w	800bcda <_dtoa_r+0x802>
 800bde0:	4618      	mov	r0, r3
 800bde2:	301c      	adds	r0, #28
 800bde4:	e772      	b.n	800bccc <_dtoa_r+0x7f4>
 800bde6:	9b03      	ldr	r3, [sp, #12]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	dc37      	bgt.n	800be5c <_dtoa_r+0x984>
 800bdec:	9b06      	ldr	r3, [sp, #24]
 800bdee:	2b02      	cmp	r3, #2
 800bdf0:	dd34      	ble.n	800be5c <_dtoa_r+0x984>
 800bdf2:	9b03      	ldr	r3, [sp, #12]
 800bdf4:	9302      	str	r3, [sp, #8]
 800bdf6:	9b02      	ldr	r3, [sp, #8]
 800bdf8:	b96b      	cbnz	r3, 800be16 <_dtoa_r+0x93e>
 800bdfa:	4631      	mov	r1, r6
 800bdfc:	2205      	movs	r2, #5
 800bdfe:	4620      	mov	r0, r4
 800be00:	f000 fd68 	bl	800c8d4 <__multadd>
 800be04:	4601      	mov	r1, r0
 800be06:	4606      	mov	r6, r0
 800be08:	ee18 0a10 	vmov	r0, s16
 800be0c:	f000 ffcc 	bl	800cda8 <__mcmp>
 800be10:	2800      	cmp	r0, #0
 800be12:	f73f adbb 	bgt.w	800b98c <_dtoa_r+0x4b4>
 800be16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be18:	9d01      	ldr	r5, [sp, #4]
 800be1a:	43db      	mvns	r3, r3
 800be1c:	9300      	str	r3, [sp, #0]
 800be1e:	f04f 0800 	mov.w	r8, #0
 800be22:	4631      	mov	r1, r6
 800be24:	4620      	mov	r0, r4
 800be26:	f000 fd33 	bl	800c890 <_Bfree>
 800be2a:	2f00      	cmp	r7, #0
 800be2c:	f43f aea4 	beq.w	800bb78 <_dtoa_r+0x6a0>
 800be30:	f1b8 0f00 	cmp.w	r8, #0
 800be34:	d005      	beq.n	800be42 <_dtoa_r+0x96a>
 800be36:	45b8      	cmp	r8, r7
 800be38:	d003      	beq.n	800be42 <_dtoa_r+0x96a>
 800be3a:	4641      	mov	r1, r8
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 fd27 	bl	800c890 <_Bfree>
 800be42:	4639      	mov	r1, r7
 800be44:	4620      	mov	r0, r4
 800be46:	f000 fd23 	bl	800c890 <_Bfree>
 800be4a:	e695      	b.n	800bb78 <_dtoa_r+0x6a0>
 800be4c:	2600      	movs	r6, #0
 800be4e:	4637      	mov	r7, r6
 800be50:	e7e1      	b.n	800be16 <_dtoa_r+0x93e>
 800be52:	9700      	str	r7, [sp, #0]
 800be54:	4637      	mov	r7, r6
 800be56:	e599      	b.n	800b98c <_dtoa_r+0x4b4>
 800be58:	40240000 	.word	0x40240000
 800be5c:	9b08      	ldr	r3, [sp, #32]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f000 80ca 	beq.w	800bff8 <_dtoa_r+0xb20>
 800be64:	9b03      	ldr	r3, [sp, #12]
 800be66:	9302      	str	r3, [sp, #8]
 800be68:	2d00      	cmp	r5, #0
 800be6a:	dd05      	ble.n	800be78 <_dtoa_r+0x9a0>
 800be6c:	4639      	mov	r1, r7
 800be6e:	462a      	mov	r2, r5
 800be70:	4620      	mov	r0, r4
 800be72:	f000 ff29 	bl	800ccc8 <__lshift>
 800be76:	4607      	mov	r7, r0
 800be78:	f1b8 0f00 	cmp.w	r8, #0
 800be7c:	d05b      	beq.n	800bf36 <_dtoa_r+0xa5e>
 800be7e:	6879      	ldr	r1, [r7, #4]
 800be80:	4620      	mov	r0, r4
 800be82:	f000 fcc5 	bl	800c810 <_Balloc>
 800be86:	4605      	mov	r5, r0
 800be88:	b928      	cbnz	r0, 800be96 <_dtoa_r+0x9be>
 800be8a:	4b87      	ldr	r3, [pc, #540]	; (800c0a8 <_dtoa_r+0xbd0>)
 800be8c:	4602      	mov	r2, r0
 800be8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be92:	f7ff bb3b 	b.w	800b50c <_dtoa_r+0x34>
 800be96:	693a      	ldr	r2, [r7, #16]
 800be98:	3202      	adds	r2, #2
 800be9a:	0092      	lsls	r2, r2, #2
 800be9c:	f107 010c 	add.w	r1, r7, #12
 800bea0:	300c      	adds	r0, #12
 800bea2:	f000 fca7 	bl	800c7f4 <memcpy>
 800bea6:	2201      	movs	r2, #1
 800bea8:	4629      	mov	r1, r5
 800beaa:	4620      	mov	r0, r4
 800beac:	f000 ff0c 	bl	800ccc8 <__lshift>
 800beb0:	9b01      	ldr	r3, [sp, #4]
 800beb2:	f103 0901 	add.w	r9, r3, #1
 800beb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800beba:	4413      	add	r3, r2
 800bebc:	9305      	str	r3, [sp, #20]
 800bebe:	f00a 0301 	and.w	r3, sl, #1
 800bec2:	46b8      	mov	r8, r7
 800bec4:	9304      	str	r3, [sp, #16]
 800bec6:	4607      	mov	r7, r0
 800bec8:	4631      	mov	r1, r6
 800beca:	ee18 0a10 	vmov	r0, s16
 800bece:	f7ff fa75 	bl	800b3bc <quorem>
 800bed2:	4641      	mov	r1, r8
 800bed4:	9002      	str	r0, [sp, #8]
 800bed6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800beda:	ee18 0a10 	vmov	r0, s16
 800bede:	f000 ff63 	bl	800cda8 <__mcmp>
 800bee2:	463a      	mov	r2, r7
 800bee4:	9003      	str	r0, [sp, #12]
 800bee6:	4631      	mov	r1, r6
 800bee8:	4620      	mov	r0, r4
 800beea:	f000 ff79 	bl	800cde0 <__mdiff>
 800beee:	68c2      	ldr	r2, [r0, #12]
 800bef0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bef4:	4605      	mov	r5, r0
 800bef6:	bb02      	cbnz	r2, 800bf3a <_dtoa_r+0xa62>
 800bef8:	4601      	mov	r1, r0
 800befa:	ee18 0a10 	vmov	r0, s16
 800befe:	f000 ff53 	bl	800cda8 <__mcmp>
 800bf02:	4602      	mov	r2, r0
 800bf04:	4629      	mov	r1, r5
 800bf06:	4620      	mov	r0, r4
 800bf08:	9207      	str	r2, [sp, #28]
 800bf0a:	f000 fcc1 	bl	800c890 <_Bfree>
 800bf0e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bf12:	ea43 0102 	orr.w	r1, r3, r2
 800bf16:	9b04      	ldr	r3, [sp, #16]
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	464d      	mov	r5, r9
 800bf1c:	d10f      	bne.n	800bf3e <_dtoa_r+0xa66>
 800bf1e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf22:	d02a      	beq.n	800bf7a <_dtoa_r+0xaa2>
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	dd02      	ble.n	800bf30 <_dtoa_r+0xa58>
 800bf2a:	9b02      	ldr	r3, [sp, #8]
 800bf2c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bf30:	f88b a000 	strb.w	sl, [fp]
 800bf34:	e775      	b.n	800be22 <_dtoa_r+0x94a>
 800bf36:	4638      	mov	r0, r7
 800bf38:	e7ba      	b.n	800beb0 <_dtoa_r+0x9d8>
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	e7e2      	b.n	800bf04 <_dtoa_r+0xa2c>
 800bf3e:	9b03      	ldr	r3, [sp, #12]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	db04      	blt.n	800bf4e <_dtoa_r+0xa76>
 800bf44:	9906      	ldr	r1, [sp, #24]
 800bf46:	430b      	orrs	r3, r1
 800bf48:	9904      	ldr	r1, [sp, #16]
 800bf4a:	430b      	orrs	r3, r1
 800bf4c:	d122      	bne.n	800bf94 <_dtoa_r+0xabc>
 800bf4e:	2a00      	cmp	r2, #0
 800bf50:	ddee      	ble.n	800bf30 <_dtoa_r+0xa58>
 800bf52:	ee18 1a10 	vmov	r1, s16
 800bf56:	2201      	movs	r2, #1
 800bf58:	4620      	mov	r0, r4
 800bf5a:	f000 feb5 	bl	800ccc8 <__lshift>
 800bf5e:	4631      	mov	r1, r6
 800bf60:	ee08 0a10 	vmov	s16, r0
 800bf64:	f000 ff20 	bl	800cda8 <__mcmp>
 800bf68:	2800      	cmp	r0, #0
 800bf6a:	dc03      	bgt.n	800bf74 <_dtoa_r+0xa9c>
 800bf6c:	d1e0      	bne.n	800bf30 <_dtoa_r+0xa58>
 800bf6e:	f01a 0f01 	tst.w	sl, #1
 800bf72:	d0dd      	beq.n	800bf30 <_dtoa_r+0xa58>
 800bf74:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf78:	d1d7      	bne.n	800bf2a <_dtoa_r+0xa52>
 800bf7a:	2339      	movs	r3, #57	; 0x39
 800bf7c:	f88b 3000 	strb.w	r3, [fp]
 800bf80:	462b      	mov	r3, r5
 800bf82:	461d      	mov	r5, r3
 800bf84:	3b01      	subs	r3, #1
 800bf86:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bf8a:	2a39      	cmp	r2, #57	; 0x39
 800bf8c:	d071      	beq.n	800c072 <_dtoa_r+0xb9a>
 800bf8e:	3201      	adds	r2, #1
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	e746      	b.n	800be22 <_dtoa_r+0x94a>
 800bf94:	2a00      	cmp	r2, #0
 800bf96:	dd07      	ble.n	800bfa8 <_dtoa_r+0xad0>
 800bf98:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bf9c:	d0ed      	beq.n	800bf7a <_dtoa_r+0xaa2>
 800bf9e:	f10a 0301 	add.w	r3, sl, #1
 800bfa2:	f88b 3000 	strb.w	r3, [fp]
 800bfa6:	e73c      	b.n	800be22 <_dtoa_r+0x94a>
 800bfa8:	9b05      	ldr	r3, [sp, #20]
 800bfaa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bfae:	4599      	cmp	r9, r3
 800bfb0:	d047      	beq.n	800c042 <_dtoa_r+0xb6a>
 800bfb2:	ee18 1a10 	vmov	r1, s16
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	220a      	movs	r2, #10
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f000 fc8a 	bl	800c8d4 <__multadd>
 800bfc0:	45b8      	cmp	r8, r7
 800bfc2:	ee08 0a10 	vmov	s16, r0
 800bfc6:	f04f 0300 	mov.w	r3, #0
 800bfca:	f04f 020a 	mov.w	r2, #10
 800bfce:	4641      	mov	r1, r8
 800bfd0:	4620      	mov	r0, r4
 800bfd2:	d106      	bne.n	800bfe2 <_dtoa_r+0xb0a>
 800bfd4:	f000 fc7e 	bl	800c8d4 <__multadd>
 800bfd8:	4680      	mov	r8, r0
 800bfda:	4607      	mov	r7, r0
 800bfdc:	f109 0901 	add.w	r9, r9, #1
 800bfe0:	e772      	b.n	800bec8 <_dtoa_r+0x9f0>
 800bfe2:	f000 fc77 	bl	800c8d4 <__multadd>
 800bfe6:	4639      	mov	r1, r7
 800bfe8:	4680      	mov	r8, r0
 800bfea:	2300      	movs	r3, #0
 800bfec:	220a      	movs	r2, #10
 800bfee:	4620      	mov	r0, r4
 800bff0:	f000 fc70 	bl	800c8d4 <__multadd>
 800bff4:	4607      	mov	r7, r0
 800bff6:	e7f1      	b.n	800bfdc <_dtoa_r+0xb04>
 800bff8:	9b03      	ldr	r3, [sp, #12]
 800bffa:	9302      	str	r3, [sp, #8]
 800bffc:	9d01      	ldr	r5, [sp, #4]
 800bffe:	ee18 0a10 	vmov	r0, s16
 800c002:	4631      	mov	r1, r6
 800c004:	f7ff f9da 	bl	800b3bc <quorem>
 800c008:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c00c:	9b01      	ldr	r3, [sp, #4]
 800c00e:	f805 ab01 	strb.w	sl, [r5], #1
 800c012:	1aea      	subs	r2, r5, r3
 800c014:	9b02      	ldr	r3, [sp, #8]
 800c016:	4293      	cmp	r3, r2
 800c018:	dd09      	ble.n	800c02e <_dtoa_r+0xb56>
 800c01a:	ee18 1a10 	vmov	r1, s16
 800c01e:	2300      	movs	r3, #0
 800c020:	220a      	movs	r2, #10
 800c022:	4620      	mov	r0, r4
 800c024:	f000 fc56 	bl	800c8d4 <__multadd>
 800c028:	ee08 0a10 	vmov	s16, r0
 800c02c:	e7e7      	b.n	800bffe <_dtoa_r+0xb26>
 800c02e:	9b02      	ldr	r3, [sp, #8]
 800c030:	2b00      	cmp	r3, #0
 800c032:	bfc8      	it	gt
 800c034:	461d      	movgt	r5, r3
 800c036:	9b01      	ldr	r3, [sp, #4]
 800c038:	bfd8      	it	le
 800c03a:	2501      	movle	r5, #1
 800c03c:	441d      	add	r5, r3
 800c03e:	f04f 0800 	mov.w	r8, #0
 800c042:	ee18 1a10 	vmov	r1, s16
 800c046:	2201      	movs	r2, #1
 800c048:	4620      	mov	r0, r4
 800c04a:	f000 fe3d 	bl	800ccc8 <__lshift>
 800c04e:	4631      	mov	r1, r6
 800c050:	ee08 0a10 	vmov	s16, r0
 800c054:	f000 fea8 	bl	800cda8 <__mcmp>
 800c058:	2800      	cmp	r0, #0
 800c05a:	dc91      	bgt.n	800bf80 <_dtoa_r+0xaa8>
 800c05c:	d102      	bne.n	800c064 <_dtoa_r+0xb8c>
 800c05e:	f01a 0f01 	tst.w	sl, #1
 800c062:	d18d      	bne.n	800bf80 <_dtoa_r+0xaa8>
 800c064:	462b      	mov	r3, r5
 800c066:	461d      	mov	r5, r3
 800c068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c06c:	2a30      	cmp	r2, #48	; 0x30
 800c06e:	d0fa      	beq.n	800c066 <_dtoa_r+0xb8e>
 800c070:	e6d7      	b.n	800be22 <_dtoa_r+0x94a>
 800c072:	9a01      	ldr	r2, [sp, #4]
 800c074:	429a      	cmp	r2, r3
 800c076:	d184      	bne.n	800bf82 <_dtoa_r+0xaaa>
 800c078:	9b00      	ldr	r3, [sp, #0]
 800c07a:	3301      	adds	r3, #1
 800c07c:	9300      	str	r3, [sp, #0]
 800c07e:	2331      	movs	r3, #49	; 0x31
 800c080:	7013      	strb	r3, [r2, #0]
 800c082:	e6ce      	b.n	800be22 <_dtoa_r+0x94a>
 800c084:	4b09      	ldr	r3, [pc, #36]	; (800c0ac <_dtoa_r+0xbd4>)
 800c086:	f7ff ba95 	b.w	800b5b4 <_dtoa_r+0xdc>
 800c08a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	f47f aa6e 	bne.w	800b56e <_dtoa_r+0x96>
 800c092:	4b07      	ldr	r3, [pc, #28]	; (800c0b0 <_dtoa_r+0xbd8>)
 800c094:	f7ff ba8e 	b.w	800b5b4 <_dtoa_r+0xdc>
 800c098:	9b02      	ldr	r3, [sp, #8]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	dcae      	bgt.n	800bffc <_dtoa_r+0xb24>
 800c09e:	9b06      	ldr	r3, [sp, #24]
 800c0a0:	2b02      	cmp	r3, #2
 800c0a2:	f73f aea8 	bgt.w	800bdf6 <_dtoa_r+0x91e>
 800c0a6:	e7a9      	b.n	800bffc <_dtoa_r+0xb24>
 800c0a8:	0800ed50 	.word	0x0800ed50
 800c0ac:	0800ef49 	.word	0x0800ef49
 800c0b0:	0800ecd1 	.word	0x0800ecd1

0800c0b4 <rshift>:
 800c0b4:	6903      	ldr	r3, [r0, #16]
 800c0b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c0ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c0be:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c0c2:	f100 0414 	add.w	r4, r0, #20
 800c0c6:	dd45      	ble.n	800c154 <rshift+0xa0>
 800c0c8:	f011 011f 	ands.w	r1, r1, #31
 800c0cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c0d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c0d4:	d10c      	bne.n	800c0f0 <rshift+0x3c>
 800c0d6:	f100 0710 	add.w	r7, r0, #16
 800c0da:	4629      	mov	r1, r5
 800c0dc:	42b1      	cmp	r1, r6
 800c0de:	d334      	bcc.n	800c14a <rshift+0x96>
 800c0e0:	1a9b      	subs	r3, r3, r2
 800c0e2:	009b      	lsls	r3, r3, #2
 800c0e4:	1eea      	subs	r2, r5, #3
 800c0e6:	4296      	cmp	r6, r2
 800c0e8:	bf38      	it	cc
 800c0ea:	2300      	movcc	r3, #0
 800c0ec:	4423      	add	r3, r4
 800c0ee:	e015      	b.n	800c11c <rshift+0x68>
 800c0f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c0f4:	f1c1 0820 	rsb	r8, r1, #32
 800c0f8:	40cf      	lsrs	r7, r1
 800c0fa:	f105 0e04 	add.w	lr, r5, #4
 800c0fe:	46a1      	mov	r9, r4
 800c100:	4576      	cmp	r6, lr
 800c102:	46f4      	mov	ip, lr
 800c104:	d815      	bhi.n	800c132 <rshift+0x7e>
 800c106:	1a9a      	subs	r2, r3, r2
 800c108:	0092      	lsls	r2, r2, #2
 800c10a:	3a04      	subs	r2, #4
 800c10c:	3501      	adds	r5, #1
 800c10e:	42ae      	cmp	r6, r5
 800c110:	bf38      	it	cc
 800c112:	2200      	movcc	r2, #0
 800c114:	18a3      	adds	r3, r4, r2
 800c116:	50a7      	str	r7, [r4, r2]
 800c118:	b107      	cbz	r7, 800c11c <rshift+0x68>
 800c11a:	3304      	adds	r3, #4
 800c11c:	1b1a      	subs	r2, r3, r4
 800c11e:	42a3      	cmp	r3, r4
 800c120:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c124:	bf08      	it	eq
 800c126:	2300      	moveq	r3, #0
 800c128:	6102      	str	r2, [r0, #16]
 800c12a:	bf08      	it	eq
 800c12c:	6143      	streq	r3, [r0, #20]
 800c12e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c132:	f8dc c000 	ldr.w	ip, [ip]
 800c136:	fa0c fc08 	lsl.w	ip, ip, r8
 800c13a:	ea4c 0707 	orr.w	r7, ip, r7
 800c13e:	f849 7b04 	str.w	r7, [r9], #4
 800c142:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c146:	40cf      	lsrs	r7, r1
 800c148:	e7da      	b.n	800c100 <rshift+0x4c>
 800c14a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c14e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c152:	e7c3      	b.n	800c0dc <rshift+0x28>
 800c154:	4623      	mov	r3, r4
 800c156:	e7e1      	b.n	800c11c <rshift+0x68>

0800c158 <__hexdig_fun>:
 800c158:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c15c:	2b09      	cmp	r3, #9
 800c15e:	d802      	bhi.n	800c166 <__hexdig_fun+0xe>
 800c160:	3820      	subs	r0, #32
 800c162:	b2c0      	uxtb	r0, r0
 800c164:	4770      	bx	lr
 800c166:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c16a:	2b05      	cmp	r3, #5
 800c16c:	d801      	bhi.n	800c172 <__hexdig_fun+0x1a>
 800c16e:	3847      	subs	r0, #71	; 0x47
 800c170:	e7f7      	b.n	800c162 <__hexdig_fun+0xa>
 800c172:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c176:	2b05      	cmp	r3, #5
 800c178:	d801      	bhi.n	800c17e <__hexdig_fun+0x26>
 800c17a:	3827      	subs	r0, #39	; 0x27
 800c17c:	e7f1      	b.n	800c162 <__hexdig_fun+0xa>
 800c17e:	2000      	movs	r0, #0
 800c180:	4770      	bx	lr
	...

0800c184 <__gethex>:
 800c184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c188:	ed2d 8b02 	vpush	{d8}
 800c18c:	b089      	sub	sp, #36	; 0x24
 800c18e:	ee08 0a10 	vmov	s16, r0
 800c192:	9304      	str	r3, [sp, #16]
 800c194:	4bb4      	ldr	r3, [pc, #720]	; (800c468 <__gethex+0x2e4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	9301      	str	r3, [sp, #4]
 800c19a:	4618      	mov	r0, r3
 800c19c:	468b      	mov	fp, r1
 800c19e:	4690      	mov	r8, r2
 800c1a0:	f7f4 f836 	bl	8000210 <strlen>
 800c1a4:	9b01      	ldr	r3, [sp, #4]
 800c1a6:	f8db 2000 	ldr.w	r2, [fp]
 800c1aa:	4403      	add	r3, r0
 800c1ac:	4682      	mov	sl, r0
 800c1ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c1b2:	9305      	str	r3, [sp, #20]
 800c1b4:	1c93      	adds	r3, r2, #2
 800c1b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c1ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c1be:	32fe      	adds	r2, #254	; 0xfe
 800c1c0:	18d1      	adds	r1, r2, r3
 800c1c2:	461f      	mov	r7, r3
 800c1c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1c8:	9100      	str	r1, [sp, #0]
 800c1ca:	2830      	cmp	r0, #48	; 0x30
 800c1cc:	d0f8      	beq.n	800c1c0 <__gethex+0x3c>
 800c1ce:	f7ff ffc3 	bl	800c158 <__hexdig_fun>
 800c1d2:	4604      	mov	r4, r0
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	d13a      	bne.n	800c24e <__gethex+0xca>
 800c1d8:	9901      	ldr	r1, [sp, #4]
 800c1da:	4652      	mov	r2, sl
 800c1dc:	4638      	mov	r0, r7
 800c1de:	f001 fdb3 	bl	800dd48 <strncmp>
 800c1e2:	4605      	mov	r5, r0
 800c1e4:	2800      	cmp	r0, #0
 800c1e6:	d168      	bne.n	800c2ba <__gethex+0x136>
 800c1e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c1ec:	eb07 060a 	add.w	r6, r7, sl
 800c1f0:	f7ff ffb2 	bl	800c158 <__hexdig_fun>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	d062      	beq.n	800c2be <__gethex+0x13a>
 800c1f8:	4633      	mov	r3, r6
 800c1fa:	7818      	ldrb	r0, [r3, #0]
 800c1fc:	2830      	cmp	r0, #48	; 0x30
 800c1fe:	461f      	mov	r7, r3
 800c200:	f103 0301 	add.w	r3, r3, #1
 800c204:	d0f9      	beq.n	800c1fa <__gethex+0x76>
 800c206:	f7ff ffa7 	bl	800c158 <__hexdig_fun>
 800c20a:	2301      	movs	r3, #1
 800c20c:	fab0 f480 	clz	r4, r0
 800c210:	0964      	lsrs	r4, r4, #5
 800c212:	4635      	mov	r5, r6
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	463a      	mov	r2, r7
 800c218:	4616      	mov	r6, r2
 800c21a:	3201      	adds	r2, #1
 800c21c:	7830      	ldrb	r0, [r6, #0]
 800c21e:	f7ff ff9b 	bl	800c158 <__hexdig_fun>
 800c222:	2800      	cmp	r0, #0
 800c224:	d1f8      	bne.n	800c218 <__gethex+0x94>
 800c226:	9901      	ldr	r1, [sp, #4]
 800c228:	4652      	mov	r2, sl
 800c22a:	4630      	mov	r0, r6
 800c22c:	f001 fd8c 	bl	800dd48 <strncmp>
 800c230:	b980      	cbnz	r0, 800c254 <__gethex+0xd0>
 800c232:	b94d      	cbnz	r5, 800c248 <__gethex+0xc4>
 800c234:	eb06 050a 	add.w	r5, r6, sl
 800c238:	462a      	mov	r2, r5
 800c23a:	4616      	mov	r6, r2
 800c23c:	3201      	adds	r2, #1
 800c23e:	7830      	ldrb	r0, [r6, #0]
 800c240:	f7ff ff8a 	bl	800c158 <__hexdig_fun>
 800c244:	2800      	cmp	r0, #0
 800c246:	d1f8      	bne.n	800c23a <__gethex+0xb6>
 800c248:	1bad      	subs	r5, r5, r6
 800c24a:	00ad      	lsls	r5, r5, #2
 800c24c:	e004      	b.n	800c258 <__gethex+0xd4>
 800c24e:	2400      	movs	r4, #0
 800c250:	4625      	mov	r5, r4
 800c252:	e7e0      	b.n	800c216 <__gethex+0x92>
 800c254:	2d00      	cmp	r5, #0
 800c256:	d1f7      	bne.n	800c248 <__gethex+0xc4>
 800c258:	7833      	ldrb	r3, [r6, #0]
 800c25a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c25e:	2b50      	cmp	r3, #80	; 0x50
 800c260:	d13b      	bne.n	800c2da <__gethex+0x156>
 800c262:	7873      	ldrb	r3, [r6, #1]
 800c264:	2b2b      	cmp	r3, #43	; 0x2b
 800c266:	d02c      	beq.n	800c2c2 <__gethex+0x13e>
 800c268:	2b2d      	cmp	r3, #45	; 0x2d
 800c26a:	d02e      	beq.n	800c2ca <__gethex+0x146>
 800c26c:	1c71      	adds	r1, r6, #1
 800c26e:	f04f 0900 	mov.w	r9, #0
 800c272:	7808      	ldrb	r0, [r1, #0]
 800c274:	f7ff ff70 	bl	800c158 <__hexdig_fun>
 800c278:	1e43      	subs	r3, r0, #1
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b18      	cmp	r3, #24
 800c27e:	d82c      	bhi.n	800c2da <__gethex+0x156>
 800c280:	f1a0 0210 	sub.w	r2, r0, #16
 800c284:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c288:	f7ff ff66 	bl	800c158 <__hexdig_fun>
 800c28c:	1e43      	subs	r3, r0, #1
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b18      	cmp	r3, #24
 800c292:	d91d      	bls.n	800c2d0 <__gethex+0x14c>
 800c294:	f1b9 0f00 	cmp.w	r9, #0
 800c298:	d000      	beq.n	800c29c <__gethex+0x118>
 800c29a:	4252      	negs	r2, r2
 800c29c:	4415      	add	r5, r2
 800c29e:	f8cb 1000 	str.w	r1, [fp]
 800c2a2:	b1e4      	cbz	r4, 800c2de <__gethex+0x15a>
 800c2a4:	9b00      	ldr	r3, [sp, #0]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	bf14      	ite	ne
 800c2aa:	2700      	movne	r7, #0
 800c2ac:	2706      	moveq	r7, #6
 800c2ae:	4638      	mov	r0, r7
 800c2b0:	b009      	add	sp, #36	; 0x24
 800c2b2:	ecbd 8b02 	vpop	{d8}
 800c2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2ba:	463e      	mov	r6, r7
 800c2bc:	4625      	mov	r5, r4
 800c2be:	2401      	movs	r4, #1
 800c2c0:	e7ca      	b.n	800c258 <__gethex+0xd4>
 800c2c2:	f04f 0900 	mov.w	r9, #0
 800c2c6:	1cb1      	adds	r1, r6, #2
 800c2c8:	e7d3      	b.n	800c272 <__gethex+0xee>
 800c2ca:	f04f 0901 	mov.w	r9, #1
 800c2ce:	e7fa      	b.n	800c2c6 <__gethex+0x142>
 800c2d0:	230a      	movs	r3, #10
 800c2d2:	fb03 0202 	mla	r2, r3, r2, r0
 800c2d6:	3a10      	subs	r2, #16
 800c2d8:	e7d4      	b.n	800c284 <__gethex+0x100>
 800c2da:	4631      	mov	r1, r6
 800c2dc:	e7df      	b.n	800c29e <__gethex+0x11a>
 800c2de:	1bf3      	subs	r3, r6, r7
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	4621      	mov	r1, r4
 800c2e4:	2b07      	cmp	r3, #7
 800c2e6:	dc0b      	bgt.n	800c300 <__gethex+0x17c>
 800c2e8:	ee18 0a10 	vmov	r0, s16
 800c2ec:	f000 fa90 	bl	800c810 <_Balloc>
 800c2f0:	4604      	mov	r4, r0
 800c2f2:	b940      	cbnz	r0, 800c306 <__gethex+0x182>
 800c2f4:	4b5d      	ldr	r3, [pc, #372]	; (800c46c <__gethex+0x2e8>)
 800c2f6:	4602      	mov	r2, r0
 800c2f8:	21de      	movs	r1, #222	; 0xde
 800c2fa:	485d      	ldr	r0, [pc, #372]	; (800c470 <__gethex+0x2ec>)
 800c2fc:	f001 fdf4 	bl	800dee8 <__assert_func>
 800c300:	3101      	adds	r1, #1
 800c302:	105b      	asrs	r3, r3, #1
 800c304:	e7ee      	b.n	800c2e4 <__gethex+0x160>
 800c306:	f100 0914 	add.w	r9, r0, #20
 800c30a:	f04f 0b00 	mov.w	fp, #0
 800c30e:	f1ca 0301 	rsb	r3, sl, #1
 800c312:	f8cd 9008 	str.w	r9, [sp, #8]
 800c316:	f8cd b000 	str.w	fp, [sp]
 800c31a:	9306      	str	r3, [sp, #24]
 800c31c:	42b7      	cmp	r7, r6
 800c31e:	d340      	bcc.n	800c3a2 <__gethex+0x21e>
 800c320:	9802      	ldr	r0, [sp, #8]
 800c322:	9b00      	ldr	r3, [sp, #0]
 800c324:	f840 3b04 	str.w	r3, [r0], #4
 800c328:	eba0 0009 	sub.w	r0, r0, r9
 800c32c:	1080      	asrs	r0, r0, #2
 800c32e:	0146      	lsls	r6, r0, #5
 800c330:	6120      	str	r0, [r4, #16]
 800c332:	4618      	mov	r0, r3
 800c334:	f000 fb5e 	bl	800c9f4 <__hi0bits>
 800c338:	1a30      	subs	r0, r6, r0
 800c33a:	f8d8 6000 	ldr.w	r6, [r8]
 800c33e:	42b0      	cmp	r0, r6
 800c340:	dd63      	ble.n	800c40a <__gethex+0x286>
 800c342:	1b87      	subs	r7, r0, r6
 800c344:	4639      	mov	r1, r7
 800c346:	4620      	mov	r0, r4
 800c348:	f000 ff02 	bl	800d150 <__any_on>
 800c34c:	4682      	mov	sl, r0
 800c34e:	b1a8      	cbz	r0, 800c37c <__gethex+0x1f8>
 800c350:	1e7b      	subs	r3, r7, #1
 800c352:	1159      	asrs	r1, r3, #5
 800c354:	f003 021f 	and.w	r2, r3, #31
 800c358:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c35c:	f04f 0a01 	mov.w	sl, #1
 800c360:	fa0a f202 	lsl.w	r2, sl, r2
 800c364:	420a      	tst	r2, r1
 800c366:	d009      	beq.n	800c37c <__gethex+0x1f8>
 800c368:	4553      	cmp	r3, sl
 800c36a:	dd05      	ble.n	800c378 <__gethex+0x1f4>
 800c36c:	1eb9      	subs	r1, r7, #2
 800c36e:	4620      	mov	r0, r4
 800c370:	f000 feee 	bl	800d150 <__any_on>
 800c374:	2800      	cmp	r0, #0
 800c376:	d145      	bne.n	800c404 <__gethex+0x280>
 800c378:	f04f 0a02 	mov.w	sl, #2
 800c37c:	4639      	mov	r1, r7
 800c37e:	4620      	mov	r0, r4
 800c380:	f7ff fe98 	bl	800c0b4 <rshift>
 800c384:	443d      	add	r5, r7
 800c386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c38a:	42ab      	cmp	r3, r5
 800c38c:	da4c      	bge.n	800c428 <__gethex+0x2a4>
 800c38e:	ee18 0a10 	vmov	r0, s16
 800c392:	4621      	mov	r1, r4
 800c394:	f000 fa7c 	bl	800c890 <_Bfree>
 800c398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c39a:	2300      	movs	r3, #0
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	27a3      	movs	r7, #163	; 0xa3
 800c3a0:	e785      	b.n	800c2ae <__gethex+0x12a>
 800c3a2:	1e73      	subs	r3, r6, #1
 800c3a4:	9a05      	ldr	r2, [sp, #20]
 800c3a6:	9303      	str	r3, [sp, #12]
 800c3a8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d019      	beq.n	800c3e4 <__gethex+0x260>
 800c3b0:	f1bb 0f20 	cmp.w	fp, #32
 800c3b4:	d107      	bne.n	800c3c6 <__gethex+0x242>
 800c3b6:	9b02      	ldr	r3, [sp, #8]
 800c3b8:	9a00      	ldr	r2, [sp, #0]
 800c3ba:	f843 2b04 	str.w	r2, [r3], #4
 800c3be:	9302      	str	r3, [sp, #8]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	9300      	str	r3, [sp, #0]
 800c3c4:	469b      	mov	fp, r3
 800c3c6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c3ca:	f7ff fec5 	bl	800c158 <__hexdig_fun>
 800c3ce:	9b00      	ldr	r3, [sp, #0]
 800c3d0:	f000 000f 	and.w	r0, r0, #15
 800c3d4:	fa00 f00b 	lsl.w	r0, r0, fp
 800c3d8:	4303      	orrs	r3, r0
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	f10b 0b04 	add.w	fp, fp, #4
 800c3e0:	9b03      	ldr	r3, [sp, #12]
 800c3e2:	e00d      	b.n	800c400 <__gethex+0x27c>
 800c3e4:	9b03      	ldr	r3, [sp, #12]
 800c3e6:	9a06      	ldr	r2, [sp, #24]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	42bb      	cmp	r3, r7
 800c3ec:	d3e0      	bcc.n	800c3b0 <__gethex+0x22c>
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	9901      	ldr	r1, [sp, #4]
 800c3f2:	9307      	str	r3, [sp, #28]
 800c3f4:	4652      	mov	r2, sl
 800c3f6:	f001 fca7 	bl	800dd48 <strncmp>
 800c3fa:	9b07      	ldr	r3, [sp, #28]
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d1d7      	bne.n	800c3b0 <__gethex+0x22c>
 800c400:	461e      	mov	r6, r3
 800c402:	e78b      	b.n	800c31c <__gethex+0x198>
 800c404:	f04f 0a03 	mov.w	sl, #3
 800c408:	e7b8      	b.n	800c37c <__gethex+0x1f8>
 800c40a:	da0a      	bge.n	800c422 <__gethex+0x29e>
 800c40c:	1a37      	subs	r7, r6, r0
 800c40e:	4621      	mov	r1, r4
 800c410:	ee18 0a10 	vmov	r0, s16
 800c414:	463a      	mov	r2, r7
 800c416:	f000 fc57 	bl	800ccc8 <__lshift>
 800c41a:	1bed      	subs	r5, r5, r7
 800c41c:	4604      	mov	r4, r0
 800c41e:	f100 0914 	add.w	r9, r0, #20
 800c422:	f04f 0a00 	mov.w	sl, #0
 800c426:	e7ae      	b.n	800c386 <__gethex+0x202>
 800c428:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c42c:	42a8      	cmp	r0, r5
 800c42e:	dd72      	ble.n	800c516 <__gethex+0x392>
 800c430:	1b45      	subs	r5, r0, r5
 800c432:	42ae      	cmp	r6, r5
 800c434:	dc36      	bgt.n	800c4a4 <__gethex+0x320>
 800c436:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d02a      	beq.n	800c494 <__gethex+0x310>
 800c43e:	2b03      	cmp	r3, #3
 800c440:	d02c      	beq.n	800c49c <__gethex+0x318>
 800c442:	2b01      	cmp	r3, #1
 800c444:	d11c      	bne.n	800c480 <__gethex+0x2fc>
 800c446:	42ae      	cmp	r6, r5
 800c448:	d11a      	bne.n	800c480 <__gethex+0x2fc>
 800c44a:	2e01      	cmp	r6, #1
 800c44c:	d112      	bne.n	800c474 <__gethex+0x2f0>
 800c44e:	9a04      	ldr	r2, [sp, #16]
 800c450:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c454:	6013      	str	r3, [r2, #0]
 800c456:	2301      	movs	r3, #1
 800c458:	6123      	str	r3, [r4, #16]
 800c45a:	f8c9 3000 	str.w	r3, [r9]
 800c45e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c460:	2762      	movs	r7, #98	; 0x62
 800c462:	601c      	str	r4, [r3, #0]
 800c464:	e723      	b.n	800c2ae <__gethex+0x12a>
 800c466:	bf00      	nop
 800c468:	0800edc8 	.word	0x0800edc8
 800c46c:	0800ed50 	.word	0x0800ed50
 800c470:	0800ed61 	.word	0x0800ed61
 800c474:	1e71      	subs	r1, r6, #1
 800c476:	4620      	mov	r0, r4
 800c478:	f000 fe6a 	bl	800d150 <__any_on>
 800c47c:	2800      	cmp	r0, #0
 800c47e:	d1e6      	bne.n	800c44e <__gethex+0x2ca>
 800c480:	ee18 0a10 	vmov	r0, s16
 800c484:	4621      	mov	r1, r4
 800c486:	f000 fa03 	bl	800c890 <_Bfree>
 800c48a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c48c:	2300      	movs	r3, #0
 800c48e:	6013      	str	r3, [r2, #0]
 800c490:	2750      	movs	r7, #80	; 0x50
 800c492:	e70c      	b.n	800c2ae <__gethex+0x12a>
 800c494:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1f2      	bne.n	800c480 <__gethex+0x2fc>
 800c49a:	e7d8      	b.n	800c44e <__gethex+0x2ca>
 800c49c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d1d5      	bne.n	800c44e <__gethex+0x2ca>
 800c4a2:	e7ed      	b.n	800c480 <__gethex+0x2fc>
 800c4a4:	1e6f      	subs	r7, r5, #1
 800c4a6:	f1ba 0f00 	cmp.w	sl, #0
 800c4aa:	d131      	bne.n	800c510 <__gethex+0x38c>
 800c4ac:	b127      	cbz	r7, 800c4b8 <__gethex+0x334>
 800c4ae:	4639      	mov	r1, r7
 800c4b0:	4620      	mov	r0, r4
 800c4b2:	f000 fe4d 	bl	800d150 <__any_on>
 800c4b6:	4682      	mov	sl, r0
 800c4b8:	117b      	asrs	r3, r7, #5
 800c4ba:	2101      	movs	r1, #1
 800c4bc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c4c0:	f007 071f 	and.w	r7, r7, #31
 800c4c4:	fa01 f707 	lsl.w	r7, r1, r7
 800c4c8:	421f      	tst	r7, r3
 800c4ca:	4629      	mov	r1, r5
 800c4cc:	4620      	mov	r0, r4
 800c4ce:	bf18      	it	ne
 800c4d0:	f04a 0a02 	orrne.w	sl, sl, #2
 800c4d4:	1b76      	subs	r6, r6, r5
 800c4d6:	f7ff fded 	bl	800c0b4 <rshift>
 800c4da:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c4de:	2702      	movs	r7, #2
 800c4e0:	f1ba 0f00 	cmp.w	sl, #0
 800c4e4:	d048      	beq.n	800c578 <__gethex+0x3f4>
 800c4e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c4ea:	2b02      	cmp	r3, #2
 800c4ec:	d015      	beq.n	800c51a <__gethex+0x396>
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d017      	beq.n	800c522 <__gethex+0x39e>
 800c4f2:	2b01      	cmp	r3, #1
 800c4f4:	d109      	bne.n	800c50a <__gethex+0x386>
 800c4f6:	f01a 0f02 	tst.w	sl, #2
 800c4fa:	d006      	beq.n	800c50a <__gethex+0x386>
 800c4fc:	f8d9 0000 	ldr.w	r0, [r9]
 800c500:	ea4a 0a00 	orr.w	sl, sl, r0
 800c504:	f01a 0f01 	tst.w	sl, #1
 800c508:	d10e      	bne.n	800c528 <__gethex+0x3a4>
 800c50a:	f047 0710 	orr.w	r7, r7, #16
 800c50e:	e033      	b.n	800c578 <__gethex+0x3f4>
 800c510:	f04f 0a01 	mov.w	sl, #1
 800c514:	e7d0      	b.n	800c4b8 <__gethex+0x334>
 800c516:	2701      	movs	r7, #1
 800c518:	e7e2      	b.n	800c4e0 <__gethex+0x35c>
 800c51a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c51c:	f1c3 0301 	rsb	r3, r3, #1
 800c520:	9315      	str	r3, [sp, #84]	; 0x54
 800c522:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c524:	2b00      	cmp	r3, #0
 800c526:	d0f0      	beq.n	800c50a <__gethex+0x386>
 800c528:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c52c:	f104 0314 	add.w	r3, r4, #20
 800c530:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c534:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c538:	f04f 0c00 	mov.w	ip, #0
 800c53c:	4618      	mov	r0, r3
 800c53e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c542:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c546:	d01c      	beq.n	800c582 <__gethex+0x3fe>
 800c548:	3201      	adds	r2, #1
 800c54a:	6002      	str	r2, [r0, #0]
 800c54c:	2f02      	cmp	r7, #2
 800c54e:	f104 0314 	add.w	r3, r4, #20
 800c552:	d13f      	bne.n	800c5d4 <__gethex+0x450>
 800c554:	f8d8 2000 	ldr.w	r2, [r8]
 800c558:	3a01      	subs	r2, #1
 800c55a:	42b2      	cmp	r2, r6
 800c55c:	d10a      	bne.n	800c574 <__gethex+0x3f0>
 800c55e:	1171      	asrs	r1, r6, #5
 800c560:	2201      	movs	r2, #1
 800c562:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c566:	f006 061f 	and.w	r6, r6, #31
 800c56a:	fa02 f606 	lsl.w	r6, r2, r6
 800c56e:	421e      	tst	r6, r3
 800c570:	bf18      	it	ne
 800c572:	4617      	movne	r7, r2
 800c574:	f047 0720 	orr.w	r7, r7, #32
 800c578:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c57a:	601c      	str	r4, [r3, #0]
 800c57c:	9b04      	ldr	r3, [sp, #16]
 800c57e:	601d      	str	r5, [r3, #0]
 800c580:	e695      	b.n	800c2ae <__gethex+0x12a>
 800c582:	4299      	cmp	r1, r3
 800c584:	f843 cc04 	str.w	ip, [r3, #-4]
 800c588:	d8d8      	bhi.n	800c53c <__gethex+0x3b8>
 800c58a:	68a3      	ldr	r3, [r4, #8]
 800c58c:	459b      	cmp	fp, r3
 800c58e:	db19      	blt.n	800c5c4 <__gethex+0x440>
 800c590:	6861      	ldr	r1, [r4, #4]
 800c592:	ee18 0a10 	vmov	r0, s16
 800c596:	3101      	adds	r1, #1
 800c598:	f000 f93a 	bl	800c810 <_Balloc>
 800c59c:	4681      	mov	r9, r0
 800c59e:	b918      	cbnz	r0, 800c5a8 <__gethex+0x424>
 800c5a0:	4b1a      	ldr	r3, [pc, #104]	; (800c60c <__gethex+0x488>)
 800c5a2:	4602      	mov	r2, r0
 800c5a4:	2184      	movs	r1, #132	; 0x84
 800c5a6:	e6a8      	b.n	800c2fa <__gethex+0x176>
 800c5a8:	6922      	ldr	r2, [r4, #16]
 800c5aa:	3202      	adds	r2, #2
 800c5ac:	f104 010c 	add.w	r1, r4, #12
 800c5b0:	0092      	lsls	r2, r2, #2
 800c5b2:	300c      	adds	r0, #12
 800c5b4:	f000 f91e 	bl	800c7f4 <memcpy>
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	ee18 0a10 	vmov	r0, s16
 800c5be:	f000 f967 	bl	800c890 <_Bfree>
 800c5c2:	464c      	mov	r4, r9
 800c5c4:	6923      	ldr	r3, [r4, #16]
 800c5c6:	1c5a      	adds	r2, r3, #1
 800c5c8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5cc:	6122      	str	r2, [r4, #16]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	615a      	str	r2, [r3, #20]
 800c5d2:	e7bb      	b.n	800c54c <__gethex+0x3c8>
 800c5d4:	6922      	ldr	r2, [r4, #16]
 800c5d6:	455a      	cmp	r2, fp
 800c5d8:	dd0b      	ble.n	800c5f2 <__gethex+0x46e>
 800c5da:	2101      	movs	r1, #1
 800c5dc:	4620      	mov	r0, r4
 800c5de:	f7ff fd69 	bl	800c0b4 <rshift>
 800c5e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c5e6:	3501      	adds	r5, #1
 800c5e8:	42ab      	cmp	r3, r5
 800c5ea:	f6ff aed0 	blt.w	800c38e <__gethex+0x20a>
 800c5ee:	2701      	movs	r7, #1
 800c5f0:	e7c0      	b.n	800c574 <__gethex+0x3f0>
 800c5f2:	f016 061f 	ands.w	r6, r6, #31
 800c5f6:	d0fa      	beq.n	800c5ee <__gethex+0x46a>
 800c5f8:	4453      	add	r3, sl
 800c5fa:	f1c6 0620 	rsb	r6, r6, #32
 800c5fe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c602:	f000 f9f7 	bl	800c9f4 <__hi0bits>
 800c606:	42b0      	cmp	r0, r6
 800c608:	dbe7      	blt.n	800c5da <__gethex+0x456>
 800c60a:	e7f0      	b.n	800c5ee <__gethex+0x46a>
 800c60c:	0800ed50 	.word	0x0800ed50

0800c610 <L_shift>:
 800c610:	f1c2 0208 	rsb	r2, r2, #8
 800c614:	0092      	lsls	r2, r2, #2
 800c616:	b570      	push	{r4, r5, r6, lr}
 800c618:	f1c2 0620 	rsb	r6, r2, #32
 800c61c:	6843      	ldr	r3, [r0, #4]
 800c61e:	6804      	ldr	r4, [r0, #0]
 800c620:	fa03 f506 	lsl.w	r5, r3, r6
 800c624:	432c      	orrs	r4, r5
 800c626:	40d3      	lsrs	r3, r2
 800c628:	6004      	str	r4, [r0, #0]
 800c62a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c62e:	4288      	cmp	r0, r1
 800c630:	d3f4      	bcc.n	800c61c <L_shift+0xc>
 800c632:	bd70      	pop	{r4, r5, r6, pc}

0800c634 <__match>:
 800c634:	b530      	push	{r4, r5, lr}
 800c636:	6803      	ldr	r3, [r0, #0]
 800c638:	3301      	adds	r3, #1
 800c63a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c63e:	b914      	cbnz	r4, 800c646 <__match+0x12>
 800c640:	6003      	str	r3, [r0, #0]
 800c642:	2001      	movs	r0, #1
 800c644:	bd30      	pop	{r4, r5, pc}
 800c646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c64a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c64e:	2d19      	cmp	r5, #25
 800c650:	bf98      	it	ls
 800c652:	3220      	addls	r2, #32
 800c654:	42a2      	cmp	r2, r4
 800c656:	d0f0      	beq.n	800c63a <__match+0x6>
 800c658:	2000      	movs	r0, #0
 800c65a:	e7f3      	b.n	800c644 <__match+0x10>

0800c65c <__hexnan>:
 800c65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c660:	680b      	ldr	r3, [r1, #0]
 800c662:	115e      	asrs	r6, r3, #5
 800c664:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c668:	f013 031f 	ands.w	r3, r3, #31
 800c66c:	b087      	sub	sp, #28
 800c66e:	bf18      	it	ne
 800c670:	3604      	addne	r6, #4
 800c672:	2500      	movs	r5, #0
 800c674:	1f37      	subs	r7, r6, #4
 800c676:	4690      	mov	r8, r2
 800c678:	6802      	ldr	r2, [r0, #0]
 800c67a:	9301      	str	r3, [sp, #4]
 800c67c:	4682      	mov	sl, r0
 800c67e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c682:	46b9      	mov	r9, r7
 800c684:	463c      	mov	r4, r7
 800c686:	9502      	str	r5, [sp, #8]
 800c688:	46ab      	mov	fp, r5
 800c68a:	7851      	ldrb	r1, [r2, #1]
 800c68c:	1c53      	adds	r3, r2, #1
 800c68e:	9303      	str	r3, [sp, #12]
 800c690:	b341      	cbz	r1, 800c6e4 <__hexnan+0x88>
 800c692:	4608      	mov	r0, r1
 800c694:	9205      	str	r2, [sp, #20]
 800c696:	9104      	str	r1, [sp, #16]
 800c698:	f7ff fd5e 	bl	800c158 <__hexdig_fun>
 800c69c:	2800      	cmp	r0, #0
 800c69e:	d14f      	bne.n	800c740 <__hexnan+0xe4>
 800c6a0:	9904      	ldr	r1, [sp, #16]
 800c6a2:	9a05      	ldr	r2, [sp, #20]
 800c6a4:	2920      	cmp	r1, #32
 800c6a6:	d818      	bhi.n	800c6da <__hexnan+0x7e>
 800c6a8:	9b02      	ldr	r3, [sp, #8]
 800c6aa:	459b      	cmp	fp, r3
 800c6ac:	dd13      	ble.n	800c6d6 <__hexnan+0x7a>
 800c6ae:	454c      	cmp	r4, r9
 800c6b0:	d206      	bcs.n	800c6c0 <__hexnan+0x64>
 800c6b2:	2d07      	cmp	r5, #7
 800c6b4:	dc04      	bgt.n	800c6c0 <__hexnan+0x64>
 800c6b6:	462a      	mov	r2, r5
 800c6b8:	4649      	mov	r1, r9
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f7ff ffa8 	bl	800c610 <L_shift>
 800c6c0:	4544      	cmp	r4, r8
 800c6c2:	d950      	bls.n	800c766 <__hexnan+0x10a>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f1a4 0904 	sub.w	r9, r4, #4
 800c6ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6ce:	f8cd b008 	str.w	fp, [sp, #8]
 800c6d2:	464c      	mov	r4, r9
 800c6d4:	461d      	mov	r5, r3
 800c6d6:	9a03      	ldr	r2, [sp, #12]
 800c6d8:	e7d7      	b.n	800c68a <__hexnan+0x2e>
 800c6da:	2929      	cmp	r1, #41	; 0x29
 800c6dc:	d156      	bne.n	800c78c <__hexnan+0x130>
 800c6de:	3202      	adds	r2, #2
 800c6e0:	f8ca 2000 	str.w	r2, [sl]
 800c6e4:	f1bb 0f00 	cmp.w	fp, #0
 800c6e8:	d050      	beq.n	800c78c <__hexnan+0x130>
 800c6ea:	454c      	cmp	r4, r9
 800c6ec:	d206      	bcs.n	800c6fc <__hexnan+0xa0>
 800c6ee:	2d07      	cmp	r5, #7
 800c6f0:	dc04      	bgt.n	800c6fc <__hexnan+0xa0>
 800c6f2:	462a      	mov	r2, r5
 800c6f4:	4649      	mov	r1, r9
 800c6f6:	4620      	mov	r0, r4
 800c6f8:	f7ff ff8a 	bl	800c610 <L_shift>
 800c6fc:	4544      	cmp	r4, r8
 800c6fe:	d934      	bls.n	800c76a <__hexnan+0x10e>
 800c700:	f1a8 0204 	sub.w	r2, r8, #4
 800c704:	4623      	mov	r3, r4
 800c706:	f853 1b04 	ldr.w	r1, [r3], #4
 800c70a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c70e:	429f      	cmp	r7, r3
 800c710:	d2f9      	bcs.n	800c706 <__hexnan+0xaa>
 800c712:	1b3b      	subs	r3, r7, r4
 800c714:	f023 0303 	bic.w	r3, r3, #3
 800c718:	3304      	adds	r3, #4
 800c71a:	3401      	adds	r4, #1
 800c71c:	3e03      	subs	r6, #3
 800c71e:	42b4      	cmp	r4, r6
 800c720:	bf88      	it	hi
 800c722:	2304      	movhi	r3, #4
 800c724:	4443      	add	r3, r8
 800c726:	2200      	movs	r2, #0
 800c728:	f843 2b04 	str.w	r2, [r3], #4
 800c72c:	429f      	cmp	r7, r3
 800c72e:	d2fb      	bcs.n	800c728 <__hexnan+0xcc>
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	b91b      	cbnz	r3, 800c73c <__hexnan+0xe0>
 800c734:	4547      	cmp	r7, r8
 800c736:	d127      	bne.n	800c788 <__hexnan+0x12c>
 800c738:	2301      	movs	r3, #1
 800c73a:	603b      	str	r3, [r7, #0]
 800c73c:	2005      	movs	r0, #5
 800c73e:	e026      	b.n	800c78e <__hexnan+0x132>
 800c740:	3501      	adds	r5, #1
 800c742:	2d08      	cmp	r5, #8
 800c744:	f10b 0b01 	add.w	fp, fp, #1
 800c748:	dd06      	ble.n	800c758 <__hexnan+0xfc>
 800c74a:	4544      	cmp	r4, r8
 800c74c:	d9c3      	bls.n	800c6d6 <__hexnan+0x7a>
 800c74e:	2300      	movs	r3, #0
 800c750:	f844 3c04 	str.w	r3, [r4, #-4]
 800c754:	2501      	movs	r5, #1
 800c756:	3c04      	subs	r4, #4
 800c758:	6822      	ldr	r2, [r4, #0]
 800c75a:	f000 000f 	and.w	r0, r0, #15
 800c75e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c762:	6022      	str	r2, [r4, #0]
 800c764:	e7b7      	b.n	800c6d6 <__hexnan+0x7a>
 800c766:	2508      	movs	r5, #8
 800c768:	e7b5      	b.n	800c6d6 <__hexnan+0x7a>
 800c76a:	9b01      	ldr	r3, [sp, #4]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d0df      	beq.n	800c730 <__hexnan+0xd4>
 800c770:	f04f 32ff 	mov.w	r2, #4294967295
 800c774:	f1c3 0320 	rsb	r3, r3, #32
 800c778:	fa22 f303 	lsr.w	r3, r2, r3
 800c77c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c780:	401a      	ands	r2, r3
 800c782:	f846 2c04 	str.w	r2, [r6, #-4]
 800c786:	e7d3      	b.n	800c730 <__hexnan+0xd4>
 800c788:	3f04      	subs	r7, #4
 800c78a:	e7d1      	b.n	800c730 <__hexnan+0xd4>
 800c78c:	2004      	movs	r0, #4
 800c78e:	b007      	add	sp, #28
 800c790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c794 <_localeconv_r>:
 800c794:	4800      	ldr	r0, [pc, #0]	; (800c798 <_localeconv_r+0x4>)
 800c796:	4770      	bx	lr
 800c798:	2000017c 	.word	0x2000017c

0800c79c <_lseek_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4d07      	ldr	r5, [pc, #28]	; (800c7bc <_lseek_r+0x20>)
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	4608      	mov	r0, r1
 800c7a4:	4611      	mov	r1, r2
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	602a      	str	r2, [r5, #0]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	f7f5 febc 	bl	8002528 <_lseek>
 800c7b0:	1c43      	adds	r3, r0, #1
 800c7b2:	d102      	bne.n	800c7ba <_lseek_r+0x1e>
 800c7b4:	682b      	ldr	r3, [r5, #0]
 800c7b6:	b103      	cbz	r3, 800c7ba <_lseek_r+0x1e>
 800c7b8:	6023      	str	r3, [r4, #0]
 800c7ba:	bd38      	pop	{r3, r4, r5, pc}
 800c7bc:	20001344 	.word	0x20001344

0800c7c0 <malloc>:
 800c7c0:	4b02      	ldr	r3, [pc, #8]	; (800c7cc <malloc+0xc>)
 800c7c2:	4601      	mov	r1, r0
 800c7c4:	6818      	ldr	r0, [r3, #0]
 800c7c6:	f000 bd67 	b.w	800d298 <_malloc_r>
 800c7ca:	bf00      	nop
 800c7cc:	20000024 	.word	0x20000024

0800c7d0 <__ascii_mbtowc>:
 800c7d0:	b082      	sub	sp, #8
 800c7d2:	b901      	cbnz	r1, 800c7d6 <__ascii_mbtowc+0x6>
 800c7d4:	a901      	add	r1, sp, #4
 800c7d6:	b142      	cbz	r2, 800c7ea <__ascii_mbtowc+0x1a>
 800c7d8:	b14b      	cbz	r3, 800c7ee <__ascii_mbtowc+0x1e>
 800c7da:	7813      	ldrb	r3, [r2, #0]
 800c7dc:	600b      	str	r3, [r1, #0]
 800c7de:	7812      	ldrb	r2, [r2, #0]
 800c7e0:	1e10      	subs	r0, r2, #0
 800c7e2:	bf18      	it	ne
 800c7e4:	2001      	movne	r0, #1
 800c7e6:	b002      	add	sp, #8
 800c7e8:	4770      	bx	lr
 800c7ea:	4610      	mov	r0, r2
 800c7ec:	e7fb      	b.n	800c7e6 <__ascii_mbtowc+0x16>
 800c7ee:	f06f 0001 	mvn.w	r0, #1
 800c7f2:	e7f8      	b.n	800c7e6 <__ascii_mbtowc+0x16>

0800c7f4 <memcpy>:
 800c7f4:	440a      	add	r2, r1
 800c7f6:	4291      	cmp	r1, r2
 800c7f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7fc:	d100      	bne.n	800c800 <memcpy+0xc>
 800c7fe:	4770      	bx	lr
 800c800:	b510      	push	{r4, lr}
 800c802:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c806:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c80a:	4291      	cmp	r1, r2
 800c80c:	d1f9      	bne.n	800c802 <memcpy+0xe>
 800c80e:	bd10      	pop	{r4, pc}

0800c810 <_Balloc>:
 800c810:	b570      	push	{r4, r5, r6, lr}
 800c812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c814:	4604      	mov	r4, r0
 800c816:	460d      	mov	r5, r1
 800c818:	b976      	cbnz	r6, 800c838 <_Balloc+0x28>
 800c81a:	2010      	movs	r0, #16
 800c81c:	f7ff ffd0 	bl	800c7c0 <malloc>
 800c820:	4602      	mov	r2, r0
 800c822:	6260      	str	r0, [r4, #36]	; 0x24
 800c824:	b920      	cbnz	r0, 800c830 <_Balloc+0x20>
 800c826:	4b18      	ldr	r3, [pc, #96]	; (800c888 <_Balloc+0x78>)
 800c828:	4818      	ldr	r0, [pc, #96]	; (800c88c <_Balloc+0x7c>)
 800c82a:	2166      	movs	r1, #102	; 0x66
 800c82c:	f001 fb5c 	bl	800dee8 <__assert_func>
 800c830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c834:	6006      	str	r6, [r0, #0]
 800c836:	60c6      	str	r6, [r0, #12]
 800c838:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c83a:	68f3      	ldr	r3, [r6, #12]
 800c83c:	b183      	cbz	r3, 800c860 <_Balloc+0x50>
 800c83e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c840:	68db      	ldr	r3, [r3, #12]
 800c842:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c846:	b9b8      	cbnz	r0, 800c878 <_Balloc+0x68>
 800c848:	2101      	movs	r1, #1
 800c84a:	fa01 f605 	lsl.w	r6, r1, r5
 800c84e:	1d72      	adds	r2, r6, #5
 800c850:	0092      	lsls	r2, r2, #2
 800c852:	4620      	mov	r0, r4
 800c854:	f000 fc9d 	bl	800d192 <_calloc_r>
 800c858:	b160      	cbz	r0, 800c874 <_Balloc+0x64>
 800c85a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c85e:	e00e      	b.n	800c87e <_Balloc+0x6e>
 800c860:	2221      	movs	r2, #33	; 0x21
 800c862:	2104      	movs	r1, #4
 800c864:	4620      	mov	r0, r4
 800c866:	f000 fc94 	bl	800d192 <_calloc_r>
 800c86a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c86c:	60f0      	str	r0, [r6, #12]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d1e4      	bne.n	800c83e <_Balloc+0x2e>
 800c874:	2000      	movs	r0, #0
 800c876:	bd70      	pop	{r4, r5, r6, pc}
 800c878:	6802      	ldr	r2, [r0, #0]
 800c87a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c87e:	2300      	movs	r3, #0
 800c880:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c884:	e7f7      	b.n	800c876 <_Balloc+0x66>
 800c886:	bf00      	nop
 800c888:	0800ecde 	.word	0x0800ecde
 800c88c:	0800eddc 	.word	0x0800eddc

0800c890 <_Bfree>:
 800c890:	b570      	push	{r4, r5, r6, lr}
 800c892:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c894:	4605      	mov	r5, r0
 800c896:	460c      	mov	r4, r1
 800c898:	b976      	cbnz	r6, 800c8b8 <_Bfree+0x28>
 800c89a:	2010      	movs	r0, #16
 800c89c:	f7ff ff90 	bl	800c7c0 <malloc>
 800c8a0:	4602      	mov	r2, r0
 800c8a2:	6268      	str	r0, [r5, #36]	; 0x24
 800c8a4:	b920      	cbnz	r0, 800c8b0 <_Bfree+0x20>
 800c8a6:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <_Bfree+0x3c>)
 800c8a8:	4809      	ldr	r0, [pc, #36]	; (800c8d0 <_Bfree+0x40>)
 800c8aa:	218a      	movs	r1, #138	; 0x8a
 800c8ac:	f001 fb1c 	bl	800dee8 <__assert_func>
 800c8b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c8b4:	6006      	str	r6, [r0, #0]
 800c8b6:	60c6      	str	r6, [r0, #12]
 800c8b8:	b13c      	cbz	r4, 800c8ca <_Bfree+0x3a>
 800c8ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c8bc:	6862      	ldr	r2, [r4, #4]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c8c4:	6021      	str	r1, [r4, #0]
 800c8c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c8ca:	bd70      	pop	{r4, r5, r6, pc}
 800c8cc:	0800ecde 	.word	0x0800ecde
 800c8d0:	0800eddc 	.word	0x0800eddc

0800c8d4 <__multadd>:
 800c8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8d8:	690d      	ldr	r5, [r1, #16]
 800c8da:	4607      	mov	r7, r0
 800c8dc:	460c      	mov	r4, r1
 800c8de:	461e      	mov	r6, r3
 800c8e0:	f101 0c14 	add.w	ip, r1, #20
 800c8e4:	2000      	movs	r0, #0
 800c8e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c8ea:	b299      	uxth	r1, r3
 800c8ec:	fb02 6101 	mla	r1, r2, r1, r6
 800c8f0:	0c1e      	lsrs	r6, r3, #16
 800c8f2:	0c0b      	lsrs	r3, r1, #16
 800c8f4:	fb02 3306 	mla	r3, r2, r6, r3
 800c8f8:	b289      	uxth	r1, r1
 800c8fa:	3001      	adds	r0, #1
 800c8fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c900:	4285      	cmp	r5, r0
 800c902:	f84c 1b04 	str.w	r1, [ip], #4
 800c906:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c90a:	dcec      	bgt.n	800c8e6 <__multadd+0x12>
 800c90c:	b30e      	cbz	r6, 800c952 <__multadd+0x7e>
 800c90e:	68a3      	ldr	r3, [r4, #8]
 800c910:	42ab      	cmp	r3, r5
 800c912:	dc19      	bgt.n	800c948 <__multadd+0x74>
 800c914:	6861      	ldr	r1, [r4, #4]
 800c916:	4638      	mov	r0, r7
 800c918:	3101      	adds	r1, #1
 800c91a:	f7ff ff79 	bl	800c810 <_Balloc>
 800c91e:	4680      	mov	r8, r0
 800c920:	b928      	cbnz	r0, 800c92e <__multadd+0x5a>
 800c922:	4602      	mov	r2, r0
 800c924:	4b0c      	ldr	r3, [pc, #48]	; (800c958 <__multadd+0x84>)
 800c926:	480d      	ldr	r0, [pc, #52]	; (800c95c <__multadd+0x88>)
 800c928:	21b5      	movs	r1, #181	; 0xb5
 800c92a:	f001 fadd 	bl	800dee8 <__assert_func>
 800c92e:	6922      	ldr	r2, [r4, #16]
 800c930:	3202      	adds	r2, #2
 800c932:	f104 010c 	add.w	r1, r4, #12
 800c936:	0092      	lsls	r2, r2, #2
 800c938:	300c      	adds	r0, #12
 800c93a:	f7ff ff5b 	bl	800c7f4 <memcpy>
 800c93e:	4621      	mov	r1, r4
 800c940:	4638      	mov	r0, r7
 800c942:	f7ff ffa5 	bl	800c890 <_Bfree>
 800c946:	4644      	mov	r4, r8
 800c948:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c94c:	3501      	adds	r5, #1
 800c94e:	615e      	str	r6, [r3, #20]
 800c950:	6125      	str	r5, [r4, #16]
 800c952:	4620      	mov	r0, r4
 800c954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c958:	0800ed50 	.word	0x0800ed50
 800c95c:	0800eddc 	.word	0x0800eddc

0800c960 <__s2b>:
 800c960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c964:	460c      	mov	r4, r1
 800c966:	4615      	mov	r5, r2
 800c968:	461f      	mov	r7, r3
 800c96a:	2209      	movs	r2, #9
 800c96c:	3308      	adds	r3, #8
 800c96e:	4606      	mov	r6, r0
 800c970:	fb93 f3f2 	sdiv	r3, r3, r2
 800c974:	2100      	movs	r1, #0
 800c976:	2201      	movs	r2, #1
 800c978:	429a      	cmp	r2, r3
 800c97a:	db09      	blt.n	800c990 <__s2b+0x30>
 800c97c:	4630      	mov	r0, r6
 800c97e:	f7ff ff47 	bl	800c810 <_Balloc>
 800c982:	b940      	cbnz	r0, 800c996 <__s2b+0x36>
 800c984:	4602      	mov	r2, r0
 800c986:	4b19      	ldr	r3, [pc, #100]	; (800c9ec <__s2b+0x8c>)
 800c988:	4819      	ldr	r0, [pc, #100]	; (800c9f0 <__s2b+0x90>)
 800c98a:	21ce      	movs	r1, #206	; 0xce
 800c98c:	f001 faac 	bl	800dee8 <__assert_func>
 800c990:	0052      	lsls	r2, r2, #1
 800c992:	3101      	adds	r1, #1
 800c994:	e7f0      	b.n	800c978 <__s2b+0x18>
 800c996:	9b08      	ldr	r3, [sp, #32]
 800c998:	6143      	str	r3, [r0, #20]
 800c99a:	2d09      	cmp	r5, #9
 800c99c:	f04f 0301 	mov.w	r3, #1
 800c9a0:	6103      	str	r3, [r0, #16]
 800c9a2:	dd16      	ble.n	800c9d2 <__s2b+0x72>
 800c9a4:	f104 0909 	add.w	r9, r4, #9
 800c9a8:	46c8      	mov	r8, r9
 800c9aa:	442c      	add	r4, r5
 800c9ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c9b0:	4601      	mov	r1, r0
 800c9b2:	3b30      	subs	r3, #48	; 0x30
 800c9b4:	220a      	movs	r2, #10
 800c9b6:	4630      	mov	r0, r6
 800c9b8:	f7ff ff8c 	bl	800c8d4 <__multadd>
 800c9bc:	45a0      	cmp	r8, r4
 800c9be:	d1f5      	bne.n	800c9ac <__s2b+0x4c>
 800c9c0:	f1a5 0408 	sub.w	r4, r5, #8
 800c9c4:	444c      	add	r4, r9
 800c9c6:	1b2d      	subs	r5, r5, r4
 800c9c8:	1963      	adds	r3, r4, r5
 800c9ca:	42bb      	cmp	r3, r7
 800c9cc:	db04      	blt.n	800c9d8 <__s2b+0x78>
 800c9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9d2:	340a      	adds	r4, #10
 800c9d4:	2509      	movs	r5, #9
 800c9d6:	e7f6      	b.n	800c9c6 <__s2b+0x66>
 800c9d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c9dc:	4601      	mov	r1, r0
 800c9de:	3b30      	subs	r3, #48	; 0x30
 800c9e0:	220a      	movs	r2, #10
 800c9e2:	4630      	mov	r0, r6
 800c9e4:	f7ff ff76 	bl	800c8d4 <__multadd>
 800c9e8:	e7ee      	b.n	800c9c8 <__s2b+0x68>
 800c9ea:	bf00      	nop
 800c9ec:	0800ed50 	.word	0x0800ed50
 800c9f0:	0800eddc 	.word	0x0800eddc

0800c9f4 <__hi0bits>:
 800c9f4:	0c03      	lsrs	r3, r0, #16
 800c9f6:	041b      	lsls	r3, r3, #16
 800c9f8:	b9d3      	cbnz	r3, 800ca30 <__hi0bits+0x3c>
 800c9fa:	0400      	lsls	r0, r0, #16
 800c9fc:	2310      	movs	r3, #16
 800c9fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ca02:	bf04      	itt	eq
 800ca04:	0200      	lsleq	r0, r0, #8
 800ca06:	3308      	addeq	r3, #8
 800ca08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ca0c:	bf04      	itt	eq
 800ca0e:	0100      	lsleq	r0, r0, #4
 800ca10:	3304      	addeq	r3, #4
 800ca12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ca16:	bf04      	itt	eq
 800ca18:	0080      	lsleq	r0, r0, #2
 800ca1a:	3302      	addeq	r3, #2
 800ca1c:	2800      	cmp	r0, #0
 800ca1e:	db05      	blt.n	800ca2c <__hi0bits+0x38>
 800ca20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ca24:	f103 0301 	add.w	r3, r3, #1
 800ca28:	bf08      	it	eq
 800ca2a:	2320      	moveq	r3, #32
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	4770      	bx	lr
 800ca30:	2300      	movs	r3, #0
 800ca32:	e7e4      	b.n	800c9fe <__hi0bits+0xa>

0800ca34 <__lo0bits>:
 800ca34:	6803      	ldr	r3, [r0, #0]
 800ca36:	f013 0207 	ands.w	r2, r3, #7
 800ca3a:	4601      	mov	r1, r0
 800ca3c:	d00b      	beq.n	800ca56 <__lo0bits+0x22>
 800ca3e:	07da      	lsls	r2, r3, #31
 800ca40:	d423      	bmi.n	800ca8a <__lo0bits+0x56>
 800ca42:	0798      	lsls	r0, r3, #30
 800ca44:	bf49      	itett	mi
 800ca46:	085b      	lsrmi	r3, r3, #1
 800ca48:	089b      	lsrpl	r3, r3, #2
 800ca4a:	2001      	movmi	r0, #1
 800ca4c:	600b      	strmi	r3, [r1, #0]
 800ca4e:	bf5c      	itt	pl
 800ca50:	600b      	strpl	r3, [r1, #0]
 800ca52:	2002      	movpl	r0, #2
 800ca54:	4770      	bx	lr
 800ca56:	b298      	uxth	r0, r3
 800ca58:	b9a8      	cbnz	r0, 800ca86 <__lo0bits+0x52>
 800ca5a:	0c1b      	lsrs	r3, r3, #16
 800ca5c:	2010      	movs	r0, #16
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	b90a      	cbnz	r2, 800ca66 <__lo0bits+0x32>
 800ca62:	3008      	adds	r0, #8
 800ca64:	0a1b      	lsrs	r3, r3, #8
 800ca66:	071a      	lsls	r2, r3, #28
 800ca68:	bf04      	itt	eq
 800ca6a:	091b      	lsreq	r3, r3, #4
 800ca6c:	3004      	addeq	r0, #4
 800ca6e:	079a      	lsls	r2, r3, #30
 800ca70:	bf04      	itt	eq
 800ca72:	089b      	lsreq	r3, r3, #2
 800ca74:	3002      	addeq	r0, #2
 800ca76:	07da      	lsls	r2, r3, #31
 800ca78:	d403      	bmi.n	800ca82 <__lo0bits+0x4e>
 800ca7a:	085b      	lsrs	r3, r3, #1
 800ca7c:	f100 0001 	add.w	r0, r0, #1
 800ca80:	d005      	beq.n	800ca8e <__lo0bits+0x5a>
 800ca82:	600b      	str	r3, [r1, #0]
 800ca84:	4770      	bx	lr
 800ca86:	4610      	mov	r0, r2
 800ca88:	e7e9      	b.n	800ca5e <__lo0bits+0x2a>
 800ca8a:	2000      	movs	r0, #0
 800ca8c:	4770      	bx	lr
 800ca8e:	2020      	movs	r0, #32
 800ca90:	4770      	bx	lr
	...

0800ca94 <__i2b>:
 800ca94:	b510      	push	{r4, lr}
 800ca96:	460c      	mov	r4, r1
 800ca98:	2101      	movs	r1, #1
 800ca9a:	f7ff feb9 	bl	800c810 <_Balloc>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	b928      	cbnz	r0, 800caae <__i2b+0x1a>
 800caa2:	4b05      	ldr	r3, [pc, #20]	; (800cab8 <__i2b+0x24>)
 800caa4:	4805      	ldr	r0, [pc, #20]	; (800cabc <__i2b+0x28>)
 800caa6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800caaa:	f001 fa1d 	bl	800dee8 <__assert_func>
 800caae:	2301      	movs	r3, #1
 800cab0:	6144      	str	r4, [r0, #20]
 800cab2:	6103      	str	r3, [r0, #16]
 800cab4:	bd10      	pop	{r4, pc}
 800cab6:	bf00      	nop
 800cab8:	0800ed50 	.word	0x0800ed50
 800cabc:	0800eddc 	.word	0x0800eddc

0800cac0 <__multiply>:
 800cac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac4:	4691      	mov	r9, r2
 800cac6:	690a      	ldr	r2, [r1, #16]
 800cac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cacc:	429a      	cmp	r2, r3
 800cace:	bfb8      	it	lt
 800cad0:	460b      	movlt	r3, r1
 800cad2:	460c      	mov	r4, r1
 800cad4:	bfbc      	itt	lt
 800cad6:	464c      	movlt	r4, r9
 800cad8:	4699      	movlt	r9, r3
 800cada:	6927      	ldr	r7, [r4, #16]
 800cadc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cae0:	68a3      	ldr	r3, [r4, #8]
 800cae2:	6861      	ldr	r1, [r4, #4]
 800cae4:	eb07 060a 	add.w	r6, r7, sl
 800cae8:	42b3      	cmp	r3, r6
 800caea:	b085      	sub	sp, #20
 800caec:	bfb8      	it	lt
 800caee:	3101      	addlt	r1, #1
 800caf0:	f7ff fe8e 	bl	800c810 <_Balloc>
 800caf4:	b930      	cbnz	r0, 800cb04 <__multiply+0x44>
 800caf6:	4602      	mov	r2, r0
 800caf8:	4b44      	ldr	r3, [pc, #272]	; (800cc0c <__multiply+0x14c>)
 800cafa:	4845      	ldr	r0, [pc, #276]	; (800cc10 <__multiply+0x150>)
 800cafc:	f240 115d 	movw	r1, #349	; 0x15d
 800cb00:	f001 f9f2 	bl	800dee8 <__assert_func>
 800cb04:	f100 0514 	add.w	r5, r0, #20
 800cb08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb0c:	462b      	mov	r3, r5
 800cb0e:	2200      	movs	r2, #0
 800cb10:	4543      	cmp	r3, r8
 800cb12:	d321      	bcc.n	800cb58 <__multiply+0x98>
 800cb14:	f104 0314 	add.w	r3, r4, #20
 800cb18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb1c:	f109 0314 	add.w	r3, r9, #20
 800cb20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cb24:	9202      	str	r2, [sp, #8]
 800cb26:	1b3a      	subs	r2, r7, r4
 800cb28:	3a15      	subs	r2, #21
 800cb2a:	f022 0203 	bic.w	r2, r2, #3
 800cb2e:	3204      	adds	r2, #4
 800cb30:	f104 0115 	add.w	r1, r4, #21
 800cb34:	428f      	cmp	r7, r1
 800cb36:	bf38      	it	cc
 800cb38:	2204      	movcc	r2, #4
 800cb3a:	9201      	str	r2, [sp, #4]
 800cb3c:	9a02      	ldr	r2, [sp, #8]
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	429a      	cmp	r2, r3
 800cb42:	d80c      	bhi.n	800cb5e <__multiply+0x9e>
 800cb44:	2e00      	cmp	r6, #0
 800cb46:	dd03      	ble.n	800cb50 <__multiply+0x90>
 800cb48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d05a      	beq.n	800cc06 <__multiply+0x146>
 800cb50:	6106      	str	r6, [r0, #16]
 800cb52:	b005      	add	sp, #20
 800cb54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb58:	f843 2b04 	str.w	r2, [r3], #4
 800cb5c:	e7d8      	b.n	800cb10 <__multiply+0x50>
 800cb5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb62:	f1ba 0f00 	cmp.w	sl, #0
 800cb66:	d024      	beq.n	800cbb2 <__multiply+0xf2>
 800cb68:	f104 0e14 	add.w	lr, r4, #20
 800cb6c:	46a9      	mov	r9, r5
 800cb6e:	f04f 0c00 	mov.w	ip, #0
 800cb72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb76:	f8d9 1000 	ldr.w	r1, [r9]
 800cb7a:	fa1f fb82 	uxth.w	fp, r2
 800cb7e:	b289      	uxth	r1, r1
 800cb80:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cb88:	f8d9 2000 	ldr.w	r2, [r9]
 800cb8c:	4461      	add	r1, ip
 800cb8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb92:	fb0a c20b 	mla	r2, sl, fp, ip
 800cb96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb9a:	b289      	uxth	r1, r1
 800cb9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cba0:	4577      	cmp	r7, lr
 800cba2:	f849 1b04 	str.w	r1, [r9], #4
 800cba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cbaa:	d8e2      	bhi.n	800cb72 <__multiply+0xb2>
 800cbac:	9a01      	ldr	r2, [sp, #4]
 800cbae:	f845 c002 	str.w	ip, [r5, r2]
 800cbb2:	9a03      	ldr	r2, [sp, #12]
 800cbb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cbb8:	3304      	adds	r3, #4
 800cbba:	f1b9 0f00 	cmp.w	r9, #0
 800cbbe:	d020      	beq.n	800cc02 <__multiply+0x142>
 800cbc0:	6829      	ldr	r1, [r5, #0]
 800cbc2:	f104 0c14 	add.w	ip, r4, #20
 800cbc6:	46ae      	mov	lr, r5
 800cbc8:	f04f 0a00 	mov.w	sl, #0
 800cbcc:	f8bc b000 	ldrh.w	fp, [ip]
 800cbd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cbd4:	fb09 220b 	mla	r2, r9, fp, r2
 800cbd8:	4492      	add	sl, r2
 800cbda:	b289      	uxth	r1, r1
 800cbdc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cbe0:	f84e 1b04 	str.w	r1, [lr], #4
 800cbe4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cbe8:	f8be 1000 	ldrh.w	r1, [lr]
 800cbec:	0c12      	lsrs	r2, r2, #16
 800cbee:	fb09 1102 	mla	r1, r9, r2, r1
 800cbf2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cbf6:	4567      	cmp	r7, ip
 800cbf8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cbfc:	d8e6      	bhi.n	800cbcc <__multiply+0x10c>
 800cbfe:	9a01      	ldr	r2, [sp, #4]
 800cc00:	50a9      	str	r1, [r5, r2]
 800cc02:	3504      	adds	r5, #4
 800cc04:	e79a      	b.n	800cb3c <__multiply+0x7c>
 800cc06:	3e01      	subs	r6, #1
 800cc08:	e79c      	b.n	800cb44 <__multiply+0x84>
 800cc0a:	bf00      	nop
 800cc0c:	0800ed50 	.word	0x0800ed50
 800cc10:	0800eddc 	.word	0x0800eddc

0800cc14 <__pow5mult>:
 800cc14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc18:	4615      	mov	r5, r2
 800cc1a:	f012 0203 	ands.w	r2, r2, #3
 800cc1e:	4606      	mov	r6, r0
 800cc20:	460f      	mov	r7, r1
 800cc22:	d007      	beq.n	800cc34 <__pow5mult+0x20>
 800cc24:	4c25      	ldr	r4, [pc, #148]	; (800ccbc <__pow5mult+0xa8>)
 800cc26:	3a01      	subs	r2, #1
 800cc28:	2300      	movs	r3, #0
 800cc2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc2e:	f7ff fe51 	bl	800c8d4 <__multadd>
 800cc32:	4607      	mov	r7, r0
 800cc34:	10ad      	asrs	r5, r5, #2
 800cc36:	d03d      	beq.n	800ccb4 <__pow5mult+0xa0>
 800cc38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cc3a:	b97c      	cbnz	r4, 800cc5c <__pow5mult+0x48>
 800cc3c:	2010      	movs	r0, #16
 800cc3e:	f7ff fdbf 	bl	800c7c0 <malloc>
 800cc42:	4602      	mov	r2, r0
 800cc44:	6270      	str	r0, [r6, #36]	; 0x24
 800cc46:	b928      	cbnz	r0, 800cc54 <__pow5mult+0x40>
 800cc48:	4b1d      	ldr	r3, [pc, #116]	; (800ccc0 <__pow5mult+0xac>)
 800cc4a:	481e      	ldr	r0, [pc, #120]	; (800ccc4 <__pow5mult+0xb0>)
 800cc4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cc50:	f001 f94a 	bl	800dee8 <__assert_func>
 800cc54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc58:	6004      	str	r4, [r0, #0]
 800cc5a:	60c4      	str	r4, [r0, #12]
 800cc5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cc60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc64:	b94c      	cbnz	r4, 800cc7a <__pow5mult+0x66>
 800cc66:	f240 2171 	movw	r1, #625	; 0x271
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	f7ff ff12 	bl	800ca94 <__i2b>
 800cc70:	2300      	movs	r3, #0
 800cc72:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc76:	4604      	mov	r4, r0
 800cc78:	6003      	str	r3, [r0, #0]
 800cc7a:	f04f 0900 	mov.w	r9, #0
 800cc7e:	07eb      	lsls	r3, r5, #31
 800cc80:	d50a      	bpl.n	800cc98 <__pow5mult+0x84>
 800cc82:	4639      	mov	r1, r7
 800cc84:	4622      	mov	r2, r4
 800cc86:	4630      	mov	r0, r6
 800cc88:	f7ff ff1a 	bl	800cac0 <__multiply>
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	4680      	mov	r8, r0
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7ff fdfd 	bl	800c890 <_Bfree>
 800cc96:	4647      	mov	r7, r8
 800cc98:	106d      	asrs	r5, r5, #1
 800cc9a:	d00b      	beq.n	800ccb4 <__pow5mult+0xa0>
 800cc9c:	6820      	ldr	r0, [r4, #0]
 800cc9e:	b938      	cbnz	r0, 800ccb0 <__pow5mult+0x9c>
 800cca0:	4622      	mov	r2, r4
 800cca2:	4621      	mov	r1, r4
 800cca4:	4630      	mov	r0, r6
 800cca6:	f7ff ff0b 	bl	800cac0 <__multiply>
 800ccaa:	6020      	str	r0, [r4, #0]
 800ccac:	f8c0 9000 	str.w	r9, [r0]
 800ccb0:	4604      	mov	r4, r0
 800ccb2:	e7e4      	b.n	800cc7e <__pow5mult+0x6a>
 800ccb4:	4638      	mov	r0, r7
 800ccb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccba:	bf00      	nop
 800ccbc:	0800ef28 	.word	0x0800ef28
 800ccc0:	0800ecde 	.word	0x0800ecde
 800ccc4:	0800eddc 	.word	0x0800eddc

0800ccc8 <__lshift>:
 800ccc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cccc:	460c      	mov	r4, r1
 800ccce:	6849      	ldr	r1, [r1, #4]
 800ccd0:	6923      	ldr	r3, [r4, #16]
 800ccd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ccd6:	68a3      	ldr	r3, [r4, #8]
 800ccd8:	4607      	mov	r7, r0
 800ccda:	4691      	mov	r9, r2
 800ccdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cce0:	f108 0601 	add.w	r6, r8, #1
 800cce4:	42b3      	cmp	r3, r6
 800cce6:	db0b      	blt.n	800cd00 <__lshift+0x38>
 800cce8:	4638      	mov	r0, r7
 800ccea:	f7ff fd91 	bl	800c810 <_Balloc>
 800ccee:	4605      	mov	r5, r0
 800ccf0:	b948      	cbnz	r0, 800cd06 <__lshift+0x3e>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	4b2a      	ldr	r3, [pc, #168]	; (800cda0 <__lshift+0xd8>)
 800ccf6:	482b      	ldr	r0, [pc, #172]	; (800cda4 <__lshift+0xdc>)
 800ccf8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ccfc:	f001 f8f4 	bl	800dee8 <__assert_func>
 800cd00:	3101      	adds	r1, #1
 800cd02:	005b      	lsls	r3, r3, #1
 800cd04:	e7ee      	b.n	800cce4 <__lshift+0x1c>
 800cd06:	2300      	movs	r3, #0
 800cd08:	f100 0114 	add.w	r1, r0, #20
 800cd0c:	f100 0210 	add.w	r2, r0, #16
 800cd10:	4618      	mov	r0, r3
 800cd12:	4553      	cmp	r3, sl
 800cd14:	db37      	blt.n	800cd86 <__lshift+0xbe>
 800cd16:	6920      	ldr	r0, [r4, #16]
 800cd18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd1c:	f104 0314 	add.w	r3, r4, #20
 800cd20:	f019 091f 	ands.w	r9, r9, #31
 800cd24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd28:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd2c:	d02f      	beq.n	800cd8e <__lshift+0xc6>
 800cd2e:	f1c9 0e20 	rsb	lr, r9, #32
 800cd32:	468a      	mov	sl, r1
 800cd34:	f04f 0c00 	mov.w	ip, #0
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	fa02 f209 	lsl.w	r2, r2, r9
 800cd3e:	ea42 020c 	orr.w	r2, r2, ip
 800cd42:	f84a 2b04 	str.w	r2, [sl], #4
 800cd46:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd4a:	4298      	cmp	r0, r3
 800cd4c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cd50:	d8f2      	bhi.n	800cd38 <__lshift+0x70>
 800cd52:	1b03      	subs	r3, r0, r4
 800cd54:	3b15      	subs	r3, #21
 800cd56:	f023 0303 	bic.w	r3, r3, #3
 800cd5a:	3304      	adds	r3, #4
 800cd5c:	f104 0215 	add.w	r2, r4, #21
 800cd60:	4290      	cmp	r0, r2
 800cd62:	bf38      	it	cc
 800cd64:	2304      	movcc	r3, #4
 800cd66:	f841 c003 	str.w	ip, [r1, r3]
 800cd6a:	f1bc 0f00 	cmp.w	ip, #0
 800cd6e:	d001      	beq.n	800cd74 <__lshift+0xac>
 800cd70:	f108 0602 	add.w	r6, r8, #2
 800cd74:	3e01      	subs	r6, #1
 800cd76:	4638      	mov	r0, r7
 800cd78:	612e      	str	r6, [r5, #16]
 800cd7a:	4621      	mov	r1, r4
 800cd7c:	f7ff fd88 	bl	800c890 <_Bfree>
 800cd80:	4628      	mov	r0, r5
 800cd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd86:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd8a:	3301      	adds	r3, #1
 800cd8c:	e7c1      	b.n	800cd12 <__lshift+0x4a>
 800cd8e:	3904      	subs	r1, #4
 800cd90:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd94:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd98:	4298      	cmp	r0, r3
 800cd9a:	d8f9      	bhi.n	800cd90 <__lshift+0xc8>
 800cd9c:	e7ea      	b.n	800cd74 <__lshift+0xac>
 800cd9e:	bf00      	nop
 800cda0:	0800ed50 	.word	0x0800ed50
 800cda4:	0800eddc 	.word	0x0800eddc

0800cda8 <__mcmp>:
 800cda8:	b530      	push	{r4, r5, lr}
 800cdaa:	6902      	ldr	r2, [r0, #16]
 800cdac:	690c      	ldr	r4, [r1, #16]
 800cdae:	1b12      	subs	r2, r2, r4
 800cdb0:	d10e      	bne.n	800cdd0 <__mcmp+0x28>
 800cdb2:	f100 0314 	add.w	r3, r0, #20
 800cdb6:	3114      	adds	r1, #20
 800cdb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cdbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cdc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cdc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cdc8:	42a5      	cmp	r5, r4
 800cdca:	d003      	beq.n	800cdd4 <__mcmp+0x2c>
 800cdcc:	d305      	bcc.n	800cdda <__mcmp+0x32>
 800cdce:	2201      	movs	r2, #1
 800cdd0:	4610      	mov	r0, r2
 800cdd2:	bd30      	pop	{r4, r5, pc}
 800cdd4:	4283      	cmp	r3, r0
 800cdd6:	d3f3      	bcc.n	800cdc0 <__mcmp+0x18>
 800cdd8:	e7fa      	b.n	800cdd0 <__mcmp+0x28>
 800cdda:	f04f 32ff 	mov.w	r2, #4294967295
 800cdde:	e7f7      	b.n	800cdd0 <__mcmp+0x28>

0800cde0 <__mdiff>:
 800cde0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	460c      	mov	r4, r1
 800cde6:	4606      	mov	r6, r0
 800cde8:	4611      	mov	r1, r2
 800cdea:	4620      	mov	r0, r4
 800cdec:	4690      	mov	r8, r2
 800cdee:	f7ff ffdb 	bl	800cda8 <__mcmp>
 800cdf2:	1e05      	subs	r5, r0, #0
 800cdf4:	d110      	bne.n	800ce18 <__mdiff+0x38>
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4630      	mov	r0, r6
 800cdfa:	f7ff fd09 	bl	800c810 <_Balloc>
 800cdfe:	b930      	cbnz	r0, 800ce0e <__mdiff+0x2e>
 800ce00:	4b3a      	ldr	r3, [pc, #232]	; (800ceec <__mdiff+0x10c>)
 800ce02:	4602      	mov	r2, r0
 800ce04:	f240 2132 	movw	r1, #562	; 0x232
 800ce08:	4839      	ldr	r0, [pc, #228]	; (800cef0 <__mdiff+0x110>)
 800ce0a:	f001 f86d 	bl	800dee8 <__assert_func>
 800ce0e:	2301      	movs	r3, #1
 800ce10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ce14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce18:	bfa4      	itt	ge
 800ce1a:	4643      	movge	r3, r8
 800ce1c:	46a0      	movge	r8, r4
 800ce1e:	4630      	mov	r0, r6
 800ce20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ce24:	bfa6      	itte	ge
 800ce26:	461c      	movge	r4, r3
 800ce28:	2500      	movge	r5, #0
 800ce2a:	2501      	movlt	r5, #1
 800ce2c:	f7ff fcf0 	bl	800c810 <_Balloc>
 800ce30:	b920      	cbnz	r0, 800ce3c <__mdiff+0x5c>
 800ce32:	4b2e      	ldr	r3, [pc, #184]	; (800ceec <__mdiff+0x10c>)
 800ce34:	4602      	mov	r2, r0
 800ce36:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ce3a:	e7e5      	b.n	800ce08 <__mdiff+0x28>
 800ce3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ce40:	6926      	ldr	r6, [r4, #16]
 800ce42:	60c5      	str	r5, [r0, #12]
 800ce44:	f104 0914 	add.w	r9, r4, #20
 800ce48:	f108 0514 	add.w	r5, r8, #20
 800ce4c:	f100 0e14 	add.w	lr, r0, #20
 800ce50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ce54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ce58:	f108 0210 	add.w	r2, r8, #16
 800ce5c:	46f2      	mov	sl, lr
 800ce5e:	2100      	movs	r1, #0
 800ce60:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ce68:	fa1f f883 	uxth.w	r8, r3
 800ce6c:	fa11 f18b 	uxtah	r1, r1, fp
 800ce70:	0c1b      	lsrs	r3, r3, #16
 800ce72:	eba1 0808 	sub.w	r8, r1, r8
 800ce76:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce7a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce7e:	fa1f f888 	uxth.w	r8, r8
 800ce82:	1419      	asrs	r1, r3, #16
 800ce84:	454e      	cmp	r6, r9
 800ce86:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce8a:	f84a 3b04 	str.w	r3, [sl], #4
 800ce8e:	d8e7      	bhi.n	800ce60 <__mdiff+0x80>
 800ce90:	1b33      	subs	r3, r6, r4
 800ce92:	3b15      	subs	r3, #21
 800ce94:	f023 0303 	bic.w	r3, r3, #3
 800ce98:	3304      	adds	r3, #4
 800ce9a:	3415      	adds	r4, #21
 800ce9c:	42a6      	cmp	r6, r4
 800ce9e:	bf38      	it	cc
 800cea0:	2304      	movcc	r3, #4
 800cea2:	441d      	add	r5, r3
 800cea4:	4473      	add	r3, lr
 800cea6:	469e      	mov	lr, r3
 800cea8:	462e      	mov	r6, r5
 800ceaa:	4566      	cmp	r6, ip
 800ceac:	d30e      	bcc.n	800cecc <__mdiff+0xec>
 800ceae:	f10c 0203 	add.w	r2, ip, #3
 800ceb2:	1b52      	subs	r2, r2, r5
 800ceb4:	f022 0203 	bic.w	r2, r2, #3
 800ceb8:	3d03      	subs	r5, #3
 800ceba:	45ac      	cmp	ip, r5
 800cebc:	bf38      	it	cc
 800cebe:	2200      	movcc	r2, #0
 800cec0:	441a      	add	r2, r3
 800cec2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cec6:	b17b      	cbz	r3, 800cee8 <__mdiff+0x108>
 800cec8:	6107      	str	r7, [r0, #16]
 800ceca:	e7a3      	b.n	800ce14 <__mdiff+0x34>
 800cecc:	f856 8b04 	ldr.w	r8, [r6], #4
 800ced0:	fa11 f288 	uxtah	r2, r1, r8
 800ced4:	1414      	asrs	r4, r2, #16
 800ced6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ceda:	b292      	uxth	r2, r2
 800cedc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800cee0:	f84e 2b04 	str.w	r2, [lr], #4
 800cee4:	1421      	asrs	r1, r4, #16
 800cee6:	e7e0      	b.n	800ceaa <__mdiff+0xca>
 800cee8:	3f01      	subs	r7, #1
 800ceea:	e7ea      	b.n	800cec2 <__mdiff+0xe2>
 800ceec:	0800ed50 	.word	0x0800ed50
 800cef0:	0800eddc 	.word	0x0800eddc

0800cef4 <__ulp>:
 800cef4:	b082      	sub	sp, #8
 800cef6:	ed8d 0b00 	vstr	d0, [sp]
 800cefa:	9b01      	ldr	r3, [sp, #4]
 800cefc:	4912      	ldr	r1, [pc, #72]	; (800cf48 <__ulp+0x54>)
 800cefe:	4019      	ands	r1, r3
 800cf00:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cf04:	2900      	cmp	r1, #0
 800cf06:	dd05      	ble.n	800cf14 <__ulp+0x20>
 800cf08:	2200      	movs	r2, #0
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	ec43 2b10 	vmov	d0, r2, r3
 800cf10:	b002      	add	sp, #8
 800cf12:	4770      	bx	lr
 800cf14:	4249      	negs	r1, r1
 800cf16:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cf1a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cf1e:	f04f 0200 	mov.w	r2, #0
 800cf22:	f04f 0300 	mov.w	r3, #0
 800cf26:	da04      	bge.n	800cf32 <__ulp+0x3e>
 800cf28:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cf2c:	fa41 f300 	asr.w	r3, r1, r0
 800cf30:	e7ec      	b.n	800cf0c <__ulp+0x18>
 800cf32:	f1a0 0114 	sub.w	r1, r0, #20
 800cf36:	291e      	cmp	r1, #30
 800cf38:	bfda      	itte	le
 800cf3a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800cf3e:	fa20 f101 	lsrle.w	r1, r0, r1
 800cf42:	2101      	movgt	r1, #1
 800cf44:	460a      	mov	r2, r1
 800cf46:	e7e1      	b.n	800cf0c <__ulp+0x18>
 800cf48:	7ff00000 	.word	0x7ff00000

0800cf4c <__b2d>:
 800cf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf4e:	6905      	ldr	r5, [r0, #16]
 800cf50:	f100 0714 	add.w	r7, r0, #20
 800cf54:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cf58:	1f2e      	subs	r6, r5, #4
 800cf5a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	f7ff fd48 	bl	800c9f4 <__hi0bits>
 800cf64:	f1c0 0320 	rsb	r3, r0, #32
 800cf68:	280a      	cmp	r0, #10
 800cf6a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cfe8 <__b2d+0x9c>
 800cf6e:	600b      	str	r3, [r1, #0]
 800cf70:	dc14      	bgt.n	800cf9c <__b2d+0x50>
 800cf72:	f1c0 0e0b 	rsb	lr, r0, #11
 800cf76:	fa24 f10e 	lsr.w	r1, r4, lr
 800cf7a:	42b7      	cmp	r7, r6
 800cf7c:	ea41 030c 	orr.w	r3, r1, ip
 800cf80:	bf34      	ite	cc
 800cf82:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cf86:	2100      	movcs	r1, #0
 800cf88:	3015      	adds	r0, #21
 800cf8a:	fa04 f000 	lsl.w	r0, r4, r0
 800cf8e:	fa21 f10e 	lsr.w	r1, r1, lr
 800cf92:	ea40 0201 	orr.w	r2, r0, r1
 800cf96:	ec43 2b10 	vmov	d0, r2, r3
 800cf9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf9c:	42b7      	cmp	r7, r6
 800cf9e:	bf3a      	itte	cc
 800cfa0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cfa4:	f1a5 0608 	subcc.w	r6, r5, #8
 800cfa8:	2100      	movcs	r1, #0
 800cfaa:	380b      	subs	r0, #11
 800cfac:	d017      	beq.n	800cfde <__b2d+0x92>
 800cfae:	f1c0 0c20 	rsb	ip, r0, #32
 800cfb2:	fa04 f500 	lsl.w	r5, r4, r0
 800cfb6:	42be      	cmp	r6, r7
 800cfb8:	fa21 f40c 	lsr.w	r4, r1, ip
 800cfbc:	ea45 0504 	orr.w	r5, r5, r4
 800cfc0:	bf8c      	ite	hi
 800cfc2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cfc6:	2400      	movls	r4, #0
 800cfc8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cfcc:	fa01 f000 	lsl.w	r0, r1, r0
 800cfd0:	fa24 f40c 	lsr.w	r4, r4, ip
 800cfd4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cfd8:	ea40 0204 	orr.w	r2, r0, r4
 800cfdc:	e7db      	b.n	800cf96 <__b2d+0x4a>
 800cfde:	ea44 030c 	orr.w	r3, r4, ip
 800cfe2:	460a      	mov	r2, r1
 800cfe4:	e7d7      	b.n	800cf96 <__b2d+0x4a>
 800cfe6:	bf00      	nop
 800cfe8:	3ff00000 	.word	0x3ff00000

0800cfec <__d2b>:
 800cfec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cff0:	4689      	mov	r9, r1
 800cff2:	2101      	movs	r1, #1
 800cff4:	ec57 6b10 	vmov	r6, r7, d0
 800cff8:	4690      	mov	r8, r2
 800cffa:	f7ff fc09 	bl	800c810 <_Balloc>
 800cffe:	4604      	mov	r4, r0
 800d000:	b930      	cbnz	r0, 800d010 <__d2b+0x24>
 800d002:	4602      	mov	r2, r0
 800d004:	4b25      	ldr	r3, [pc, #148]	; (800d09c <__d2b+0xb0>)
 800d006:	4826      	ldr	r0, [pc, #152]	; (800d0a0 <__d2b+0xb4>)
 800d008:	f240 310a 	movw	r1, #778	; 0x30a
 800d00c:	f000 ff6c 	bl	800dee8 <__assert_func>
 800d010:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d014:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d018:	bb35      	cbnz	r5, 800d068 <__d2b+0x7c>
 800d01a:	2e00      	cmp	r6, #0
 800d01c:	9301      	str	r3, [sp, #4]
 800d01e:	d028      	beq.n	800d072 <__d2b+0x86>
 800d020:	4668      	mov	r0, sp
 800d022:	9600      	str	r6, [sp, #0]
 800d024:	f7ff fd06 	bl	800ca34 <__lo0bits>
 800d028:	9900      	ldr	r1, [sp, #0]
 800d02a:	b300      	cbz	r0, 800d06e <__d2b+0x82>
 800d02c:	9a01      	ldr	r2, [sp, #4]
 800d02e:	f1c0 0320 	rsb	r3, r0, #32
 800d032:	fa02 f303 	lsl.w	r3, r2, r3
 800d036:	430b      	orrs	r3, r1
 800d038:	40c2      	lsrs	r2, r0
 800d03a:	6163      	str	r3, [r4, #20]
 800d03c:	9201      	str	r2, [sp, #4]
 800d03e:	9b01      	ldr	r3, [sp, #4]
 800d040:	61a3      	str	r3, [r4, #24]
 800d042:	2b00      	cmp	r3, #0
 800d044:	bf14      	ite	ne
 800d046:	2202      	movne	r2, #2
 800d048:	2201      	moveq	r2, #1
 800d04a:	6122      	str	r2, [r4, #16]
 800d04c:	b1d5      	cbz	r5, 800d084 <__d2b+0x98>
 800d04e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d052:	4405      	add	r5, r0
 800d054:	f8c9 5000 	str.w	r5, [r9]
 800d058:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d05c:	f8c8 0000 	str.w	r0, [r8]
 800d060:	4620      	mov	r0, r4
 800d062:	b003      	add	sp, #12
 800d064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d06c:	e7d5      	b.n	800d01a <__d2b+0x2e>
 800d06e:	6161      	str	r1, [r4, #20]
 800d070:	e7e5      	b.n	800d03e <__d2b+0x52>
 800d072:	a801      	add	r0, sp, #4
 800d074:	f7ff fcde 	bl	800ca34 <__lo0bits>
 800d078:	9b01      	ldr	r3, [sp, #4]
 800d07a:	6163      	str	r3, [r4, #20]
 800d07c:	2201      	movs	r2, #1
 800d07e:	6122      	str	r2, [r4, #16]
 800d080:	3020      	adds	r0, #32
 800d082:	e7e3      	b.n	800d04c <__d2b+0x60>
 800d084:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d088:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d08c:	f8c9 0000 	str.w	r0, [r9]
 800d090:	6918      	ldr	r0, [r3, #16]
 800d092:	f7ff fcaf 	bl	800c9f4 <__hi0bits>
 800d096:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d09a:	e7df      	b.n	800d05c <__d2b+0x70>
 800d09c:	0800ed50 	.word	0x0800ed50
 800d0a0:	0800eddc 	.word	0x0800eddc

0800d0a4 <__ratio>:
 800d0a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0a8:	4688      	mov	r8, r1
 800d0aa:	4669      	mov	r1, sp
 800d0ac:	4681      	mov	r9, r0
 800d0ae:	f7ff ff4d 	bl	800cf4c <__b2d>
 800d0b2:	a901      	add	r1, sp, #4
 800d0b4:	4640      	mov	r0, r8
 800d0b6:	ec55 4b10 	vmov	r4, r5, d0
 800d0ba:	f7ff ff47 	bl	800cf4c <__b2d>
 800d0be:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d0c2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d0c6:	eba3 0c02 	sub.w	ip, r3, r2
 800d0ca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d0ce:	1a9b      	subs	r3, r3, r2
 800d0d0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d0d4:	ec51 0b10 	vmov	r0, r1, d0
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	bfd6      	itet	le
 800d0dc:	460a      	movle	r2, r1
 800d0de:	462a      	movgt	r2, r5
 800d0e0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d0e4:	468b      	mov	fp, r1
 800d0e6:	462f      	mov	r7, r5
 800d0e8:	bfd4      	ite	le
 800d0ea:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d0ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d0f2:	4620      	mov	r0, r4
 800d0f4:	ee10 2a10 	vmov	r2, s0
 800d0f8:	465b      	mov	r3, fp
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 fbc6 	bl	800088c <__aeabi_ddiv>
 800d100:	ec41 0b10 	vmov	d0, r0, r1
 800d104:	b003      	add	sp, #12
 800d106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d10a <__copybits>:
 800d10a:	3901      	subs	r1, #1
 800d10c:	b570      	push	{r4, r5, r6, lr}
 800d10e:	1149      	asrs	r1, r1, #5
 800d110:	6914      	ldr	r4, [r2, #16]
 800d112:	3101      	adds	r1, #1
 800d114:	f102 0314 	add.w	r3, r2, #20
 800d118:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d11c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d120:	1f05      	subs	r5, r0, #4
 800d122:	42a3      	cmp	r3, r4
 800d124:	d30c      	bcc.n	800d140 <__copybits+0x36>
 800d126:	1aa3      	subs	r3, r4, r2
 800d128:	3b11      	subs	r3, #17
 800d12a:	f023 0303 	bic.w	r3, r3, #3
 800d12e:	3211      	adds	r2, #17
 800d130:	42a2      	cmp	r2, r4
 800d132:	bf88      	it	hi
 800d134:	2300      	movhi	r3, #0
 800d136:	4418      	add	r0, r3
 800d138:	2300      	movs	r3, #0
 800d13a:	4288      	cmp	r0, r1
 800d13c:	d305      	bcc.n	800d14a <__copybits+0x40>
 800d13e:	bd70      	pop	{r4, r5, r6, pc}
 800d140:	f853 6b04 	ldr.w	r6, [r3], #4
 800d144:	f845 6f04 	str.w	r6, [r5, #4]!
 800d148:	e7eb      	b.n	800d122 <__copybits+0x18>
 800d14a:	f840 3b04 	str.w	r3, [r0], #4
 800d14e:	e7f4      	b.n	800d13a <__copybits+0x30>

0800d150 <__any_on>:
 800d150:	f100 0214 	add.w	r2, r0, #20
 800d154:	6900      	ldr	r0, [r0, #16]
 800d156:	114b      	asrs	r3, r1, #5
 800d158:	4298      	cmp	r0, r3
 800d15a:	b510      	push	{r4, lr}
 800d15c:	db11      	blt.n	800d182 <__any_on+0x32>
 800d15e:	dd0a      	ble.n	800d176 <__any_on+0x26>
 800d160:	f011 011f 	ands.w	r1, r1, #31
 800d164:	d007      	beq.n	800d176 <__any_on+0x26>
 800d166:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d16a:	fa24 f001 	lsr.w	r0, r4, r1
 800d16e:	fa00 f101 	lsl.w	r1, r0, r1
 800d172:	428c      	cmp	r4, r1
 800d174:	d10b      	bne.n	800d18e <__any_on+0x3e>
 800d176:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d803      	bhi.n	800d186 <__any_on+0x36>
 800d17e:	2000      	movs	r0, #0
 800d180:	bd10      	pop	{r4, pc}
 800d182:	4603      	mov	r3, r0
 800d184:	e7f7      	b.n	800d176 <__any_on+0x26>
 800d186:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d18a:	2900      	cmp	r1, #0
 800d18c:	d0f5      	beq.n	800d17a <__any_on+0x2a>
 800d18e:	2001      	movs	r0, #1
 800d190:	e7f6      	b.n	800d180 <__any_on+0x30>

0800d192 <_calloc_r>:
 800d192:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d194:	fba1 2402 	umull	r2, r4, r1, r2
 800d198:	b94c      	cbnz	r4, 800d1ae <_calloc_r+0x1c>
 800d19a:	4611      	mov	r1, r2
 800d19c:	9201      	str	r2, [sp, #4]
 800d19e:	f000 f87b 	bl	800d298 <_malloc_r>
 800d1a2:	9a01      	ldr	r2, [sp, #4]
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	b930      	cbnz	r0, 800d1b6 <_calloc_r+0x24>
 800d1a8:	4628      	mov	r0, r5
 800d1aa:	b003      	add	sp, #12
 800d1ac:	bd30      	pop	{r4, r5, pc}
 800d1ae:	220c      	movs	r2, #12
 800d1b0:	6002      	str	r2, [r0, #0]
 800d1b2:	2500      	movs	r5, #0
 800d1b4:	e7f8      	b.n	800d1a8 <_calloc_r+0x16>
 800d1b6:	4621      	mov	r1, r4
 800d1b8:	f7fc fafa 	bl	80097b0 <memset>
 800d1bc:	e7f4      	b.n	800d1a8 <_calloc_r+0x16>
	...

0800d1c0 <_free_r>:
 800d1c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d1c2:	2900      	cmp	r1, #0
 800d1c4:	d044      	beq.n	800d250 <_free_r+0x90>
 800d1c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1ca:	9001      	str	r0, [sp, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f1a1 0404 	sub.w	r4, r1, #4
 800d1d2:	bfb8      	it	lt
 800d1d4:	18e4      	addlt	r4, r4, r3
 800d1d6:	f001 f88b 	bl	800e2f0 <__malloc_lock>
 800d1da:	4a1e      	ldr	r2, [pc, #120]	; (800d254 <_free_r+0x94>)
 800d1dc:	9801      	ldr	r0, [sp, #4]
 800d1de:	6813      	ldr	r3, [r2, #0]
 800d1e0:	b933      	cbnz	r3, 800d1f0 <_free_r+0x30>
 800d1e2:	6063      	str	r3, [r4, #4]
 800d1e4:	6014      	str	r4, [r2, #0]
 800d1e6:	b003      	add	sp, #12
 800d1e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1ec:	f001 b886 	b.w	800e2fc <__malloc_unlock>
 800d1f0:	42a3      	cmp	r3, r4
 800d1f2:	d908      	bls.n	800d206 <_free_r+0x46>
 800d1f4:	6825      	ldr	r5, [r4, #0]
 800d1f6:	1961      	adds	r1, r4, r5
 800d1f8:	428b      	cmp	r3, r1
 800d1fa:	bf01      	itttt	eq
 800d1fc:	6819      	ldreq	r1, [r3, #0]
 800d1fe:	685b      	ldreq	r3, [r3, #4]
 800d200:	1949      	addeq	r1, r1, r5
 800d202:	6021      	streq	r1, [r4, #0]
 800d204:	e7ed      	b.n	800d1e2 <_free_r+0x22>
 800d206:	461a      	mov	r2, r3
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	b10b      	cbz	r3, 800d210 <_free_r+0x50>
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	d9fa      	bls.n	800d206 <_free_r+0x46>
 800d210:	6811      	ldr	r1, [r2, #0]
 800d212:	1855      	adds	r5, r2, r1
 800d214:	42a5      	cmp	r5, r4
 800d216:	d10b      	bne.n	800d230 <_free_r+0x70>
 800d218:	6824      	ldr	r4, [r4, #0]
 800d21a:	4421      	add	r1, r4
 800d21c:	1854      	adds	r4, r2, r1
 800d21e:	42a3      	cmp	r3, r4
 800d220:	6011      	str	r1, [r2, #0]
 800d222:	d1e0      	bne.n	800d1e6 <_free_r+0x26>
 800d224:	681c      	ldr	r4, [r3, #0]
 800d226:	685b      	ldr	r3, [r3, #4]
 800d228:	6053      	str	r3, [r2, #4]
 800d22a:	4421      	add	r1, r4
 800d22c:	6011      	str	r1, [r2, #0]
 800d22e:	e7da      	b.n	800d1e6 <_free_r+0x26>
 800d230:	d902      	bls.n	800d238 <_free_r+0x78>
 800d232:	230c      	movs	r3, #12
 800d234:	6003      	str	r3, [r0, #0]
 800d236:	e7d6      	b.n	800d1e6 <_free_r+0x26>
 800d238:	6825      	ldr	r5, [r4, #0]
 800d23a:	1961      	adds	r1, r4, r5
 800d23c:	428b      	cmp	r3, r1
 800d23e:	bf04      	itt	eq
 800d240:	6819      	ldreq	r1, [r3, #0]
 800d242:	685b      	ldreq	r3, [r3, #4]
 800d244:	6063      	str	r3, [r4, #4]
 800d246:	bf04      	itt	eq
 800d248:	1949      	addeq	r1, r1, r5
 800d24a:	6021      	streq	r1, [r4, #0]
 800d24c:	6054      	str	r4, [r2, #4]
 800d24e:	e7ca      	b.n	800d1e6 <_free_r+0x26>
 800d250:	b003      	add	sp, #12
 800d252:	bd30      	pop	{r4, r5, pc}
 800d254:	2000133c 	.word	0x2000133c

0800d258 <sbrk_aligned>:
 800d258:	b570      	push	{r4, r5, r6, lr}
 800d25a:	4e0e      	ldr	r6, [pc, #56]	; (800d294 <sbrk_aligned+0x3c>)
 800d25c:	460c      	mov	r4, r1
 800d25e:	6831      	ldr	r1, [r6, #0]
 800d260:	4605      	mov	r5, r0
 800d262:	b911      	cbnz	r1, 800d26a <sbrk_aligned+0x12>
 800d264:	f000 fd28 	bl	800dcb8 <_sbrk_r>
 800d268:	6030      	str	r0, [r6, #0]
 800d26a:	4621      	mov	r1, r4
 800d26c:	4628      	mov	r0, r5
 800d26e:	f000 fd23 	bl	800dcb8 <_sbrk_r>
 800d272:	1c43      	adds	r3, r0, #1
 800d274:	d00a      	beq.n	800d28c <sbrk_aligned+0x34>
 800d276:	1cc4      	adds	r4, r0, #3
 800d278:	f024 0403 	bic.w	r4, r4, #3
 800d27c:	42a0      	cmp	r0, r4
 800d27e:	d007      	beq.n	800d290 <sbrk_aligned+0x38>
 800d280:	1a21      	subs	r1, r4, r0
 800d282:	4628      	mov	r0, r5
 800d284:	f000 fd18 	bl	800dcb8 <_sbrk_r>
 800d288:	3001      	adds	r0, #1
 800d28a:	d101      	bne.n	800d290 <sbrk_aligned+0x38>
 800d28c:	f04f 34ff 	mov.w	r4, #4294967295
 800d290:	4620      	mov	r0, r4
 800d292:	bd70      	pop	{r4, r5, r6, pc}
 800d294:	20001340 	.word	0x20001340

0800d298 <_malloc_r>:
 800d298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d29c:	1ccd      	adds	r5, r1, #3
 800d29e:	f025 0503 	bic.w	r5, r5, #3
 800d2a2:	3508      	adds	r5, #8
 800d2a4:	2d0c      	cmp	r5, #12
 800d2a6:	bf38      	it	cc
 800d2a8:	250c      	movcc	r5, #12
 800d2aa:	2d00      	cmp	r5, #0
 800d2ac:	4607      	mov	r7, r0
 800d2ae:	db01      	blt.n	800d2b4 <_malloc_r+0x1c>
 800d2b0:	42a9      	cmp	r1, r5
 800d2b2:	d905      	bls.n	800d2c0 <_malloc_r+0x28>
 800d2b4:	230c      	movs	r3, #12
 800d2b6:	603b      	str	r3, [r7, #0]
 800d2b8:	2600      	movs	r6, #0
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2c0:	4e2e      	ldr	r6, [pc, #184]	; (800d37c <_malloc_r+0xe4>)
 800d2c2:	f001 f815 	bl	800e2f0 <__malloc_lock>
 800d2c6:	6833      	ldr	r3, [r6, #0]
 800d2c8:	461c      	mov	r4, r3
 800d2ca:	bb34      	cbnz	r4, 800d31a <_malloc_r+0x82>
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4638      	mov	r0, r7
 800d2d0:	f7ff ffc2 	bl	800d258 <sbrk_aligned>
 800d2d4:	1c43      	adds	r3, r0, #1
 800d2d6:	4604      	mov	r4, r0
 800d2d8:	d14d      	bne.n	800d376 <_malloc_r+0xde>
 800d2da:	6834      	ldr	r4, [r6, #0]
 800d2dc:	4626      	mov	r6, r4
 800d2de:	2e00      	cmp	r6, #0
 800d2e0:	d140      	bne.n	800d364 <_malloc_r+0xcc>
 800d2e2:	6823      	ldr	r3, [r4, #0]
 800d2e4:	4631      	mov	r1, r6
 800d2e6:	4638      	mov	r0, r7
 800d2e8:	eb04 0803 	add.w	r8, r4, r3
 800d2ec:	f000 fce4 	bl	800dcb8 <_sbrk_r>
 800d2f0:	4580      	cmp	r8, r0
 800d2f2:	d13a      	bne.n	800d36a <_malloc_r+0xd2>
 800d2f4:	6821      	ldr	r1, [r4, #0]
 800d2f6:	3503      	adds	r5, #3
 800d2f8:	1a6d      	subs	r5, r5, r1
 800d2fa:	f025 0503 	bic.w	r5, r5, #3
 800d2fe:	3508      	adds	r5, #8
 800d300:	2d0c      	cmp	r5, #12
 800d302:	bf38      	it	cc
 800d304:	250c      	movcc	r5, #12
 800d306:	4629      	mov	r1, r5
 800d308:	4638      	mov	r0, r7
 800d30a:	f7ff ffa5 	bl	800d258 <sbrk_aligned>
 800d30e:	3001      	adds	r0, #1
 800d310:	d02b      	beq.n	800d36a <_malloc_r+0xd2>
 800d312:	6823      	ldr	r3, [r4, #0]
 800d314:	442b      	add	r3, r5
 800d316:	6023      	str	r3, [r4, #0]
 800d318:	e00e      	b.n	800d338 <_malloc_r+0xa0>
 800d31a:	6822      	ldr	r2, [r4, #0]
 800d31c:	1b52      	subs	r2, r2, r5
 800d31e:	d41e      	bmi.n	800d35e <_malloc_r+0xc6>
 800d320:	2a0b      	cmp	r2, #11
 800d322:	d916      	bls.n	800d352 <_malloc_r+0xba>
 800d324:	1961      	adds	r1, r4, r5
 800d326:	42a3      	cmp	r3, r4
 800d328:	6025      	str	r5, [r4, #0]
 800d32a:	bf18      	it	ne
 800d32c:	6059      	strne	r1, [r3, #4]
 800d32e:	6863      	ldr	r3, [r4, #4]
 800d330:	bf08      	it	eq
 800d332:	6031      	streq	r1, [r6, #0]
 800d334:	5162      	str	r2, [r4, r5]
 800d336:	604b      	str	r3, [r1, #4]
 800d338:	4638      	mov	r0, r7
 800d33a:	f104 060b 	add.w	r6, r4, #11
 800d33e:	f000 ffdd 	bl	800e2fc <__malloc_unlock>
 800d342:	f026 0607 	bic.w	r6, r6, #7
 800d346:	1d23      	adds	r3, r4, #4
 800d348:	1af2      	subs	r2, r6, r3
 800d34a:	d0b6      	beq.n	800d2ba <_malloc_r+0x22>
 800d34c:	1b9b      	subs	r3, r3, r6
 800d34e:	50a3      	str	r3, [r4, r2]
 800d350:	e7b3      	b.n	800d2ba <_malloc_r+0x22>
 800d352:	6862      	ldr	r2, [r4, #4]
 800d354:	42a3      	cmp	r3, r4
 800d356:	bf0c      	ite	eq
 800d358:	6032      	streq	r2, [r6, #0]
 800d35a:	605a      	strne	r2, [r3, #4]
 800d35c:	e7ec      	b.n	800d338 <_malloc_r+0xa0>
 800d35e:	4623      	mov	r3, r4
 800d360:	6864      	ldr	r4, [r4, #4]
 800d362:	e7b2      	b.n	800d2ca <_malloc_r+0x32>
 800d364:	4634      	mov	r4, r6
 800d366:	6876      	ldr	r6, [r6, #4]
 800d368:	e7b9      	b.n	800d2de <_malloc_r+0x46>
 800d36a:	230c      	movs	r3, #12
 800d36c:	603b      	str	r3, [r7, #0]
 800d36e:	4638      	mov	r0, r7
 800d370:	f000 ffc4 	bl	800e2fc <__malloc_unlock>
 800d374:	e7a1      	b.n	800d2ba <_malloc_r+0x22>
 800d376:	6025      	str	r5, [r4, #0]
 800d378:	e7de      	b.n	800d338 <_malloc_r+0xa0>
 800d37a:	bf00      	nop
 800d37c:	2000133c 	.word	0x2000133c

0800d380 <__ssputs_r>:
 800d380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d384:	688e      	ldr	r6, [r1, #8]
 800d386:	429e      	cmp	r6, r3
 800d388:	4682      	mov	sl, r0
 800d38a:	460c      	mov	r4, r1
 800d38c:	4690      	mov	r8, r2
 800d38e:	461f      	mov	r7, r3
 800d390:	d838      	bhi.n	800d404 <__ssputs_r+0x84>
 800d392:	898a      	ldrh	r2, [r1, #12]
 800d394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d398:	d032      	beq.n	800d400 <__ssputs_r+0x80>
 800d39a:	6825      	ldr	r5, [r4, #0]
 800d39c:	6909      	ldr	r1, [r1, #16]
 800d39e:	eba5 0901 	sub.w	r9, r5, r1
 800d3a2:	6965      	ldr	r5, [r4, #20]
 800d3a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	444b      	add	r3, r9
 800d3b0:	106d      	asrs	r5, r5, #1
 800d3b2:	429d      	cmp	r5, r3
 800d3b4:	bf38      	it	cc
 800d3b6:	461d      	movcc	r5, r3
 800d3b8:	0553      	lsls	r3, r2, #21
 800d3ba:	d531      	bpl.n	800d420 <__ssputs_r+0xa0>
 800d3bc:	4629      	mov	r1, r5
 800d3be:	f7ff ff6b 	bl	800d298 <_malloc_r>
 800d3c2:	4606      	mov	r6, r0
 800d3c4:	b950      	cbnz	r0, 800d3dc <__ssputs_r+0x5c>
 800d3c6:	230c      	movs	r3, #12
 800d3c8:	f8ca 3000 	str.w	r3, [sl]
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3d2:	81a3      	strh	r3, [r4, #12]
 800d3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3dc:	6921      	ldr	r1, [r4, #16]
 800d3de:	464a      	mov	r2, r9
 800d3e0:	f7ff fa08 	bl	800c7f4 <memcpy>
 800d3e4:	89a3      	ldrh	r3, [r4, #12]
 800d3e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d3ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ee:	81a3      	strh	r3, [r4, #12]
 800d3f0:	6126      	str	r6, [r4, #16]
 800d3f2:	6165      	str	r5, [r4, #20]
 800d3f4:	444e      	add	r6, r9
 800d3f6:	eba5 0509 	sub.w	r5, r5, r9
 800d3fa:	6026      	str	r6, [r4, #0]
 800d3fc:	60a5      	str	r5, [r4, #8]
 800d3fe:	463e      	mov	r6, r7
 800d400:	42be      	cmp	r6, r7
 800d402:	d900      	bls.n	800d406 <__ssputs_r+0x86>
 800d404:	463e      	mov	r6, r7
 800d406:	6820      	ldr	r0, [r4, #0]
 800d408:	4632      	mov	r2, r6
 800d40a:	4641      	mov	r1, r8
 800d40c:	f000 ff56 	bl	800e2bc <memmove>
 800d410:	68a3      	ldr	r3, [r4, #8]
 800d412:	1b9b      	subs	r3, r3, r6
 800d414:	60a3      	str	r3, [r4, #8]
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	4433      	add	r3, r6
 800d41a:	6023      	str	r3, [r4, #0]
 800d41c:	2000      	movs	r0, #0
 800d41e:	e7db      	b.n	800d3d8 <__ssputs_r+0x58>
 800d420:	462a      	mov	r2, r5
 800d422:	f000 ff71 	bl	800e308 <_realloc_r>
 800d426:	4606      	mov	r6, r0
 800d428:	2800      	cmp	r0, #0
 800d42a:	d1e1      	bne.n	800d3f0 <__ssputs_r+0x70>
 800d42c:	6921      	ldr	r1, [r4, #16]
 800d42e:	4650      	mov	r0, sl
 800d430:	f7ff fec6 	bl	800d1c0 <_free_r>
 800d434:	e7c7      	b.n	800d3c6 <__ssputs_r+0x46>
	...

0800d438 <_svfiprintf_r>:
 800d438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d43c:	4698      	mov	r8, r3
 800d43e:	898b      	ldrh	r3, [r1, #12]
 800d440:	061b      	lsls	r3, r3, #24
 800d442:	b09d      	sub	sp, #116	; 0x74
 800d444:	4607      	mov	r7, r0
 800d446:	460d      	mov	r5, r1
 800d448:	4614      	mov	r4, r2
 800d44a:	d50e      	bpl.n	800d46a <_svfiprintf_r+0x32>
 800d44c:	690b      	ldr	r3, [r1, #16]
 800d44e:	b963      	cbnz	r3, 800d46a <_svfiprintf_r+0x32>
 800d450:	2140      	movs	r1, #64	; 0x40
 800d452:	f7ff ff21 	bl	800d298 <_malloc_r>
 800d456:	6028      	str	r0, [r5, #0]
 800d458:	6128      	str	r0, [r5, #16]
 800d45a:	b920      	cbnz	r0, 800d466 <_svfiprintf_r+0x2e>
 800d45c:	230c      	movs	r3, #12
 800d45e:	603b      	str	r3, [r7, #0]
 800d460:	f04f 30ff 	mov.w	r0, #4294967295
 800d464:	e0d1      	b.n	800d60a <_svfiprintf_r+0x1d2>
 800d466:	2340      	movs	r3, #64	; 0x40
 800d468:	616b      	str	r3, [r5, #20]
 800d46a:	2300      	movs	r3, #0
 800d46c:	9309      	str	r3, [sp, #36]	; 0x24
 800d46e:	2320      	movs	r3, #32
 800d470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d474:	f8cd 800c 	str.w	r8, [sp, #12]
 800d478:	2330      	movs	r3, #48	; 0x30
 800d47a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d624 <_svfiprintf_r+0x1ec>
 800d47e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d482:	f04f 0901 	mov.w	r9, #1
 800d486:	4623      	mov	r3, r4
 800d488:	469a      	mov	sl, r3
 800d48a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d48e:	b10a      	cbz	r2, 800d494 <_svfiprintf_r+0x5c>
 800d490:	2a25      	cmp	r2, #37	; 0x25
 800d492:	d1f9      	bne.n	800d488 <_svfiprintf_r+0x50>
 800d494:	ebba 0b04 	subs.w	fp, sl, r4
 800d498:	d00b      	beq.n	800d4b2 <_svfiprintf_r+0x7a>
 800d49a:	465b      	mov	r3, fp
 800d49c:	4622      	mov	r2, r4
 800d49e:	4629      	mov	r1, r5
 800d4a0:	4638      	mov	r0, r7
 800d4a2:	f7ff ff6d 	bl	800d380 <__ssputs_r>
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	f000 80aa 	beq.w	800d600 <_svfiprintf_r+0x1c8>
 800d4ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4ae:	445a      	add	r2, fp
 800d4b0:	9209      	str	r2, [sp, #36]	; 0x24
 800d4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	f000 80a2 	beq.w	800d600 <_svfiprintf_r+0x1c8>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	f04f 32ff 	mov.w	r2, #4294967295
 800d4c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4c6:	f10a 0a01 	add.w	sl, sl, #1
 800d4ca:	9304      	str	r3, [sp, #16]
 800d4cc:	9307      	str	r3, [sp, #28]
 800d4ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4d2:	931a      	str	r3, [sp, #104]	; 0x68
 800d4d4:	4654      	mov	r4, sl
 800d4d6:	2205      	movs	r2, #5
 800d4d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4dc:	4851      	ldr	r0, [pc, #324]	; (800d624 <_svfiprintf_r+0x1ec>)
 800d4de:	f7f2 fe9f 	bl	8000220 <memchr>
 800d4e2:	9a04      	ldr	r2, [sp, #16]
 800d4e4:	b9d8      	cbnz	r0, 800d51e <_svfiprintf_r+0xe6>
 800d4e6:	06d0      	lsls	r0, r2, #27
 800d4e8:	bf44      	itt	mi
 800d4ea:	2320      	movmi	r3, #32
 800d4ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4f0:	0711      	lsls	r1, r2, #28
 800d4f2:	bf44      	itt	mi
 800d4f4:	232b      	movmi	r3, #43	; 0x2b
 800d4f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fe:	2b2a      	cmp	r3, #42	; 0x2a
 800d500:	d015      	beq.n	800d52e <_svfiprintf_r+0xf6>
 800d502:	9a07      	ldr	r2, [sp, #28]
 800d504:	4654      	mov	r4, sl
 800d506:	2000      	movs	r0, #0
 800d508:	f04f 0c0a 	mov.w	ip, #10
 800d50c:	4621      	mov	r1, r4
 800d50e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d512:	3b30      	subs	r3, #48	; 0x30
 800d514:	2b09      	cmp	r3, #9
 800d516:	d94e      	bls.n	800d5b6 <_svfiprintf_r+0x17e>
 800d518:	b1b0      	cbz	r0, 800d548 <_svfiprintf_r+0x110>
 800d51a:	9207      	str	r2, [sp, #28]
 800d51c:	e014      	b.n	800d548 <_svfiprintf_r+0x110>
 800d51e:	eba0 0308 	sub.w	r3, r0, r8
 800d522:	fa09 f303 	lsl.w	r3, r9, r3
 800d526:	4313      	orrs	r3, r2
 800d528:	9304      	str	r3, [sp, #16]
 800d52a:	46a2      	mov	sl, r4
 800d52c:	e7d2      	b.n	800d4d4 <_svfiprintf_r+0x9c>
 800d52e:	9b03      	ldr	r3, [sp, #12]
 800d530:	1d19      	adds	r1, r3, #4
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	9103      	str	r1, [sp, #12]
 800d536:	2b00      	cmp	r3, #0
 800d538:	bfbb      	ittet	lt
 800d53a:	425b      	neglt	r3, r3
 800d53c:	f042 0202 	orrlt.w	r2, r2, #2
 800d540:	9307      	strge	r3, [sp, #28]
 800d542:	9307      	strlt	r3, [sp, #28]
 800d544:	bfb8      	it	lt
 800d546:	9204      	strlt	r2, [sp, #16]
 800d548:	7823      	ldrb	r3, [r4, #0]
 800d54a:	2b2e      	cmp	r3, #46	; 0x2e
 800d54c:	d10c      	bne.n	800d568 <_svfiprintf_r+0x130>
 800d54e:	7863      	ldrb	r3, [r4, #1]
 800d550:	2b2a      	cmp	r3, #42	; 0x2a
 800d552:	d135      	bne.n	800d5c0 <_svfiprintf_r+0x188>
 800d554:	9b03      	ldr	r3, [sp, #12]
 800d556:	1d1a      	adds	r2, r3, #4
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	9203      	str	r2, [sp, #12]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	bfb8      	it	lt
 800d560:	f04f 33ff 	movlt.w	r3, #4294967295
 800d564:	3402      	adds	r4, #2
 800d566:	9305      	str	r3, [sp, #20]
 800d568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d634 <_svfiprintf_r+0x1fc>
 800d56c:	7821      	ldrb	r1, [r4, #0]
 800d56e:	2203      	movs	r2, #3
 800d570:	4650      	mov	r0, sl
 800d572:	f7f2 fe55 	bl	8000220 <memchr>
 800d576:	b140      	cbz	r0, 800d58a <_svfiprintf_r+0x152>
 800d578:	2340      	movs	r3, #64	; 0x40
 800d57a:	eba0 000a 	sub.w	r0, r0, sl
 800d57e:	fa03 f000 	lsl.w	r0, r3, r0
 800d582:	9b04      	ldr	r3, [sp, #16]
 800d584:	4303      	orrs	r3, r0
 800d586:	3401      	adds	r4, #1
 800d588:	9304      	str	r3, [sp, #16]
 800d58a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d58e:	4826      	ldr	r0, [pc, #152]	; (800d628 <_svfiprintf_r+0x1f0>)
 800d590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d594:	2206      	movs	r2, #6
 800d596:	f7f2 fe43 	bl	8000220 <memchr>
 800d59a:	2800      	cmp	r0, #0
 800d59c:	d038      	beq.n	800d610 <_svfiprintf_r+0x1d8>
 800d59e:	4b23      	ldr	r3, [pc, #140]	; (800d62c <_svfiprintf_r+0x1f4>)
 800d5a0:	bb1b      	cbnz	r3, 800d5ea <_svfiprintf_r+0x1b2>
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	3307      	adds	r3, #7
 800d5a6:	f023 0307 	bic.w	r3, r3, #7
 800d5aa:	3308      	adds	r3, #8
 800d5ac:	9303      	str	r3, [sp, #12]
 800d5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b0:	4433      	add	r3, r6
 800d5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5b4:	e767      	b.n	800d486 <_svfiprintf_r+0x4e>
 800d5b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	2001      	movs	r0, #1
 800d5be:	e7a5      	b.n	800d50c <_svfiprintf_r+0xd4>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	3401      	adds	r4, #1
 800d5c4:	9305      	str	r3, [sp, #20]
 800d5c6:	4619      	mov	r1, r3
 800d5c8:	f04f 0c0a 	mov.w	ip, #10
 800d5cc:	4620      	mov	r0, r4
 800d5ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5d2:	3a30      	subs	r2, #48	; 0x30
 800d5d4:	2a09      	cmp	r2, #9
 800d5d6:	d903      	bls.n	800d5e0 <_svfiprintf_r+0x1a8>
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d0c5      	beq.n	800d568 <_svfiprintf_r+0x130>
 800d5dc:	9105      	str	r1, [sp, #20]
 800d5de:	e7c3      	b.n	800d568 <_svfiprintf_r+0x130>
 800d5e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5e4:	4604      	mov	r4, r0
 800d5e6:	2301      	movs	r3, #1
 800d5e8:	e7f0      	b.n	800d5cc <_svfiprintf_r+0x194>
 800d5ea:	ab03      	add	r3, sp, #12
 800d5ec:	9300      	str	r3, [sp, #0]
 800d5ee:	462a      	mov	r2, r5
 800d5f0:	4b0f      	ldr	r3, [pc, #60]	; (800d630 <_svfiprintf_r+0x1f8>)
 800d5f2:	a904      	add	r1, sp, #16
 800d5f4:	4638      	mov	r0, r7
 800d5f6:	f7fc f983 	bl	8009900 <_printf_float>
 800d5fa:	1c42      	adds	r2, r0, #1
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	d1d6      	bne.n	800d5ae <_svfiprintf_r+0x176>
 800d600:	89ab      	ldrh	r3, [r5, #12]
 800d602:	065b      	lsls	r3, r3, #25
 800d604:	f53f af2c 	bmi.w	800d460 <_svfiprintf_r+0x28>
 800d608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d60a:	b01d      	add	sp, #116	; 0x74
 800d60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d610:	ab03      	add	r3, sp, #12
 800d612:	9300      	str	r3, [sp, #0]
 800d614:	462a      	mov	r2, r5
 800d616:	4b06      	ldr	r3, [pc, #24]	; (800d630 <_svfiprintf_r+0x1f8>)
 800d618:	a904      	add	r1, sp, #16
 800d61a:	4638      	mov	r0, r7
 800d61c:	f7fc fc14 	bl	8009e48 <_printf_i>
 800d620:	e7eb      	b.n	800d5fa <_svfiprintf_r+0x1c2>
 800d622:	bf00      	nop
 800d624:	0800ef34 	.word	0x0800ef34
 800d628:	0800ef3e 	.word	0x0800ef3e
 800d62c:	08009901 	.word	0x08009901
 800d630:	0800d381 	.word	0x0800d381
 800d634:	0800ef3a 	.word	0x0800ef3a

0800d638 <_sungetc_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	1c4b      	adds	r3, r1, #1
 800d63c:	4614      	mov	r4, r2
 800d63e:	d103      	bne.n	800d648 <_sungetc_r+0x10>
 800d640:	f04f 35ff 	mov.w	r5, #4294967295
 800d644:	4628      	mov	r0, r5
 800d646:	bd38      	pop	{r3, r4, r5, pc}
 800d648:	8993      	ldrh	r3, [r2, #12]
 800d64a:	f023 0320 	bic.w	r3, r3, #32
 800d64e:	8193      	strh	r3, [r2, #12]
 800d650:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d652:	6852      	ldr	r2, [r2, #4]
 800d654:	b2cd      	uxtb	r5, r1
 800d656:	b18b      	cbz	r3, 800d67c <_sungetc_r+0x44>
 800d658:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d65a:	4293      	cmp	r3, r2
 800d65c:	dd08      	ble.n	800d670 <_sungetc_r+0x38>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	1e5a      	subs	r2, r3, #1
 800d662:	6022      	str	r2, [r4, #0]
 800d664:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d668:	6863      	ldr	r3, [r4, #4]
 800d66a:	3301      	adds	r3, #1
 800d66c:	6063      	str	r3, [r4, #4]
 800d66e:	e7e9      	b.n	800d644 <_sungetc_r+0xc>
 800d670:	4621      	mov	r1, r4
 800d672:	f000 fbf1 	bl	800de58 <__submore>
 800d676:	2800      	cmp	r0, #0
 800d678:	d0f1      	beq.n	800d65e <_sungetc_r+0x26>
 800d67a:	e7e1      	b.n	800d640 <_sungetc_r+0x8>
 800d67c:	6921      	ldr	r1, [r4, #16]
 800d67e:	6823      	ldr	r3, [r4, #0]
 800d680:	b151      	cbz	r1, 800d698 <_sungetc_r+0x60>
 800d682:	4299      	cmp	r1, r3
 800d684:	d208      	bcs.n	800d698 <_sungetc_r+0x60>
 800d686:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d68a:	42a9      	cmp	r1, r5
 800d68c:	d104      	bne.n	800d698 <_sungetc_r+0x60>
 800d68e:	3b01      	subs	r3, #1
 800d690:	3201      	adds	r2, #1
 800d692:	6023      	str	r3, [r4, #0]
 800d694:	6062      	str	r2, [r4, #4]
 800d696:	e7d5      	b.n	800d644 <_sungetc_r+0xc>
 800d698:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6a0:	6363      	str	r3, [r4, #52]	; 0x34
 800d6a2:	2303      	movs	r3, #3
 800d6a4:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d6ac:	6023      	str	r3, [r4, #0]
 800d6ae:	2301      	movs	r3, #1
 800d6b0:	e7dc      	b.n	800d66c <_sungetc_r+0x34>

0800d6b2 <__ssrefill_r>:
 800d6b2:	b510      	push	{r4, lr}
 800d6b4:	460c      	mov	r4, r1
 800d6b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d6b8:	b169      	cbz	r1, 800d6d6 <__ssrefill_r+0x24>
 800d6ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6be:	4299      	cmp	r1, r3
 800d6c0:	d001      	beq.n	800d6c6 <__ssrefill_r+0x14>
 800d6c2:	f7ff fd7d 	bl	800d1c0 <_free_r>
 800d6c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6c8:	6063      	str	r3, [r4, #4]
 800d6ca:	2000      	movs	r0, #0
 800d6cc:	6360      	str	r0, [r4, #52]	; 0x34
 800d6ce:	b113      	cbz	r3, 800d6d6 <__ssrefill_r+0x24>
 800d6d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d6d2:	6023      	str	r3, [r4, #0]
 800d6d4:	bd10      	pop	{r4, pc}
 800d6d6:	6923      	ldr	r3, [r4, #16]
 800d6d8:	6023      	str	r3, [r4, #0]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	6063      	str	r3, [r4, #4]
 800d6de:	89a3      	ldrh	r3, [r4, #12]
 800d6e0:	f043 0320 	orr.w	r3, r3, #32
 800d6e4:	81a3      	strh	r3, [r4, #12]
 800d6e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d6ea:	e7f3      	b.n	800d6d4 <__ssrefill_r+0x22>

0800d6ec <__ssvfiscanf_r>:
 800d6ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6f0:	460c      	mov	r4, r1
 800d6f2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d6f6:	2100      	movs	r1, #0
 800d6f8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d6fc:	49a6      	ldr	r1, [pc, #664]	; (800d998 <__ssvfiscanf_r+0x2ac>)
 800d6fe:	91a0      	str	r1, [sp, #640]	; 0x280
 800d700:	f10d 0804 	add.w	r8, sp, #4
 800d704:	49a5      	ldr	r1, [pc, #660]	; (800d99c <__ssvfiscanf_r+0x2b0>)
 800d706:	4fa6      	ldr	r7, [pc, #664]	; (800d9a0 <__ssvfiscanf_r+0x2b4>)
 800d708:	f8df 9298 	ldr.w	r9, [pc, #664]	; 800d9a4 <__ssvfiscanf_r+0x2b8>
 800d70c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d710:	4606      	mov	r6, r0
 800d712:	91a1      	str	r1, [sp, #644]	; 0x284
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	7813      	ldrb	r3, [r2, #0]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	f000 815a 	beq.w	800d9d2 <__ssvfiscanf_r+0x2e6>
 800d71e:	5dd9      	ldrb	r1, [r3, r7]
 800d720:	f011 0108 	ands.w	r1, r1, #8
 800d724:	f102 0501 	add.w	r5, r2, #1
 800d728:	d019      	beq.n	800d75e <__ssvfiscanf_r+0x72>
 800d72a:	6863      	ldr	r3, [r4, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	dd0f      	ble.n	800d750 <__ssvfiscanf_r+0x64>
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	781a      	ldrb	r2, [r3, #0]
 800d734:	5cba      	ldrb	r2, [r7, r2]
 800d736:	0712      	lsls	r2, r2, #28
 800d738:	d401      	bmi.n	800d73e <__ssvfiscanf_r+0x52>
 800d73a:	462a      	mov	r2, r5
 800d73c:	e7eb      	b.n	800d716 <__ssvfiscanf_r+0x2a>
 800d73e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d740:	3201      	adds	r2, #1
 800d742:	9245      	str	r2, [sp, #276]	; 0x114
 800d744:	6862      	ldr	r2, [r4, #4]
 800d746:	3301      	adds	r3, #1
 800d748:	3a01      	subs	r2, #1
 800d74a:	6062      	str	r2, [r4, #4]
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	e7ec      	b.n	800d72a <__ssvfiscanf_r+0x3e>
 800d750:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d752:	4621      	mov	r1, r4
 800d754:	4630      	mov	r0, r6
 800d756:	4798      	blx	r3
 800d758:	2800      	cmp	r0, #0
 800d75a:	d0e9      	beq.n	800d730 <__ssvfiscanf_r+0x44>
 800d75c:	e7ed      	b.n	800d73a <__ssvfiscanf_r+0x4e>
 800d75e:	2b25      	cmp	r3, #37	; 0x25
 800d760:	d012      	beq.n	800d788 <__ssvfiscanf_r+0x9c>
 800d762:	469a      	mov	sl, r3
 800d764:	6863      	ldr	r3, [r4, #4]
 800d766:	2b00      	cmp	r3, #0
 800d768:	f340 8091 	ble.w	800d88e <__ssvfiscanf_r+0x1a2>
 800d76c:	6822      	ldr	r2, [r4, #0]
 800d76e:	7813      	ldrb	r3, [r2, #0]
 800d770:	4553      	cmp	r3, sl
 800d772:	f040 812e 	bne.w	800d9d2 <__ssvfiscanf_r+0x2e6>
 800d776:	6863      	ldr	r3, [r4, #4]
 800d778:	3b01      	subs	r3, #1
 800d77a:	6063      	str	r3, [r4, #4]
 800d77c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d77e:	3201      	adds	r2, #1
 800d780:	3301      	adds	r3, #1
 800d782:	6022      	str	r2, [r4, #0]
 800d784:	9345      	str	r3, [sp, #276]	; 0x114
 800d786:	e7d8      	b.n	800d73a <__ssvfiscanf_r+0x4e>
 800d788:	9141      	str	r1, [sp, #260]	; 0x104
 800d78a:	9143      	str	r1, [sp, #268]	; 0x10c
 800d78c:	7853      	ldrb	r3, [r2, #1]
 800d78e:	2b2a      	cmp	r3, #42	; 0x2a
 800d790:	bf02      	ittt	eq
 800d792:	2310      	moveq	r3, #16
 800d794:	1c95      	addeq	r5, r2, #2
 800d796:	9341      	streq	r3, [sp, #260]	; 0x104
 800d798:	220a      	movs	r2, #10
 800d79a:	46aa      	mov	sl, r5
 800d79c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d7a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d7a4:	2b09      	cmp	r3, #9
 800d7a6:	d91d      	bls.n	800d7e4 <__ssvfiscanf_r+0xf8>
 800d7a8:	487e      	ldr	r0, [pc, #504]	; (800d9a4 <__ssvfiscanf_r+0x2b8>)
 800d7aa:	2203      	movs	r2, #3
 800d7ac:	f7f2 fd38 	bl	8000220 <memchr>
 800d7b0:	b140      	cbz	r0, 800d7c4 <__ssvfiscanf_r+0xd8>
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	eba0 0009 	sub.w	r0, r0, r9
 800d7b8:	fa03 f000 	lsl.w	r0, r3, r0
 800d7bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d7be:	4318      	orrs	r0, r3
 800d7c0:	9041      	str	r0, [sp, #260]	; 0x104
 800d7c2:	4655      	mov	r5, sl
 800d7c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d7c8:	2b78      	cmp	r3, #120	; 0x78
 800d7ca:	d806      	bhi.n	800d7da <__ssvfiscanf_r+0xee>
 800d7cc:	2b57      	cmp	r3, #87	; 0x57
 800d7ce:	d810      	bhi.n	800d7f2 <__ssvfiscanf_r+0x106>
 800d7d0:	2b25      	cmp	r3, #37	; 0x25
 800d7d2:	d0c6      	beq.n	800d762 <__ssvfiscanf_r+0x76>
 800d7d4:	d856      	bhi.n	800d884 <__ssvfiscanf_r+0x198>
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d064      	beq.n	800d8a4 <__ssvfiscanf_r+0x1b8>
 800d7da:	2303      	movs	r3, #3
 800d7dc:	9347      	str	r3, [sp, #284]	; 0x11c
 800d7de:	230a      	movs	r3, #10
 800d7e0:	9342      	str	r3, [sp, #264]	; 0x108
 800d7e2:	e071      	b.n	800d8c8 <__ssvfiscanf_r+0x1dc>
 800d7e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d7e6:	fb02 1103 	mla	r1, r2, r3, r1
 800d7ea:	3930      	subs	r1, #48	; 0x30
 800d7ec:	9143      	str	r1, [sp, #268]	; 0x10c
 800d7ee:	4655      	mov	r5, sl
 800d7f0:	e7d3      	b.n	800d79a <__ssvfiscanf_r+0xae>
 800d7f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d7f6:	2a20      	cmp	r2, #32
 800d7f8:	d8ef      	bhi.n	800d7da <__ssvfiscanf_r+0xee>
 800d7fa:	a101      	add	r1, pc, #4	; (adr r1, 800d800 <__ssvfiscanf_r+0x114>)
 800d7fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d800:	0800d8b3 	.word	0x0800d8b3
 800d804:	0800d7db 	.word	0x0800d7db
 800d808:	0800d7db 	.word	0x0800d7db
 800d80c:	0800d911 	.word	0x0800d911
 800d810:	0800d7db 	.word	0x0800d7db
 800d814:	0800d7db 	.word	0x0800d7db
 800d818:	0800d7db 	.word	0x0800d7db
 800d81c:	0800d7db 	.word	0x0800d7db
 800d820:	0800d7db 	.word	0x0800d7db
 800d824:	0800d7db 	.word	0x0800d7db
 800d828:	0800d7db 	.word	0x0800d7db
 800d82c:	0800d927 	.word	0x0800d927
 800d830:	0800d8fd 	.word	0x0800d8fd
 800d834:	0800d88b 	.word	0x0800d88b
 800d838:	0800d88b 	.word	0x0800d88b
 800d83c:	0800d88b 	.word	0x0800d88b
 800d840:	0800d7db 	.word	0x0800d7db
 800d844:	0800d901 	.word	0x0800d901
 800d848:	0800d7db 	.word	0x0800d7db
 800d84c:	0800d7db 	.word	0x0800d7db
 800d850:	0800d7db 	.word	0x0800d7db
 800d854:	0800d7db 	.word	0x0800d7db
 800d858:	0800d937 	.word	0x0800d937
 800d85c:	0800d909 	.word	0x0800d909
 800d860:	0800d8ab 	.word	0x0800d8ab
 800d864:	0800d7db 	.word	0x0800d7db
 800d868:	0800d7db 	.word	0x0800d7db
 800d86c:	0800d933 	.word	0x0800d933
 800d870:	0800d7db 	.word	0x0800d7db
 800d874:	0800d8fd 	.word	0x0800d8fd
 800d878:	0800d7db 	.word	0x0800d7db
 800d87c:	0800d7db 	.word	0x0800d7db
 800d880:	0800d8b3 	.word	0x0800d8b3
 800d884:	3b45      	subs	r3, #69	; 0x45
 800d886:	2b02      	cmp	r3, #2
 800d888:	d8a7      	bhi.n	800d7da <__ssvfiscanf_r+0xee>
 800d88a:	2305      	movs	r3, #5
 800d88c:	e01b      	b.n	800d8c6 <__ssvfiscanf_r+0x1da>
 800d88e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d890:	4621      	mov	r1, r4
 800d892:	4630      	mov	r0, r6
 800d894:	4798      	blx	r3
 800d896:	2800      	cmp	r0, #0
 800d898:	f43f af68 	beq.w	800d76c <__ssvfiscanf_r+0x80>
 800d89c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	f040 808d 	bne.w	800d9be <__ssvfiscanf_r+0x2d2>
 800d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8a8:	e08f      	b.n	800d9ca <__ssvfiscanf_r+0x2de>
 800d8aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8ac:	f042 0220 	orr.w	r2, r2, #32
 800d8b0:	9241      	str	r2, [sp, #260]	; 0x104
 800d8b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d8b8:	9241      	str	r2, [sp, #260]	; 0x104
 800d8ba:	2210      	movs	r2, #16
 800d8bc:	2b6f      	cmp	r3, #111	; 0x6f
 800d8be:	9242      	str	r2, [sp, #264]	; 0x108
 800d8c0:	bf34      	ite	cc
 800d8c2:	2303      	movcc	r3, #3
 800d8c4:	2304      	movcs	r3, #4
 800d8c6:	9347      	str	r3, [sp, #284]	; 0x11c
 800d8c8:	6863      	ldr	r3, [r4, #4]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	dd42      	ble.n	800d954 <__ssvfiscanf_r+0x268>
 800d8ce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d8d0:	0659      	lsls	r1, r3, #25
 800d8d2:	d404      	bmi.n	800d8de <__ssvfiscanf_r+0x1f2>
 800d8d4:	6823      	ldr	r3, [r4, #0]
 800d8d6:	781a      	ldrb	r2, [r3, #0]
 800d8d8:	5cba      	ldrb	r2, [r7, r2]
 800d8da:	0712      	lsls	r2, r2, #28
 800d8dc:	d441      	bmi.n	800d962 <__ssvfiscanf_r+0x276>
 800d8de:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d8e0:	2b02      	cmp	r3, #2
 800d8e2:	dc50      	bgt.n	800d986 <__ssvfiscanf_r+0x29a>
 800d8e4:	466b      	mov	r3, sp
 800d8e6:	4622      	mov	r2, r4
 800d8e8:	a941      	add	r1, sp, #260	; 0x104
 800d8ea:	4630      	mov	r0, r6
 800d8ec:	f000 f876 	bl	800d9dc <_scanf_chars>
 800d8f0:	2801      	cmp	r0, #1
 800d8f2:	d06e      	beq.n	800d9d2 <__ssvfiscanf_r+0x2e6>
 800d8f4:	2802      	cmp	r0, #2
 800d8f6:	f47f af20 	bne.w	800d73a <__ssvfiscanf_r+0x4e>
 800d8fa:	e7cf      	b.n	800d89c <__ssvfiscanf_r+0x1b0>
 800d8fc:	220a      	movs	r2, #10
 800d8fe:	e7dd      	b.n	800d8bc <__ssvfiscanf_r+0x1d0>
 800d900:	2300      	movs	r3, #0
 800d902:	9342      	str	r3, [sp, #264]	; 0x108
 800d904:	2303      	movs	r3, #3
 800d906:	e7de      	b.n	800d8c6 <__ssvfiscanf_r+0x1da>
 800d908:	2308      	movs	r3, #8
 800d90a:	9342      	str	r3, [sp, #264]	; 0x108
 800d90c:	2304      	movs	r3, #4
 800d90e:	e7da      	b.n	800d8c6 <__ssvfiscanf_r+0x1da>
 800d910:	4629      	mov	r1, r5
 800d912:	4640      	mov	r0, r8
 800d914:	f000 f9e0 	bl	800dcd8 <__sccl>
 800d918:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d91a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d91e:	9341      	str	r3, [sp, #260]	; 0x104
 800d920:	4605      	mov	r5, r0
 800d922:	2301      	movs	r3, #1
 800d924:	e7cf      	b.n	800d8c6 <__ssvfiscanf_r+0x1da>
 800d926:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d92c:	9341      	str	r3, [sp, #260]	; 0x104
 800d92e:	2300      	movs	r3, #0
 800d930:	e7c9      	b.n	800d8c6 <__ssvfiscanf_r+0x1da>
 800d932:	2302      	movs	r3, #2
 800d934:	e7c7      	b.n	800d8c6 <__ssvfiscanf_r+0x1da>
 800d936:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d938:	06c3      	lsls	r3, r0, #27
 800d93a:	f53f aefe 	bmi.w	800d73a <__ssvfiscanf_r+0x4e>
 800d93e:	9b00      	ldr	r3, [sp, #0]
 800d940:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d942:	1d19      	adds	r1, r3, #4
 800d944:	9100      	str	r1, [sp, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	f010 0f01 	tst.w	r0, #1
 800d94c:	bf14      	ite	ne
 800d94e:	801a      	strhne	r2, [r3, #0]
 800d950:	601a      	streq	r2, [r3, #0]
 800d952:	e6f2      	b.n	800d73a <__ssvfiscanf_r+0x4e>
 800d954:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d956:	4621      	mov	r1, r4
 800d958:	4630      	mov	r0, r6
 800d95a:	4798      	blx	r3
 800d95c:	2800      	cmp	r0, #0
 800d95e:	d0b6      	beq.n	800d8ce <__ssvfiscanf_r+0x1e2>
 800d960:	e79c      	b.n	800d89c <__ssvfiscanf_r+0x1b0>
 800d962:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d964:	3201      	adds	r2, #1
 800d966:	9245      	str	r2, [sp, #276]	; 0x114
 800d968:	6862      	ldr	r2, [r4, #4]
 800d96a:	3a01      	subs	r2, #1
 800d96c:	2a00      	cmp	r2, #0
 800d96e:	6062      	str	r2, [r4, #4]
 800d970:	dd02      	ble.n	800d978 <__ssvfiscanf_r+0x28c>
 800d972:	3301      	adds	r3, #1
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	e7ad      	b.n	800d8d4 <__ssvfiscanf_r+0x1e8>
 800d978:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d97a:	4621      	mov	r1, r4
 800d97c:	4630      	mov	r0, r6
 800d97e:	4798      	blx	r3
 800d980:	2800      	cmp	r0, #0
 800d982:	d0a7      	beq.n	800d8d4 <__ssvfiscanf_r+0x1e8>
 800d984:	e78a      	b.n	800d89c <__ssvfiscanf_r+0x1b0>
 800d986:	2b04      	cmp	r3, #4
 800d988:	dc0e      	bgt.n	800d9a8 <__ssvfiscanf_r+0x2bc>
 800d98a:	466b      	mov	r3, sp
 800d98c:	4622      	mov	r2, r4
 800d98e:	a941      	add	r1, sp, #260	; 0x104
 800d990:	4630      	mov	r0, r6
 800d992:	f000 f87d 	bl	800da90 <_scanf_i>
 800d996:	e7ab      	b.n	800d8f0 <__ssvfiscanf_r+0x204>
 800d998:	0800d639 	.word	0x0800d639
 800d99c:	0800d6b3 	.word	0x0800d6b3
 800d9a0:	0800ebd1 	.word	0x0800ebd1
 800d9a4:	0800ef3a 	.word	0x0800ef3a
 800d9a8:	4b0b      	ldr	r3, [pc, #44]	; (800d9d8 <__ssvfiscanf_r+0x2ec>)
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	f43f aec5 	beq.w	800d73a <__ssvfiscanf_r+0x4e>
 800d9b0:	466b      	mov	r3, sp
 800d9b2:	4622      	mov	r2, r4
 800d9b4:	a941      	add	r1, sp, #260	; 0x104
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f7fc fb6c 	bl	800a094 <_scanf_float>
 800d9bc:	e798      	b.n	800d8f0 <__ssvfiscanf_r+0x204>
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	f013 0f40 	tst.w	r3, #64	; 0x40
 800d9c4:	bf18      	it	ne
 800d9c6:	f04f 30ff 	movne.w	r0, #4294967295
 800d9ca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800d9ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9d2:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d9d4:	e7f9      	b.n	800d9ca <__ssvfiscanf_r+0x2de>
 800d9d6:	bf00      	nop
 800d9d8:	0800a095 	.word	0x0800a095

0800d9dc <_scanf_chars>:
 800d9dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d9e0:	4615      	mov	r5, r2
 800d9e2:	688a      	ldr	r2, [r1, #8]
 800d9e4:	4680      	mov	r8, r0
 800d9e6:	460c      	mov	r4, r1
 800d9e8:	b932      	cbnz	r2, 800d9f8 <_scanf_chars+0x1c>
 800d9ea:	698a      	ldr	r2, [r1, #24]
 800d9ec:	2a00      	cmp	r2, #0
 800d9ee:	bf0c      	ite	eq
 800d9f0:	2201      	moveq	r2, #1
 800d9f2:	f04f 32ff 	movne.w	r2, #4294967295
 800d9f6:	608a      	str	r2, [r1, #8]
 800d9f8:	6822      	ldr	r2, [r4, #0]
 800d9fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800da8c <_scanf_chars+0xb0>
 800d9fe:	06d1      	lsls	r1, r2, #27
 800da00:	bf5f      	itttt	pl
 800da02:	681a      	ldrpl	r2, [r3, #0]
 800da04:	1d11      	addpl	r1, r2, #4
 800da06:	6019      	strpl	r1, [r3, #0]
 800da08:	6816      	ldrpl	r6, [r2, #0]
 800da0a:	2700      	movs	r7, #0
 800da0c:	69a0      	ldr	r0, [r4, #24]
 800da0e:	b188      	cbz	r0, 800da34 <_scanf_chars+0x58>
 800da10:	2801      	cmp	r0, #1
 800da12:	d107      	bne.n	800da24 <_scanf_chars+0x48>
 800da14:	682a      	ldr	r2, [r5, #0]
 800da16:	7811      	ldrb	r1, [r2, #0]
 800da18:	6962      	ldr	r2, [r4, #20]
 800da1a:	5c52      	ldrb	r2, [r2, r1]
 800da1c:	b952      	cbnz	r2, 800da34 <_scanf_chars+0x58>
 800da1e:	2f00      	cmp	r7, #0
 800da20:	d031      	beq.n	800da86 <_scanf_chars+0xaa>
 800da22:	e022      	b.n	800da6a <_scanf_chars+0x8e>
 800da24:	2802      	cmp	r0, #2
 800da26:	d120      	bne.n	800da6a <_scanf_chars+0x8e>
 800da28:	682b      	ldr	r3, [r5, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800da30:	071b      	lsls	r3, r3, #28
 800da32:	d41a      	bmi.n	800da6a <_scanf_chars+0x8e>
 800da34:	6823      	ldr	r3, [r4, #0]
 800da36:	06da      	lsls	r2, r3, #27
 800da38:	bf5e      	ittt	pl
 800da3a:	682b      	ldrpl	r3, [r5, #0]
 800da3c:	781b      	ldrbpl	r3, [r3, #0]
 800da3e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800da42:	682a      	ldr	r2, [r5, #0]
 800da44:	686b      	ldr	r3, [r5, #4]
 800da46:	3201      	adds	r2, #1
 800da48:	602a      	str	r2, [r5, #0]
 800da4a:	68a2      	ldr	r2, [r4, #8]
 800da4c:	3b01      	subs	r3, #1
 800da4e:	3a01      	subs	r2, #1
 800da50:	606b      	str	r3, [r5, #4]
 800da52:	3701      	adds	r7, #1
 800da54:	60a2      	str	r2, [r4, #8]
 800da56:	b142      	cbz	r2, 800da6a <_scanf_chars+0x8e>
 800da58:	2b00      	cmp	r3, #0
 800da5a:	dcd7      	bgt.n	800da0c <_scanf_chars+0x30>
 800da5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800da60:	4629      	mov	r1, r5
 800da62:	4640      	mov	r0, r8
 800da64:	4798      	blx	r3
 800da66:	2800      	cmp	r0, #0
 800da68:	d0d0      	beq.n	800da0c <_scanf_chars+0x30>
 800da6a:	6823      	ldr	r3, [r4, #0]
 800da6c:	f013 0310 	ands.w	r3, r3, #16
 800da70:	d105      	bne.n	800da7e <_scanf_chars+0xa2>
 800da72:	68e2      	ldr	r2, [r4, #12]
 800da74:	3201      	adds	r2, #1
 800da76:	60e2      	str	r2, [r4, #12]
 800da78:	69a2      	ldr	r2, [r4, #24]
 800da7a:	b102      	cbz	r2, 800da7e <_scanf_chars+0xa2>
 800da7c:	7033      	strb	r3, [r6, #0]
 800da7e:	6923      	ldr	r3, [r4, #16]
 800da80:	443b      	add	r3, r7
 800da82:	6123      	str	r3, [r4, #16]
 800da84:	2000      	movs	r0, #0
 800da86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da8a:	bf00      	nop
 800da8c:	0800ebd1 	.word	0x0800ebd1

0800da90 <_scanf_i>:
 800da90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da94:	4698      	mov	r8, r3
 800da96:	4b76      	ldr	r3, [pc, #472]	; (800dc70 <_scanf_i+0x1e0>)
 800da98:	460c      	mov	r4, r1
 800da9a:	4682      	mov	sl, r0
 800da9c:	4616      	mov	r6, r2
 800da9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800daa2:	b087      	sub	sp, #28
 800daa4:	ab03      	add	r3, sp, #12
 800daa6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800daaa:	4b72      	ldr	r3, [pc, #456]	; (800dc74 <_scanf_i+0x1e4>)
 800daac:	69a1      	ldr	r1, [r4, #24]
 800daae:	4a72      	ldr	r2, [pc, #456]	; (800dc78 <_scanf_i+0x1e8>)
 800dab0:	2903      	cmp	r1, #3
 800dab2:	bf18      	it	ne
 800dab4:	461a      	movne	r2, r3
 800dab6:	68a3      	ldr	r3, [r4, #8]
 800dab8:	9201      	str	r2, [sp, #4]
 800daba:	1e5a      	subs	r2, r3, #1
 800dabc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dac0:	bf88      	it	hi
 800dac2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dac6:	4627      	mov	r7, r4
 800dac8:	bf82      	ittt	hi
 800daca:	eb03 0905 	addhi.w	r9, r3, r5
 800dace:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dad2:	60a3      	strhi	r3, [r4, #8]
 800dad4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dad8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dadc:	bf98      	it	ls
 800dade:	f04f 0900 	movls.w	r9, #0
 800dae2:	6023      	str	r3, [r4, #0]
 800dae4:	463d      	mov	r5, r7
 800dae6:	f04f 0b00 	mov.w	fp, #0
 800daea:	6831      	ldr	r1, [r6, #0]
 800daec:	ab03      	add	r3, sp, #12
 800daee:	7809      	ldrb	r1, [r1, #0]
 800daf0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800daf4:	2202      	movs	r2, #2
 800daf6:	f7f2 fb93 	bl	8000220 <memchr>
 800dafa:	b328      	cbz	r0, 800db48 <_scanf_i+0xb8>
 800dafc:	f1bb 0f01 	cmp.w	fp, #1
 800db00:	d159      	bne.n	800dbb6 <_scanf_i+0x126>
 800db02:	6862      	ldr	r2, [r4, #4]
 800db04:	b92a      	cbnz	r2, 800db12 <_scanf_i+0x82>
 800db06:	6822      	ldr	r2, [r4, #0]
 800db08:	2308      	movs	r3, #8
 800db0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800db0e:	6063      	str	r3, [r4, #4]
 800db10:	6022      	str	r2, [r4, #0]
 800db12:	6822      	ldr	r2, [r4, #0]
 800db14:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800db18:	6022      	str	r2, [r4, #0]
 800db1a:	68a2      	ldr	r2, [r4, #8]
 800db1c:	1e51      	subs	r1, r2, #1
 800db1e:	60a1      	str	r1, [r4, #8]
 800db20:	b192      	cbz	r2, 800db48 <_scanf_i+0xb8>
 800db22:	6832      	ldr	r2, [r6, #0]
 800db24:	1c51      	adds	r1, r2, #1
 800db26:	6031      	str	r1, [r6, #0]
 800db28:	7812      	ldrb	r2, [r2, #0]
 800db2a:	f805 2b01 	strb.w	r2, [r5], #1
 800db2e:	6872      	ldr	r2, [r6, #4]
 800db30:	3a01      	subs	r2, #1
 800db32:	2a00      	cmp	r2, #0
 800db34:	6072      	str	r2, [r6, #4]
 800db36:	dc07      	bgt.n	800db48 <_scanf_i+0xb8>
 800db38:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800db3c:	4631      	mov	r1, r6
 800db3e:	4650      	mov	r0, sl
 800db40:	4790      	blx	r2
 800db42:	2800      	cmp	r0, #0
 800db44:	f040 8085 	bne.w	800dc52 <_scanf_i+0x1c2>
 800db48:	f10b 0b01 	add.w	fp, fp, #1
 800db4c:	f1bb 0f03 	cmp.w	fp, #3
 800db50:	d1cb      	bne.n	800daea <_scanf_i+0x5a>
 800db52:	6863      	ldr	r3, [r4, #4]
 800db54:	b90b      	cbnz	r3, 800db5a <_scanf_i+0xca>
 800db56:	230a      	movs	r3, #10
 800db58:	6063      	str	r3, [r4, #4]
 800db5a:	6863      	ldr	r3, [r4, #4]
 800db5c:	4947      	ldr	r1, [pc, #284]	; (800dc7c <_scanf_i+0x1ec>)
 800db5e:	6960      	ldr	r0, [r4, #20]
 800db60:	1ac9      	subs	r1, r1, r3
 800db62:	f000 f8b9 	bl	800dcd8 <__sccl>
 800db66:	f04f 0b00 	mov.w	fp, #0
 800db6a:	68a3      	ldr	r3, [r4, #8]
 800db6c:	6822      	ldr	r2, [r4, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d03d      	beq.n	800dbee <_scanf_i+0x15e>
 800db72:	6831      	ldr	r1, [r6, #0]
 800db74:	6960      	ldr	r0, [r4, #20]
 800db76:	f891 c000 	ldrb.w	ip, [r1]
 800db7a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800db7e:	2800      	cmp	r0, #0
 800db80:	d035      	beq.n	800dbee <_scanf_i+0x15e>
 800db82:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800db86:	d124      	bne.n	800dbd2 <_scanf_i+0x142>
 800db88:	0510      	lsls	r0, r2, #20
 800db8a:	d522      	bpl.n	800dbd2 <_scanf_i+0x142>
 800db8c:	f10b 0b01 	add.w	fp, fp, #1
 800db90:	f1b9 0f00 	cmp.w	r9, #0
 800db94:	d003      	beq.n	800db9e <_scanf_i+0x10e>
 800db96:	3301      	adds	r3, #1
 800db98:	f109 39ff 	add.w	r9, r9, #4294967295
 800db9c:	60a3      	str	r3, [r4, #8]
 800db9e:	6873      	ldr	r3, [r6, #4]
 800dba0:	3b01      	subs	r3, #1
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	6073      	str	r3, [r6, #4]
 800dba6:	dd1b      	ble.n	800dbe0 <_scanf_i+0x150>
 800dba8:	6833      	ldr	r3, [r6, #0]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	6033      	str	r3, [r6, #0]
 800dbae:	68a3      	ldr	r3, [r4, #8]
 800dbb0:	3b01      	subs	r3, #1
 800dbb2:	60a3      	str	r3, [r4, #8]
 800dbb4:	e7d9      	b.n	800db6a <_scanf_i+0xda>
 800dbb6:	f1bb 0f02 	cmp.w	fp, #2
 800dbba:	d1ae      	bne.n	800db1a <_scanf_i+0x8a>
 800dbbc:	6822      	ldr	r2, [r4, #0]
 800dbbe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800dbc2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dbc6:	d1bf      	bne.n	800db48 <_scanf_i+0xb8>
 800dbc8:	2310      	movs	r3, #16
 800dbca:	6063      	str	r3, [r4, #4]
 800dbcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbd0:	e7a2      	b.n	800db18 <_scanf_i+0x88>
 800dbd2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800dbd6:	6022      	str	r2, [r4, #0]
 800dbd8:	780b      	ldrb	r3, [r1, #0]
 800dbda:	f805 3b01 	strb.w	r3, [r5], #1
 800dbde:	e7de      	b.n	800db9e <_scanf_i+0x10e>
 800dbe0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dbe4:	4631      	mov	r1, r6
 800dbe6:	4650      	mov	r0, sl
 800dbe8:	4798      	blx	r3
 800dbea:	2800      	cmp	r0, #0
 800dbec:	d0df      	beq.n	800dbae <_scanf_i+0x11e>
 800dbee:	6823      	ldr	r3, [r4, #0]
 800dbf0:	05db      	lsls	r3, r3, #23
 800dbf2:	d50d      	bpl.n	800dc10 <_scanf_i+0x180>
 800dbf4:	42bd      	cmp	r5, r7
 800dbf6:	d909      	bls.n	800dc0c <_scanf_i+0x17c>
 800dbf8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dbfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800dc00:	4632      	mov	r2, r6
 800dc02:	4650      	mov	r0, sl
 800dc04:	4798      	blx	r3
 800dc06:	f105 39ff 	add.w	r9, r5, #4294967295
 800dc0a:	464d      	mov	r5, r9
 800dc0c:	42bd      	cmp	r5, r7
 800dc0e:	d02d      	beq.n	800dc6c <_scanf_i+0x1dc>
 800dc10:	6822      	ldr	r2, [r4, #0]
 800dc12:	f012 0210 	ands.w	r2, r2, #16
 800dc16:	d113      	bne.n	800dc40 <_scanf_i+0x1b0>
 800dc18:	702a      	strb	r2, [r5, #0]
 800dc1a:	6863      	ldr	r3, [r4, #4]
 800dc1c:	9e01      	ldr	r6, [sp, #4]
 800dc1e:	4639      	mov	r1, r7
 800dc20:	4650      	mov	r0, sl
 800dc22:	47b0      	blx	r6
 800dc24:	6821      	ldr	r1, [r4, #0]
 800dc26:	f8d8 3000 	ldr.w	r3, [r8]
 800dc2a:	f011 0f20 	tst.w	r1, #32
 800dc2e:	d013      	beq.n	800dc58 <_scanf_i+0x1c8>
 800dc30:	1d1a      	adds	r2, r3, #4
 800dc32:	f8c8 2000 	str.w	r2, [r8]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	6018      	str	r0, [r3, #0]
 800dc3a:	68e3      	ldr	r3, [r4, #12]
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	60e3      	str	r3, [r4, #12]
 800dc40:	1bed      	subs	r5, r5, r7
 800dc42:	44ab      	add	fp, r5
 800dc44:	6925      	ldr	r5, [r4, #16]
 800dc46:	445d      	add	r5, fp
 800dc48:	6125      	str	r5, [r4, #16]
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	b007      	add	sp, #28
 800dc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc52:	f04f 0b00 	mov.w	fp, #0
 800dc56:	e7ca      	b.n	800dbee <_scanf_i+0x15e>
 800dc58:	1d1a      	adds	r2, r3, #4
 800dc5a:	f8c8 2000 	str.w	r2, [r8]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f011 0f01 	tst.w	r1, #1
 800dc64:	bf14      	ite	ne
 800dc66:	8018      	strhne	r0, [r3, #0]
 800dc68:	6018      	streq	r0, [r3, #0]
 800dc6a:	e7e6      	b.n	800dc3a <_scanf_i+0x1aa>
 800dc6c:	2001      	movs	r0, #1
 800dc6e:	e7ed      	b.n	800dc4c <_scanf_i+0x1bc>
 800dc70:	0800ea98 	.word	0x0800ea98
 800dc74:	0800de55 	.word	0x0800de55
 800dc78:	0800b375 	.word	0x0800b375
 800dc7c:	0800ef5e 	.word	0x0800ef5e

0800dc80 <_read_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	4d07      	ldr	r5, [pc, #28]	; (800dca0 <_read_r+0x20>)
 800dc84:	4604      	mov	r4, r0
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	602a      	str	r2, [r5, #0]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	f7f4 fbea 	bl	8002468 <_read>
 800dc94:	1c43      	adds	r3, r0, #1
 800dc96:	d102      	bne.n	800dc9e <_read_r+0x1e>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b103      	cbz	r3, 800dc9e <_read_r+0x1e>
 800dc9c:	6023      	str	r3, [r4, #0]
 800dc9e:	bd38      	pop	{r3, r4, r5, pc}
 800dca0:	20001344 	.word	0x20001344
 800dca4:	00000000 	.word	0x00000000

0800dca8 <nan>:
 800dca8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dcb0 <nan+0x8>
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop
 800dcb0:	00000000 	.word	0x00000000
 800dcb4:	7ff80000 	.word	0x7ff80000

0800dcb8 <_sbrk_r>:
 800dcb8:	b538      	push	{r3, r4, r5, lr}
 800dcba:	4d06      	ldr	r5, [pc, #24]	; (800dcd4 <_sbrk_r+0x1c>)
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4604      	mov	r4, r0
 800dcc0:	4608      	mov	r0, r1
 800dcc2:	602b      	str	r3, [r5, #0]
 800dcc4:	f7f4 fc3e 	bl	8002544 <_sbrk>
 800dcc8:	1c43      	adds	r3, r0, #1
 800dcca:	d102      	bne.n	800dcd2 <_sbrk_r+0x1a>
 800dccc:	682b      	ldr	r3, [r5, #0]
 800dcce:	b103      	cbz	r3, 800dcd2 <_sbrk_r+0x1a>
 800dcd0:	6023      	str	r3, [r4, #0]
 800dcd2:	bd38      	pop	{r3, r4, r5, pc}
 800dcd4:	20001344 	.word	0x20001344

0800dcd8 <__sccl>:
 800dcd8:	b570      	push	{r4, r5, r6, lr}
 800dcda:	780b      	ldrb	r3, [r1, #0]
 800dcdc:	4604      	mov	r4, r0
 800dcde:	2b5e      	cmp	r3, #94	; 0x5e
 800dce0:	bf0b      	itete	eq
 800dce2:	784b      	ldrbeq	r3, [r1, #1]
 800dce4:	1c48      	addne	r0, r1, #1
 800dce6:	1c88      	addeq	r0, r1, #2
 800dce8:	2200      	movne	r2, #0
 800dcea:	bf08      	it	eq
 800dcec:	2201      	moveq	r2, #1
 800dcee:	1e61      	subs	r1, r4, #1
 800dcf0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dcf4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dcf8:	42a9      	cmp	r1, r5
 800dcfa:	d1fb      	bne.n	800dcf4 <__sccl+0x1c>
 800dcfc:	b90b      	cbnz	r3, 800dd02 <__sccl+0x2a>
 800dcfe:	3801      	subs	r0, #1
 800dd00:	bd70      	pop	{r4, r5, r6, pc}
 800dd02:	f082 0201 	eor.w	r2, r2, #1
 800dd06:	54e2      	strb	r2, [r4, r3]
 800dd08:	4605      	mov	r5, r0
 800dd0a:	4628      	mov	r0, r5
 800dd0c:	f810 1b01 	ldrb.w	r1, [r0], #1
 800dd10:	292d      	cmp	r1, #45	; 0x2d
 800dd12:	d006      	beq.n	800dd22 <__sccl+0x4a>
 800dd14:	295d      	cmp	r1, #93	; 0x5d
 800dd16:	d0f3      	beq.n	800dd00 <__sccl+0x28>
 800dd18:	b909      	cbnz	r1, 800dd1e <__sccl+0x46>
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	e7f0      	b.n	800dd00 <__sccl+0x28>
 800dd1e:	460b      	mov	r3, r1
 800dd20:	e7f1      	b.n	800dd06 <__sccl+0x2e>
 800dd22:	786e      	ldrb	r6, [r5, #1]
 800dd24:	2e5d      	cmp	r6, #93	; 0x5d
 800dd26:	d0fa      	beq.n	800dd1e <__sccl+0x46>
 800dd28:	42b3      	cmp	r3, r6
 800dd2a:	dcf8      	bgt.n	800dd1e <__sccl+0x46>
 800dd2c:	3502      	adds	r5, #2
 800dd2e:	4619      	mov	r1, r3
 800dd30:	3101      	adds	r1, #1
 800dd32:	428e      	cmp	r6, r1
 800dd34:	5462      	strb	r2, [r4, r1]
 800dd36:	dcfb      	bgt.n	800dd30 <__sccl+0x58>
 800dd38:	1af1      	subs	r1, r6, r3
 800dd3a:	3901      	subs	r1, #1
 800dd3c:	1c58      	adds	r0, r3, #1
 800dd3e:	42b3      	cmp	r3, r6
 800dd40:	bfa8      	it	ge
 800dd42:	2100      	movge	r1, #0
 800dd44:	1843      	adds	r3, r0, r1
 800dd46:	e7e0      	b.n	800dd0a <__sccl+0x32>

0800dd48 <strncmp>:
 800dd48:	b510      	push	{r4, lr}
 800dd4a:	b17a      	cbz	r2, 800dd6c <strncmp+0x24>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	3901      	subs	r1, #1
 800dd50:	1884      	adds	r4, r0, r2
 800dd52:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd56:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800dd5a:	4290      	cmp	r0, r2
 800dd5c:	d101      	bne.n	800dd62 <strncmp+0x1a>
 800dd5e:	42a3      	cmp	r3, r4
 800dd60:	d101      	bne.n	800dd66 <strncmp+0x1e>
 800dd62:	1a80      	subs	r0, r0, r2
 800dd64:	bd10      	pop	{r4, pc}
 800dd66:	2800      	cmp	r0, #0
 800dd68:	d1f3      	bne.n	800dd52 <strncmp+0xa>
 800dd6a:	e7fa      	b.n	800dd62 <strncmp+0x1a>
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	e7f9      	b.n	800dd64 <strncmp+0x1c>

0800dd70 <_strtoul_l.constprop.0>:
 800dd70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dd74:	4f36      	ldr	r7, [pc, #216]	; (800de50 <_strtoul_l.constprop.0+0xe0>)
 800dd76:	4686      	mov	lr, r0
 800dd78:	460d      	mov	r5, r1
 800dd7a:	4628      	mov	r0, r5
 800dd7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dd80:	5de6      	ldrb	r6, [r4, r7]
 800dd82:	f016 0608 	ands.w	r6, r6, #8
 800dd86:	d1f8      	bne.n	800dd7a <_strtoul_l.constprop.0+0xa>
 800dd88:	2c2d      	cmp	r4, #45	; 0x2d
 800dd8a:	d12f      	bne.n	800ddec <_strtoul_l.constprop.0+0x7c>
 800dd8c:	782c      	ldrb	r4, [r5, #0]
 800dd8e:	2601      	movs	r6, #1
 800dd90:	1c85      	adds	r5, r0, #2
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d057      	beq.n	800de46 <_strtoul_l.constprop.0+0xd6>
 800dd96:	2b10      	cmp	r3, #16
 800dd98:	d109      	bne.n	800ddae <_strtoul_l.constprop.0+0x3e>
 800dd9a:	2c30      	cmp	r4, #48	; 0x30
 800dd9c:	d107      	bne.n	800ddae <_strtoul_l.constprop.0+0x3e>
 800dd9e:	7828      	ldrb	r0, [r5, #0]
 800dda0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800dda4:	2858      	cmp	r0, #88	; 0x58
 800dda6:	d149      	bne.n	800de3c <_strtoul_l.constprop.0+0xcc>
 800dda8:	786c      	ldrb	r4, [r5, #1]
 800ddaa:	2310      	movs	r3, #16
 800ddac:	3502      	adds	r5, #2
 800ddae:	f04f 38ff 	mov.w	r8, #4294967295
 800ddb2:	2700      	movs	r7, #0
 800ddb4:	fbb8 f8f3 	udiv	r8, r8, r3
 800ddb8:	fb03 f908 	mul.w	r9, r3, r8
 800ddbc:	ea6f 0909 	mvn.w	r9, r9
 800ddc0:	4638      	mov	r0, r7
 800ddc2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ddc6:	f1bc 0f09 	cmp.w	ip, #9
 800ddca:	d814      	bhi.n	800ddf6 <_strtoul_l.constprop.0+0x86>
 800ddcc:	4664      	mov	r4, ip
 800ddce:	42a3      	cmp	r3, r4
 800ddd0:	dd22      	ble.n	800de18 <_strtoul_l.constprop.0+0xa8>
 800ddd2:	2f00      	cmp	r7, #0
 800ddd4:	db1d      	blt.n	800de12 <_strtoul_l.constprop.0+0xa2>
 800ddd6:	4580      	cmp	r8, r0
 800ddd8:	d31b      	bcc.n	800de12 <_strtoul_l.constprop.0+0xa2>
 800ddda:	d101      	bne.n	800dde0 <_strtoul_l.constprop.0+0x70>
 800dddc:	45a1      	cmp	r9, r4
 800ddde:	db18      	blt.n	800de12 <_strtoul_l.constprop.0+0xa2>
 800dde0:	fb00 4003 	mla	r0, r0, r3, r4
 800dde4:	2701      	movs	r7, #1
 800dde6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ddea:	e7ea      	b.n	800ddc2 <_strtoul_l.constprop.0+0x52>
 800ddec:	2c2b      	cmp	r4, #43	; 0x2b
 800ddee:	bf04      	itt	eq
 800ddf0:	782c      	ldrbeq	r4, [r5, #0]
 800ddf2:	1c85      	addeq	r5, r0, #2
 800ddf4:	e7cd      	b.n	800dd92 <_strtoul_l.constprop.0+0x22>
 800ddf6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ddfa:	f1bc 0f19 	cmp.w	ip, #25
 800ddfe:	d801      	bhi.n	800de04 <_strtoul_l.constprop.0+0x94>
 800de00:	3c37      	subs	r4, #55	; 0x37
 800de02:	e7e4      	b.n	800ddce <_strtoul_l.constprop.0+0x5e>
 800de04:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800de08:	f1bc 0f19 	cmp.w	ip, #25
 800de0c:	d804      	bhi.n	800de18 <_strtoul_l.constprop.0+0xa8>
 800de0e:	3c57      	subs	r4, #87	; 0x57
 800de10:	e7dd      	b.n	800ddce <_strtoul_l.constprop.0+0x5e>
 800de12:	f04f 37ff 	mov.w	r7, #4294967295
 800de16:	e7e6      	b.n	800dde6 <_strtoul_l.constprop.0+0x76>
 800de18:	2f00      	cmp	r7, #0
 800de1a:	da07      	bge.n	800de2c <_strtoul_l.constprop.0+0xbc>
 800de1c:	2322      	movs	r3, #34	; 0x22
 800de1e:	f8ce 3000 	str.w	r3, [lr]
 800de22:	f04f 30ff 	mov.w	r0, #4294967295
 800de26:	b932      	cbnz	r2, 800de36 <_strtoul_l.constprop.0+0xc6>
 800de28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de2c:	b106      	cbz	r6, 800de30 <_strtoul_l.constprop.0+0xc0>
 800de2e:	4240      	negs	r0, r0
 800de30:	2a00      	cmp	r2, #0
 800de32:	d0f9      	beq.n	800de28 <_strtoul_l.constprop.0+0xb8>
 800de34:	b107      	cbz	r7, 800de38 <_strtoul_l.constprop.0+0xc8>
 800de36:	1e69      	subs	r1, r5, #1
 800de38:	6011      	str	r1, [r2, #0]
 800de3a:	e7f5      	b.n	800de28 <_strtoul_l.constprop.0+0xb8>
 800de3c:	2430      	movs	r4, #48	; 0x30
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d1b5      	bne.n	800ddae <_strtoul_l.constprop.0+0x3e>
 800de42:	2308      	movs	r3, #8
 800de44:	e7b3      	b.n	800ddae <_strtoul_l.constprop.0+0x3e>
 800de46:	2c30      	cmp	r4, #48	; 0x30
 800de48:	d0a9      	beq.n	800dd9e <_strtoul_l.constprop.0+0x2e>
 800de4a:	230a      	movs	r3, #10
 800de4c:	e7af      	b.n	800ddae <_strtoul_l.constprop.0+0x3e>
 800de4e:	bf00      	nop
 800de50:	0800ebd1 	.word	0x0800ebd1

0800de54 <_strtoul_r>:
 800de54:	f7ff bf8c 	b.w	800dd70 <_strtoul_l.constprop.0>

0800de58 <__submore>:
 800de58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de5c:	460c      	mov	r4, r1
 800de5e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800de60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de64:	4299      	cmp	r1, r3
 800de66:	d11d      	bne.n	800dea4 <__submore+0x4c>
 800de68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800de6c:	f7ff fa14 	bl	800d298 <_malloc_r>
 800de70:	b918      	cbnz	r0, 800de7a <__submore+0x22>
 800de72:	f04f 30ff 	mov.w	r0, #4294967295
 800de76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de7e:	63a3      	str	r3, [r4, #56]	; 0x38
 800de80:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800de84:	6360      	str	r0, [r4, #52]	; 0x34
 800de86:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800de8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800de8e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800de92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800de96:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800de9a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800de9e:	6020      	str	r0, [r4, #0]
 800dea0:	2000      	movs	r0, #0
 800dea2:	e7e8      	b.n	800de76 <__submore+0x1e>
 800dea4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800dea6:	0077      	lsls	r7, r6, #1
 800dea8:	463a      	mov	r2, r7
 800deaa:	f000 fa2d 	bl	800e308 <_realloc_r>
 800deae:	4605      	mov	r5, r0
 800deb0:	2800      	cmp	r0, #0
 800deb2:	d0de      	beq.n	800de72 <__submore+0x1a>
 800deb4:	eb00 0806 	add.w	r8, r0, r6
 800deb8:	4601      	mov	r1, r0
 800deba:	4632      	mov	r2, r6
 800debc:	4640      	mov	r0, r8
 800debe:	f7fe fc99 	bl	800c7f4 <memcpy>
 800dec2:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800dec6:	f8c4 8000 	str.w	r8, [r4]
 800deca:	e7e9      	b.n	800dea0 <__submore+0x48>

0800decc <__ascii_wctomb>:
 800decc:	b149      	cbz	r1, 800dee2 <__ascii_wctomb+0x16>
 800dece:	2aff      	cmp	r2, #255	; 0xff
 800ded0:	bf85      	ittet	hi
 800ded2:	238a      	movhi	r3, #138	; 0x8a
 800ded4:	6003      	strhi	r3, [r0, #0]
 800ded6:	700a      	strbls	r2, [r1, #0]
 800ded8:	f04f 30ff 	movhi.w	r0, #4294967295
 800dedc:	bf98      	it	ls
 800dede:	2001      	movls	r0, #1
 800dee0:	4770      	bx	lr
 800dee2:	4608      	mov	r0, r1
 800dee4:	4770      	bx	lr
	...

0800dee8 <__assert_func>:
 800dee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800deea:	4614      	mov	r4, r2
 800deec:	461a      	mov	r2, r3
 800deee:	4b09      	ldr	r3, [pc, #36]	; (800df14 <__assert_func+0x2c>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	4605      	mov	r5, r0
 800def4:	68d8      	ldr	r0, [r3, #12]
 800def6:	b14c      	cbz	r4, 800df0c <__assert_func+0x24>
 800def8:	4b07      	ldr	r3, [pc, #28]	; (800df18 <__assert_func+0x30>)
 800defa:	9100      	str	r1, [sp, #0]
 800defc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800df00:	4906      	ldr	r1, [pc, #24]	; (800df1c <__assert_func+0x34>)
 800df02:	462b      	mov	r3, r5
 800df04:	f000 f9a6 	bl	800e254 <fiprintf>
 800df08:	f000 fc46 	bl	800e798 <abort>
 800df0c:	4b04      	ldr	r3, [pc, #16]	; (800df20 <__assert_func+0x38>)
 800df0e:	461c      	mov	r4, r3
 800df10:	e7f3      	b.n	800defa <__assert_func+0x12>
 800df12:	bf00      	nop
 800df14:	20000024 	.word	0x20000024
 800df18:	0800ef60 	.word	0x0800ef60
 800df1c:	0800ef6d 	.word	0x0800ef6d
 800df20:	0800ef9b 	.word	0x0800ef9b

0800df24 <__sflush_r>:
 800df24:	898a      	ldrh	r2, [r1, #12]
 800df26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df2a:	4605      	mov	r5, r0
 800df2c:	0710      	lsls	r0, r2, #28
 800df2e:	460c      	mov	r4, r1
 800df30:	d458      	bmi.n	800dfe4 <__sflush_r+0xc0>
 800df32:	684b      	ldr	r3, [r1, #4]
 800df34:	2b00      	cmp	r3, #0
 800df36:	dc05      	bgt.n	800df44 <__sflush_r+0x20>
 800df38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	dc02      	bgt.n	800df44 <__sflush_r+0x20>
 800df3e:	2000      	movs	r0, #0
 800df40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df46:	2e00      	cmp	r6, #0
 800df48:	d0f9      	beq.n	800df3e <__sflush_r+0x1a>
 800df4a:	2300      	movs	r3, #0
 800df4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800df50:	682f      	ldr	r7, [r5, #0]
 800df52:	602b      	str	r3, [r5, #0]
 800df54:	d032      	beq.n	800dfbc <__sflush_r+0x98>
 800df56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	075a      	lsls	r2, r3, #29
 800df5c:	d505      	bpl.n	800df6a <__sflush_r+0x46>
 800df5e:	6863      	ldr	r3, [r4, #4]
 800df60:	1ac0      	subs	r0, r0, r3
 800df62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800df64:	b10b      	cbz	r3, 800df6a <__sflush_r+0x46>
 800df66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800df68:	1ac0      	subs	r0, r0, r3
 800df6a:	2300      	movs	r3, #0
 800df6c:	4602      	mov	r2, r0
 800df6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800df70:	6a21      	ldr	r1, [r4, #32]
 800df72:	4628      	mov	r0, r5
 800df74:	47b0      	blx	r6
 800df76:	1c43      	adds	r3, r0, #1
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	d106      	bne.n	800df8a <__sflush_r+0x66>
 800df7c:	6829      	ldr	r1, [r5, #0]
 800df7e:	291d      	cmp	r1, #29
 800df80:	d82c      	bhi.n	800dfdc <__sflush_r+0xb8>
 800df82:	4a2a      	ldr	r2, [pc, #168]	; (800e02c <__sflush_r+0x108>)
 800df84:	40ca      	lsrs	r2, r1
 800df86:	07d6      	lsls	r6, r2, #31
 800df88:	d528      	bpl.n	800dfdc <__sflush_r+0xb8>
 800df8a:	2200      	movs	r2, #0
 800df8c:	6062      	str	r2, [r4, #4]
 800df8e:	04d9      	lsls	r1, r3, #19
 800df90:	6922      	ldr	r2, [r4, #16]
 800df92:	6022      	str	r2, [r4, #0]
 800df94:	d504      	bpl.n	800dfa0 <__sflush_r+0x7c>
 800df96:	1c42      	adds	r2, r0, #1
 800df98:	d101      	bne.n	800df9e <__sflush_r+0x7a>
 800df9a:	682b      	ldr	r3, [r5, #0]
 800df9c:	b903      	cbnz	r3, 800dfa0 <__sflush_r+0x7c>
 800df9e:	6560      	str	r0, [r4, #84]	; 0x54
 800dfa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfa2:	602f      	str	r7, [r5, #0]
 800dfa4:	2900      	cmp	r1, #0
 800dfa6:	d0ca      	beq.n	800df3e <__sflush_r+0x1a>
 800dfa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfac:	4299      	cmp	r1, r3
 800dfae:	d002      	beq.n	800dfb6 <__sflush_r+0x92>
 800dfb0:	4628      	mov	r0, r5
 800dfb2:	f7ff f905 	bl	800d1c0 <_free_r>
 800dfb6:	2000      	movs	r0, #0
 800dfb8:	6360      	str	r0, [r4, #52]	; 0x34
 800dfba:	e7c1      	b.n	800df40 <__sflush_r+0x1c>
 800dfbc:	6a21      	ldr	r1, [r4, #32]
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	47b0      	blx	r6
 800dfc4:	1c41      	adds	r1, r0, #1
 800dfc6:	d1c7      	bne.n	800df58 <__sflush_r+0x34>
 800dfc8:	682b      	ldr	r3, [r5, #0]
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d0c4      	beq.n	800df58 <__sflush_r+0x34>
 800dfce:	2b1d      	cmp	r3, #29
 800dfd0:	d001      	beq.n	800dfd6 <__sflush_r+0xb2>
 800dfd2:	2b16      	cmp	r3, #22
 800dfd4:	d101      	bne.n	800dfda <__sflush_r+0xb6>
 800dfd6:	602f      	str	r7, [r5, #0]
 800dfd8:	e7b1      	b.n	800df3e <__sflush_r+0x1a>
 800dfda:	89a3      	ldrh	r3, [r4, #12]
 800dfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dfe0:	81a3      	strh	r3, [r4, #12]
 800dfe2:	e7ad      	b.n	800df40 <__sflush_r+0x1c>
 800dfe4:	690f      	ldr	r7, [r1, #16]
 800dfe6:	2f00      	cmp	r7, #0
 800dfe8:	d0a9      	beq.n	800df3e <__sflush_r+0x1a>
 800dfea:	0793      	lsls	r3, r2, #30
 800dfec:	680e      	ldr	r6, [r1, #0]
 800dfee:	bf08      	it	eq
 800dff0:	694b      	ldreq	r3, [r1, #20]
 800dff2:	600f      	str	r7, [r1, #0]
 800dff4:	bf18      	it	ne
 800dff6:	2300      	movne	r3, #0
 800dff8:	eba6 0807 	sub.w	r8, r6, r7
 800dffc:	608b      	str	r3, [r1, #8]
 800dffe:	f1b8 0f00 	cmp.w	r8, #0
 800e002:	dd9c      	ble.n	800df3e <__sflush_r+0x1a>
 800e004:	6a21      	ldr	r1, [r4, #32]
 800e006:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e008:	4643      	mov	r3, r8
 800e00a:	463a      	mov	r2, r7
 800e00c:	4628      	mov	r0, r5
 800e00e:	47b0      	blx	r6
 800e010:	2800      	cmp	r0, #0
 800e012:	dc06      	bgt.n	800e022 <__sflush_r+0xfe>
 800e014:	89a3      	ldrh	r3, [r4, #12]
 800e016:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e01a:	81a3      	strh	r3, [r4, #12]
 800e01c:	f04f 30ff 	mov.w	r0, #4294967295
 800e020:	e78e      	b.n	800df40 <__sflush_r+0x1c>
 800e022:	4407      	add	r7, r0
 800e024:	eba8 0800 	sub.w	r8, r8, r0
 800e028:	e7e9      	b.n	800dffe <__sflush_r+0xda>
 800e02a:	bf00      	nop
 800e02c:	20400001 	.word	0x20400001

0800e030 <_fflush_r>:
 800e030:	b538      	push	{r3, r4, r5, lr}
 800e032:	690b      	ldr	r3, [r1, #16]
 800e034:	4605      	mov	r5, r0
 800e036:	460c      	mov	r4, r1
 800e038:	b913      	cbnz	r3, 800e040 <_fflush_r+0x10>
 800e03a:	2500      	movs	r5, #0
 800e03c:	4628      	mov	r0, r5
 800e03e:	bd38      	pop	{r3, r4, r5, pc}
 800e040:	b118      	cbz	r0, 800e04a <_fflush_r+0x1a>
 800e042:	6983      	ldr	r3, [r0, #24]
 800e044:	b90b      	cbnz	r3, 800e04a <_fflush_r+0x1a>
 800e046:	f000 f887 	bl	800e158 <__sinit>
 800e04a:	4b14      	ldr	r3, [pc, #80]	; (800e09c <_fflush_r+0x6c>)
 800e04c:	429c      	cmp	r4, r3
 800e04e:	d11b      	bne.n	800e088 <_fflush_r+0x58>
 800e050:	686c      	ldr	r4, [r5, #4]
 800e052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d0ef      	beq.n	800e03a <_fflush_r+0xa>
 800e05a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e05c:	07d0      	lsls	r0, r2, #31
 800e05e:	d404      	bmi.n	800e06a <_fflush_r+0x3a>
 800e060:	0599      	lsls	r1, r3, #22
 800e062:	d402      	bmi.n	800e06a <_fflush_r+0x3a>
 800e064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e066:	f000 f927 	bl	800e2b8 <__retarget_lock_acquire_recursive>
 800e06a:	4628      	mov	r0, r5
 800e06c:	4621      	mov	r1, r4
 800e06e:	f7ff ff59 	bl	800df24 <__sflush_r>
 800e072:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e074:	07da      	lsls	r2, r3, #31
 800e076:	4605      	mov	r5, r0
 800e078:	d4e0      	bmi.n	800e03c <_fflush_r+0xc>
 800e07a:	89a3      	ldrh	r3, [r4, #12]
 800e07c:	059b      	lsls	r3, r3, #22
 800e07e:	d4dd      	bmi.n	800e03c <_fflush_r+0xc>
 800e080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e082:	f000 f91a 	bl	800e2ba <__retarget_lock_release_recursive>
 800e086:	e7d9      	b.n	800e03c <_fflush_r+0xc>
 800e088:	4b05      	ldr	r3, [pc, #20]	; (800e0a0 <_fflush_r+0x70>)
 800e08a:	429c      	cmp	r4, r3
 800e08c:	d101      	bne.n	800e092 <_fflush_r+0x62>
 800e08e:	68ac      	ldr	r4, [r5, #8]
 800e090:	e7df      	b.n	800e052 <_fflush_r+0x22>
 800e092:	4b04      	ldr	r3, [pc, #16]	; (800e0a4 <_fflush_r+0x74>)
 800e094:	429c      	cmp	r4, r3
 800e096:	bf08      	it	eq
 800e098:	68ec      	ldreq	r4, [r5, #12]
 800e09a:	e7da      	b.n	800e052 <_fflush_r+0x22>
 800e09c:	0800efbc 	.word	0x0800efbc
 800e0a0:	0800efdc 	.word	0x0800efdc
 800e0a4:	0800ef9c 	.word	0x0800ef9c

0800e0a8 <std>:
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	b510      	push	{r4, lr}
 800e0ac:	4604      	mov	r4, r0
 800e0ae:	e9c0 3300 	strd	r3, r3, [r0]
 800e0b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e0b6:	6083      	str	r3, [r0, #8]
 800e0b8:	8181      	strh	r1, [r0, #12]
 800e0ba:	6643      	str	r3, [r0, #100]	; 0x64
 800e0bc:	81c2      	strh	r2, [r0, #14]
 800e0be:	6183      	str	r3, [r0, #24]
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	2208      	movs	r2, #8
 800e0c4:	305c      	adds	r0, #92	; 0x5c
 800e0c6:	f7fb fb73 	bl	80097b0 <memset>
 800e0ca:	4b05      	ldr	r3, [pc, #20]	; (800e0e0 <std+0x38>)
 800e0cc:	6263      	str	r3, [r4, #36]	; 0x24
 800e0ce:	4b05      	ldr	r3, [pc, #20]	; (800e0e4 <std+0x3c>)
 800e0d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e0d2:	4b05      	ldr	r3, [pc, #20]	; (800e0e8 <std+0x40>)
 800e0d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e0d6:	4b05      	ldr	r3, [pc, #20]	; (800e0ec <std+0x44>)
 800e0d8:	6224      	str	r4, [r4, #32]
 800e0da:	6323      	str	r3, [r4, #48]	; 0x30
 800e0dc:	bd10      	pop	{r4, pc}
 800e0de:	bf00      	nop
 800e0e0:	0800a559 	.word	0x0800a559
 800e0e4:	0800a57f 	.word	0x0800a57f
 800e0e8:	0800a5b7 	.word	0x0800a5b7
 800e0ec:	0800a5db 	.word	0x0800a5db

0800e0f0 <_cleanup_r>:
 800e0f0:	4901      	ldr	r1, [pc, #4]	; (800e0f8 <_cleanup_r+0x8>)
 800e0f2:	f000 b8c1 	b.w	800e278 <_fwalk_reent>
 800e0f6:	bf00      	nop
 800e0f8:	0800e031 	.word	0x0800e031

0800e0fc <__sfmoreglue>:
 800e0fc:	b570      	push	{r4, r5, r6, lr}
 800e0fe:	2268      	movs	r2, #104	; 0x68
 800e100:	1e4d      	subs	r5, r1, #1
 800e102:	4355      	muls	r5, r2
 800e104:	460e      	mov	r6, r1
 800e106:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e10a:	f7ff f8c5 	bl	800d298 <_malloc_r>
 800e10e:	4604      	mov	r4, r0
 800e110:	b140      	cbz	r0, 800e124 <__sfmoreglue+0x28>
 800e112:	2100      	movs	r1, #0
 800e114:	e9c0 1600 	strd	r1, r6, [r0]
 800e118:	300c      	adds	r0, #12
 800e11a:	60a0      	str	r0, [r4, #8]
 800e11c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e120:	f7fb fb46 	bl	80097b0 <memset>
 800e124:	4620      	mov	r0, r4
 800e126:	bd70      	pop	{r4, r5, r6, pc}

0800e128 <__sfp_lock_acquire>:
 800e128:	4801      	ldr	r0, [pc, #4]	; (800e130 <__sfp_lock_acquire+0x8>)
 800e12a:	f000 b8c5 	b.w	800e2b8 <__retarget_lock_acquire_recursive>
 800e12e:	bf00      	nop
 800e130:	20001349 	.word	0x20001349

0800e134 <__sfp_lock_release>:
 800e134:	4801      	ldr	r0, [pc, #4]	; (800e13c <__sfp_lock_release+0x8>)
 800e136:	f000 b8c0 	b.w	800e2ba <__retarget_lock_release_recursive>
 800e13a:	bf00      	nop
 800e13c:	20001349 	.word	0x20001349

0800e140 <__sinit_lock_acquire>:
 800e140:	4801      	ldr	r0, [pc, #4]	; (800e148 <__sinit_lock_acquire+0x8>)
 800e142:	f000 b8b9 	b.w	800e2b8 <__retarget_lock_acquire_recursive>
 800e146:	bf00      	nop
 800e148:	2000134a 	.word	0x2000134a

0800e14c <__sinit_lock_release>:
 800e14c:	4801      	ldr	r0, [pc, #4]	; (800e154 <__sinit_lock_release+0x8>)
 800e14e:	f000 b8b4 	b.w	800e2ba <__retarget_lock_release_recursive>
 800e152:	bf00      	nop
 800e154:	2000134a 	.word	0x2000134a

0800e158 <__sinit>:
 800e158:	b510      	push	{r4, lr}
 800e15a:	4604      	mov	r4, r0
 800e15c:	f7ff fff0 	bl	800e140 <__sinit_lock_acquire>
 800e160:	69a3      	ldr	r3, [r4, #24]
 800e162:	b11b      	cbz	r3, 800e16c <__sinit+0x14>
 800e164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e168:	f7ff bff0 	b.w	800e14c <__sinit_lock_release>
 800e16c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e170:	6523      	str	r3, [r4, #80]	; 0x50
 800e172:	4b13      	ldr	r3, [pc, #76]	; (800e1c0 <__sinit+0x68>)
 800e174:	4a13      	ldr	r2, [pc, #76]	; (800e1c4 <__sinit+0x6c>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	62a2      	str	r2, [r4, #40]	; 0x28
 800e17a:	42a3      	cmp	r3, r4
 800e17c:	bf04      	itt	eq
 800e17e:	2301      	moveq	r3, #1
 800e180:	61a3      	streq	r3, [r4, #24]
 800e182:	4620      	mov	r0, r4
 800e184:	f000 f820 	bl	800e1c8 <__sfp>
 800e188:	6060      	str	r0, [r4, #4]
 800e18a:	4620      	mov	r0, r4
 800e18c:	f000 f81c 	bl	800e1c8 <__sfp>
 800e190:	60a0      	str	r0, [r4, #8]
 800e192:	4620      	mov	r0, r4
 800e194:	f000 f818 	bl	800e1c8 <__sfp>
 800e198:	2200      	movs	r2, #0
 800e19a:	60e0      	str	r0, [r4, #12]
 800e19c:	2104      	movs	r1, #4
 800e19e:	6860      	ldr	r0, [r4, #4]
 800e1a0:	f7ff ff82 	bl	800e0a8 <std>
 800e1a4:	68a0      	ldr	r0, [r4, #8]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	2109      	movs	r1, #9
 800e1aa:	f7ff ff7d 	bl	800e0a8 <std>
 800e1ae:	68e0      	ldr	r0, [r4, #12]
 800e1b0:	2202      	movs	r2, #2
 800e1b2:	2112      	movs	r1, #18
 800e1b4:	f7ff ff78 	bl	800e0a8 <std>
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	61a3      	str	r3, [r4, #24]
 800e1bc:	e7d2      	b.n	800e164 <__sinit+0xc>
 800e1be:	bf00      	nop
 800e1c0:	0800eb44 	.word	0x0800eb44
 800e1c4:	0800e0f1 	.word	0x0800e0f1

0800e1c8 <__sfp>:
 800e1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1ca:	4607      	mov	r7, r0
 800e1cc:	f7ff ffac 	bl	800e128 <__sfp_lock_acquire>
 800e1d0:	4b1e      	ldr	r3, [pc, #120]	; (800e24c <__sfp+0x84>)
 800e1d2:	681e      	ldr	r6, [r3, #0]
 800e1d4:	69b3      	ldr	r3, [r6, #24]
 800e1d6:	b913      	cbnz	r3, 800e1de <__sfp+0x16>
 800e1d8:	4630      	mov	r0, r6
 800e1da:	f7ff ffbd 	bl	800e158 <__sinit>
 800e1de:	3648      	adds	r6, #72	; 0x48
 800e1e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	d503      	bpl.n	800e1f0 <__sfp+0x28>
 800e1e8:	6833      	ldr	r3, [r6, #0]
 800e1ea:	b30b      	cbz	r3, 800e230 <__sfp+0x68>
 800e1ec:	6836      	ldr	r6, [r6, #0]
 800e1ee:	e7f7      	b.n	800e1e0 <__sfp+0x18>
 800e1f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e1f4:	b9d5      	cbnz	r5, 800e22c <__sfp+0x64>
 800e1f6:	4b16      	ldr	r3, [pc, #88]	; (800e250 <__sfp+0x88>)
 800e1f8:	60e3      	str	r3, [r4, #12]
 800e1fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e1fe:	6665      	str	r5, [r4, #100]	; 0x64
 800e200:	f000 f859 	bl	800e2b6 <__retarget_lock_init_recursive>
 800e204:	f7ff ff96 	bl	800e134 <__sfp_lock_release>
 800e208:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e20c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e210:	6025      	str	r5, [r4, #0]
 800e212:	61a5      	str	r5, [r4, #24]
 800e214:	2208      	movs	r2, #8
 800e216:	4629      	mov	r1, r5
 800e218:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e21c:	f7fb fac8 	bl	80097b0 <memset>
 800e220:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e224:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e228:	4620      	mov	r0, r4
 800e22a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e22c:	3468      	adds	r4, #104	; 0x68
 800e22e:	e7d9      	b.n	800e1e4 <__sfp+0x1c>
 800e230:	2104      	movs	r1, #4
 800e232:	4638      	mov	r0, r7
 800e234:	f7ff ff62 	bl	800e0fc <__sfmoreglue>
 800e238:	4604      	mov	r4, r0
 800e23a:	6030      	str	r0, [r6, #0]
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d1d5      	bne.n	800e1ec <__sfp+0x24>
 800e240:	f7ff ff78 	bl	800e134 <__sfp_lock_release>
 800e244:	230c      	movs	r3, #12
 800e246:	603b      	str	r3, [r7, #0]
 800e248:	e7ee      	b.n	800e228 <__sfp+0x60>
 800e24a:	bf00      	nop
 800e24c:	0800eb44 	.word	0x0800eb44
 800e250:	ffff0001 	.word	0xffff0001

0800e254 <fiprintf>:
 800e254:	b40e      	push	{r1, r2, r3}
 800e256:	b503      	push	{r0, r1, lr}
 800e258:	4601      	mov	r1, r0
 800e25a:	ab03      	add	r3, sp, #12
 800e25c:	4805      	ldr	r0, [pc, #20]	; (800e274 <fiprintf+0x20>)
 800e25e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e262:	6800      	ldr	r0, [r0, #0]
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	f000 f8a7 	bl	800e3b8 <_vfiprintf_r>
 800e26a:	b002      	add	sp, #8
 800e26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e270:	b003      	add	sp, #12
 800e272:	4770      	bx	lr
 800e274:	20000024 	.word	0x20000024

0800e278 <_fwalk_reent>:
 800e278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e27c:	4606      	mov	r6, r0
 800e27e:	4688      	mov	r8, r1
 800e280:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e284:	2700      	movs	r7, #0
 800e286:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e28a:	f1b9 0901 	subs.w	r9, r9, #1
 800e28e:	d505      	bpl.n	800e29c <_fwalk_reent+0x24>
 800e290:	6824      	ldr	r4, [r4, #0]
 800e292:	2c00      	cmp	r4, #0
 800e294:	d1f7      	bne.n	800e286 <_fwalk_reent+0xe>
 800e296:	4638      	mov	r0, r7
 800e298:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e29c:	89ab      	ldrh	r3, [r5, #12]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d907      	bls.n	800e2b2 <_fwalk_reent+0x3a>
 800e2a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	d003      	beq.n	800e2b2 <_fwalk_reent+0x3a>
 800e2aa:	4629      	mov	r1, r5
 800e2ac:	4630      	mov	r0, r6
 800e2ae:	47c0      	blx	r8
 800e2b0:	4307      	orrs	r7, r0
 800e2b2:	3568      	adds	r5, #104	; 0x68
 800e2b4:	e7e9      	b.n	800e28a <_fwalk_reent+0x12>

0800e2b6 <__retarget_lock_init_recursive>:
 800e2b6:	4770      	bx	lr

0800e2b8 <__retarget_lock_acquire_recursive>:
 800e2b8:	4770      	bx	lr

0800e2ba <__retarget_lock_release_recursive>:
 800e2ba:	4770      	bx	lr

0800e2bc <memmove>:
 800e2bc:	4288      	cmp	r0, r1
 800e2be:	b510      	push	{r4, lr}
 800e2c0:	eb01 0402 	add.w	r4, r1, r2
 800e2c4:	d902      	bls.n	800e2cc <memmove+0x10>
 800e2c6:	4284      	cmp	r4, r0
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	d807      	bhi.n	800e2dc <memmove+0x20>
 800e2cc:	1e43      	subs	r3, r0, #1
 800e2ce:	42a1      	cmp	r1, r4
 800e2d0:	d008      	beq.n	800e2e4 <memmove+0x28>
 800e2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e2d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e2da:	e7f8      	b.n	800e2ce <memmove+0x12>
 800e2dc:	4402      	add	r2, r0
 800e2de:	4601      	mov	r1, r0
 800e2e0:	428a      	cmp	r2, r1
 800e2e2:	d100      	bne.n	800e2e6 <memmove+0x2a>
 800e2e4:	bd10      	pop	{r4, pc}
 800e2e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e2ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e2ee:	e7f7      	b.n	800e2e0 <memmove+0x24>

0800e2f0 <__malloc_lock>:
 800e2f0:	4801      	ldr	r0, [pc, #4]	; (800e2f8 <__malloc_lock+0x8>)
 800e2f2:	f7ff bfe1 	b.w	800e2b8 <__retarget_lock_acquire_recursive>
 800e2f6:	bf00      	nop
 800e2f8:	20001348 	.word	0x20001348

0800e2fc <__malloc_unlock>:
 800e2fc:	4801      	ldr	r0, [pc, #4]	; (800e304 <__malloc_unlock+0x8>)
 800e2fe:	f7ff bfdc 	b.w	800e2ba <__retarget_lock_release_recursive>
 800e302:	bf00      	nop
 800e304:	20001348 	.word	0x20001348

0800e308 <_realloc_r>:
 800e308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e30c:	4680      	mov	r8, r0
 800e30e:	4614      	mov	r4, r2
 800e310:	460e      	mov	r6, r1
 800e312:	b921      	cbnz	r1, 800e31e <_realloc_r+0x16>
 800e314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e318:	4611      	mov	r1, r2
 800e31a:	f7fe bfbd 	b.w	800d298 <_malloc_r>
 800e31e:	b92a      	cbnz	r2, 800e32c <_realloc_r+0x24>
 800e320:	f7fe ff4e 	bl	800d1c0 <_free_r>
 800e324:	4625      	mov	r5, r4
 800e326:	4628      	mov	r0, r5
 800e328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e32c:	f000 faa0 	bl	800e870 <_malloc_usable_size_r>
 800e330:	4284      	cmp	r4, r0
 800e332:	4607      	mov	r7, r0
 800e334:	d802      	bhi.n	800e33c <_realloc_r+0x34>
 800e336:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e33a:	d812      	bhi.n	800e362 <_realloc_r+0x5a>
 800e33c:	4621      	mov	r1, r4
 800e33e:	4640      	mov	r0, r8
 800e340:	f7fe ffaa 	bl	800d298 <_malloc_r>
 800e344:	4605      	mov	r5, r0
 800e346:	2800      	cmp	r0, #0
 800e348:	d0ed      	beq.n	800e326 <_realloc_r+0x1e>
 800e34a:	42bc      	cmp	r4, r7
 800e34c:	4622      	mov	r2, r4
 800e34e:	4631      	mov	r1, r6
 800e350:	bf28      	it	cs
 800e352:	463a      	movcs	r2, r7
 800e354:	f7fe fa4e 	bl	800c7f4 <memcpy>
 800e358:	4631      	mov	r1, r6
 800e35a:	4640      	mov	r0, r8
 800e35c:	f7fe ff30 	bl	800d1c0 <_free_r>
 800e360:	e7e1      	b.n	800e326 <_realloc_r+0x1e>
 800e362:	4635      	mov	r5, r6
 800e364:	e7df      	b.n	800e326 <_realloc_r+0x1e>

0800e366 <__sfputc_r>:
 800e366:	6893      	ldr	r3, [r2, #8]
 800e368:	3b01      	subs	r3, #1
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	b410      	push	{r4}
 800e36e:	6093      	str	r3, [r2, #8]
 800e370:	da08      	bge.n	800e384 <__sfputc_r+0x1e>
 800e372:	6994      	ldr	r4, [r2, #24]
 800e374:	42a3      	cmp	r3, r4
 800e376:	db01      	blt.n	800e37c <__sfputc_r+0x16>
 800e378:	290a      	cmp	r1, #10
 800e37a:	d103      	bne.n	800e384 <__sfputc_r+0x1e>
 800e37c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e380:	f000 b94a 	b.w	800e618 <__swbuf_r>
 800e384:	6813      	ldr	r3, [r2, #0]
 800e386:	1c58      	adds	r0, r3, #1
 800e388:	6010      	str	r0, [r2, #0]
 800e38a:	7019      	strb	r1, [r3, #0]
 800e38c:	4608      	mov	r0, r1
 800e38e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <__sfputs_r>:
 800e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e396:	4606      	mov	r6, r0
 800e398:	460f      	mov	r7, r1
 800e39a:	4614      	mov	r4, r2
 800e39c:	18d5      	adds	r5, r2, r3
 800e39e:	42ac      	cmp	r4, r5
 800e3a0:	d101      	bne.n	800e3a6 <__sfputs_r+0x12>
 800e3a2:	2000      	movs	r0, #0
 800e3a4:	e007      	b.n	800e3b6 <__sfputs_r+0x22>
 800e3a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3aa:	463a      	mov	r2, r7
 800e3ac:	4630      	mov	r0, r6
 800e3ae:	f7ff ffda 	bl	800e366 <__sfputc_r>
 800e3b2:	1c43      	adds	r3, r0, #1
 800e3b4:	d1f3      	bne.n	800e39e <__sfputs_r+0xa>
 800e3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3b8 <_vfiprintf_r>:
 800e3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3bc:	460d      	mov	r5, r1
 800e3be:	b09d      	sub	sp, #116	; 0x74
 800e3c0:	4614      	mov	r4, r2
 800e3c2:	4698      	mov	r8, r3
 800e3c4:	4606      	mov	r6, r0
 800e3c6:	b118      	cbz	r0, 800e3d0 <_vfiprintf_r+0x18>
 800e3c8:	6983      	ldr	r3, [r0, #24]
 800e3ca:	b90b      	cbnz	r3, 800e3d0 <_vfiprintf_r+0x18>
 800e3cc:	f7ff fec4 	bl	800e158 <__sinit>
 800e3d0:	4b89      	ldr	r3, [pc, #548]	; (800e5f8 <_vfiprintf_r+0x240>)
 800e3d2:	429d      	cmp	r5, r3
 800e3d4:	d11b      	bne.n	800e40e <_vfiprintf_r+0x56>
 800e3d6:	6875      	ldr	r5, [r6, #4]
 800e3d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e3da:	07d9      	lsls	r1, r3, #31
 800e3dc:	d405      	bmi.n	800e3ea <_vfiprintf_r+0x32>
 800e3de:	89ab      	ldrh	r3, [r5, #12]
 800e3e0:	059a      	lsls	r2, r3, #22
 800e3e2:	d402      	bmi.n	800e3ea <_vfiprintf_r+0x32>
 800e3e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3e6:	f7ff ff67 	bl	800e2b8 <__retarget_lock_acquire_recursive>
 800e3ea:	89ab      	ldrh	r3, [r5, #12]
 800e3ec:	071b      	lsls	r3, r3, #28
 800e3ee:	d501      	bpl.n	800e3f4 <_vfiprintf_r+0x3c>
 800e3f0:	692b      	ldr	r3, [r5, #16]
 800e3f2:	b9eb      	cbnz	r3, 800e430 <_vfiprintf_r+0x78>
 800e3f4:	4629      	mov	r1, r5
 800e3f6:	4630      	mov	r0, r6
 800e3f8:	f000 f960 	bl	800e6bc <__swsetup_r>
 800e3fc:	b1c0      	cbz	r0, 800e430 <_vfiprintf_r+0x78>
 800e3fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e400:	07dc      	lsls	r4, r3, #31
 800e402:	d50e      	bpl.n	800e422 <_vfiprintf_r+0x6a>
 800e404:	f04f 30ff 	mov.w	r0, #4294967295
 800e408:	b01d      	add	sp, #116	; 0x74
 800e40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e40e:	4b7b      	ldr	r3, [pc, #492]	; (800e5fc <_vfiprintf_r+0x244>)
 800e410:	429d      	cmp	r5, r3
 800e412:	d101      	bne.n	800e418 <_vfiprintf_r+0x60>
 800e414:	68b5      	ldr	r5, [r6, #8]
 800e416:	e7df      	b.n	800e3d8 <_vfiprintf_r+0x20>
 800e418:	4b79      	ldr	r3, [pc, #484]	; (800e600 <_vfiprintf_r+0x248>)
 800e41a:	429d      	cmp	r5, r3
 800e41c:	bf08      	it	eq
 800e41e:	68f5      	ldreq	r5, [r6, #12]
 800e420:	e7da      	b.n	800e3d8 <_vfiprintf_r+0x20>
 800e422:	89ab      	ldrh	r3, [r5, #12]
 800e424:	0598      	lsls	r0, r3, #22
 800e426:	d4ed      	bmi.n	800e404 <_vfiprintf_r+0x4c>
 800e428:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e42a:	f7ff ff46 	bl	800e2ba <__retarget_lock_release_recursive>
 800e42e:	e7e9      	b.n	800e404 <_vfiprintf_r+0x4c>
 800e430:	2300      	movs	r3, #0
 800e432:	9309      	str	r3, [sp, #36]	; 0x24
 800e434:	2320      	movs	r3, #32
 800e436:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e43a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e43e:	2330      	movs	r3, #48	; 0x30
 800e440:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e604 <_vfiprintf_r+0x24c>
 800e444:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e448:	f04f 0901 	mov.w	r9, #1
 800e44c:	4623      	mov	r3, r4
 800e44e:	469a      	mov	sl, r3
 800e450:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e454:	b10a      	cbz	r2, 800e45a <_vfiprintf_r+0xa2>
 800e456:	2a25      	cmp	r2, #37	; 0x25
 800e458:	d1f9      	bne.n	800e44e <_vfiprintf_r+0x96>
 800e45a:	ebba 0b04 	subs.w	fp, sl, r4
 800e45e:	d00b      	beq.n	800e478 <_vfiprintf_r+0xc0>
 800e460:	465b      	mov	r3, fp
 800e462:	4622      	mov	r2, r4
 800e464:	4629      	mov	r1, r5
 800e466:	4630      	mov	r0, r6
 800e468:	f7ff ff94 	bl	800e394 <__sfputs_r>
 800e46c:	3001      	adds	r0, #1
 800e46e:	f000 80aa 	beq.w	800e5c6 <_vfiprintf_r+0x20e>
 800e472:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e474:	445a      	add	r2, fp
 800e476:	9209      	str	r2, [sp, #36]	; 0x24
 800e478:	f89a 3000 	ldrb.w	r3, [sl]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	f000 80a2 	beq.w	800e5c6 <_vfiprintf_r+0x20e>
 800e482:	2300      	movs	r3, #0
 800e484:	f04f 32ff 	mov.w	r2, #4294967295
 800e488:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e48c:	f10a 0a01 	add.w	sl, sl, #1
 800e490:	9304      	str	r3, [sp, #16]
 800e492:	9307      	str	r3, [sp, #28]
 800e494:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e498:	931a      	str	r3, [sp, #104]	; 0x68
 800e49a:	4654      	mov	r4, sl
 800e49c:	2205      	movs	r2, #5
 800e49e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4a2:	4858      	ldr	r0, [pc, #352]	; (800e604 <_vfiprintf_r+0x24c>)
 800e4a4:	f7f1 febc 	bl	8000220 <memchr>
 800e4a8:	9a04      	ldr	r2, [sp, #16]
 800e4aa:	b9d8      	cbnz	r0, 800e4e4 <_vfiprintf_r+0x12c>
 800e4ac:	06d1      	lsls	r1, r2, #27
 800e4ae:	bf44      	itt	mi
 800e4b0:	2320      	movmi	r3, #32
 800e4b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4b6:	0713      	lsls	r3, r2, #28
 800e4b8:	bf44      	itt	mi
 800e4ba:	232b      	movmi	r3, #43	; 0x2b
 800e4bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4c6:	d015      	beq.n	800e4f4 <_vfiprintf_r+0x13c>
 800e4c8:	9a07      	ldr	r2, [sp, #28]
 800e4ca:	4654      	mov	r4, sl
 800e4cc:	2000      	movs	r0, #0
 800e4ce:	f04f 0c0a 	mov.w	ip, #10
 800e4d2:	4621      	mov	r1, r4
 800e4d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4d8:	3b30      	subs	r3, #48	; 0x30
 800e4da:	2b09      	cmp	r3, #9
 800e4dc:	d94e      	bls.n	800e57c <_vfiprintf_r+0x1c4>
 800e4de:	b1b0      	cbz	r0, 800e50e <_vfiprintf_r+0x156>
 800e4e0:	9207      	str	r2, [sp, #28]
 800e4e2:	e014      	b.n	800e50e <_vfiprintf_r+0x156>
 800e4e4:	eba0 0308 	sub.w	r3, r0, r8
 800e4e8:	fa09 f303 	lsl.w	r3, r9, r3
 800e4ec:	4313      	orrs	r3, r2
 800e4ee:	9304      	str	r3, [sp, #16]
 800e4f0:	46a2      	mov	sl, r4
 800e4f2:	e7d2      	b.n	800e49a <_vfiprintf_r+0xe2>
 800e4f4:	9b03      	ldr	r3, [sp, #12]
 800e4f6:	1d19      	adds	r1, r3, #4
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	9103      	str	r1, [sp, #12]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	bfbb      	ittet	lt
 800e500:	425b      	neglt	r3, r3
 800e502:	f042 0202 	orrlt.w	r2, r2, #2
 800e506:	9307      	strge	r3, [sp, #28]
 800e508:	9307      	strlt	r3, [sp, #28]
 800e50a:	bfb8      	it	lt
 800e50c:	9204      	strlt	r2, [sp, #16]
 800e50e:	7823      	ldrb	r3, [r4, #0]
 800e510:	2b2e      	cmp	r3, #46	; 0x2e
 800e512:	d10c      	bne.n	800e52e <_vfiprintf_r+0x176>
 800e514:	7863      	ldrb	r3, [r4, #1]
 800e516:	2b2a      	cmp	r3, #42	; 0x2a
 800e518:	d135      	bne.n	800e586 <_vfiprintf_r+0x1ce>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	1d1a      	adds	r2, r3, #4
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	9203      	str	r2, [sp, #12]
 800e522:	2b00      	cmp	r3, #0
 800e524:	bfb8      	it	lt
 800e526:	f04f 33ff 	movlt.w	r3, #4294967295
 800e52a:	3402      	adds	r4, #2
 800e52c:	9305      	str	r3, [sp, #20]
 800e52e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e614 <_vfiprintf_r+0x25c>
 800e532:	7821      	ldrb	r1, [r4, #0]
 800e534:	2203      	movs	r2, #3
 800e536:	4650      	mov	r0, sl
 800e538:	f7f1 fe72 	bl	8000220 <memchr>
 800e53c:	b140      	cbz	r0, 800e550 <_vfiprintf_r+0x198>
 800e53e:	2340      	movs	r3, #64	; 0x40
 800e540:	eba0 000a 	sub.w	r0, r0, sl
 800e544:	fa03 f000 	lsl.w	r0, r3, r0
 800e548:	9b04      	ldr	r3, [sp, #16]
 800e54a:	4303      	orrs	r3, r0
 800e54c:	3401      	adds	r4, #1
 800e54e:	9304      	str	r3, [sp, #16]
 800e550:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e554:	482c      	ldr	r0, [pc, #176]	; (800e608 <_vfiprintf_r+0x250>)
 800e556:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e55a:	2206      	movs	r2, #6
 800e55c:	f7f1 fe60 	bl	8000220 <memchr>
 800e560:	2800      	cmp	r0, #0
 800e562:	d03f      	beq.n	800e5e4 <_vfiprintf_r+0x22c>
 800e564:	4b29      	ldr	r3, [pc, #164]	; (800e60c <_vfiprintf_r+0x254>)
 800e566:	bb1b      	cbnz	r3, 800e5b0 <_vfiprintf_r+0x1f8>
 800e568:	9b03      	ldr	r3, [sp, #12]
 800e56a:	3307      	adds	r3, #7
 800e56c:	f023 0307 	bic.w	r3, r3, #7
 800e570:	3308      	adds	r3, #8
 800e572:	9303      	str	r3, [sp, #12]
 800e574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e576:	443b      	add	r3, r7
 800e578:	9309      	str	r3, [sp, #36]	; 0x24
 800e57a:	e767      	b.n	800e44c <_vfiprintf_r+0x94>
 800e57c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e580:	460c      	mov	r4, r1
 800e582:	2001      	movs	r0, #1
 800e584:	e7a5      	b.n	800e4d2 <_vfiprintf_r+0x11a>
 800e586:	2300      	movs	r3, #0
 800e588:	3401      	adds	r4, #1
 800e58a:	9305      	str	r3, [sp, #20]
 800e58c:	4619      	mov	r1, r3
 800e58e:	f04f 0c0a 	mov.w	ip, #10
 800e592:	4620      	mov	r0, r4
 800e594:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e598:	3a30      	subs	r2, #48	; 0x30
 800e59a:	2a09      	cmp	r2, #9
 800e59c:	d903      	bls.n	800e5a6 <_vfiprintf_r+0x1ee>
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d0c5      	beq.n	800e52e <_vfiprintf_r+0x176>
 800e5a2:	9105      	str	r1, [sp, #20]
 800e5a4:	e7c3      	b.n	800e52e <_vfiprintf_r+0x176>
 800e5a6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5aa:	4604      	mov	r4, r0
 800e5ac:	2301      	movs	r3, #1
 800e5ae:	e7f0      	b.n	800e592 <_vfiprintf_r+0x1da>
 800e5b0:	ab03      	add	r3, sp, #12
 800e5b2:	9300      	str	r3, [sp, #0]
 800e5b4:	462a      	mov	r2, r5
 800e5b6:	4b16      	ldr	r3, [pc, #88]	; (800e610 <_vfiprintf_r+0x258>)
 800e5b8:	a904      	add	r1, sp, #16
 800e5ba:	4630      	mov	r0, r6
 800e5bc:	f7fb f9a0 	bl	8009900 <_printf_float>
 800e5c0:	4607      	mov	r7, r0
 800e5c2:	1c78      	adds	r0, r7, #1
 800e5c4:	d1d6      	bne.n	800e574 <_vfiprintf_r+0x1bc>
 800e5c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e5c8:	07d9      	lsls	r1, r3, #31
 800e5ca:	d405      	bmi.n	800e5d8 <_vfiprintf_r+0x220>
 800e5cc:	89ab      	ldrh	r3, [r5, #12]
 800e5ce:	059a      	lsls	r2, r3, #22
 800e5d0:	d402      	bmi.n	800e5d8 <_vfiprintf_r+0x220>
 800e5d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5d4:	f7ff fe71 	bl	800e2ba <__retarget_lock_release_recursive>
 800e5d8:	89ab      	ldrh	r3, [r5, #12]
 800e5da:	065b      	lsls	r3, r3, #25
 800e5dc:	f53f af12 	bmi.w	800e404 <_vfiprintf_r+0x4c>
 800e5e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5e2:	e711      	b.n	800e408 <_vfiprintf_r+0x50>
 800e5e4:	ab03      	add	r3, sp, #12
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	462a      	mov	r2, r5
 800e5ea:	4b09      	ldr	r3, [pc, #36]	; (800e610 <_vfiprintf_r+0x258>)
 800e5ec:	a904      	add	r1, sp, #16
 800e5ee:	4630      	mov	r0, r6
 800e5f0:	f7fb fc2a 	bl	8009e48 <_printf_i>
 800e5f4:	e7e4      	b.n	800e5c0 <_vfiprintf_r+0x208>
 800e5f6:	bf00      	nop
 800e5f8:	0800efbc 	.word	0x0800efbc
 800e5fc:	0800efdc 	.word	0x0800efdc
 800e600:	0800ef9c 	.word	0x0800ef9c
 800e604:	0800ef34 	.word	0x0800ef34
 800e608:	0800ef3e 	.word	0x0800ef3e
 800e60c:	08009901 	.word	0x08009901
 800e610:	0800e395 	.word	0x0800e395
 800e614:	0800ef3a 	.word	0x0800ef3a

0800e618 <__swbuf_r>:
 800e618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61a:	460e      	mov	r6, r1
 800e61c:	4614      	mov	r4, r2
 800e61e:	4605      	mov	r5, r0
 800e620:	b118      	cbz	r0, 800e62a <__swbuf_r+0x12>
 800e622:	6983      	ldr	r3, [r0, #24]
 800e624:	b90b      	cbnz	r3, 800e62a <__swbuf_r+0x12>
 800e626:	f7ff fd97 	bl	800e158 <__sinit>
 800e62a:	4b21      	ldr	r3, [pc, #132]	; (800e6b0 <__swbuf_r+0x98>)
 800e62c:	429c      	cmp	r4, r3
 800e62e:	d12b      	bne.n	800e688 <__swbuf_r+0x70>
 800e630:	686c      	ldr	r4, [r5, #4]
 800e632:	69a3      	ldr	r3, [r4, #24]
 800e634:	60a3      	str	r3, [r4, #8]
 800e636:	89a3      	ldrh	r3, [r4, #12]
 800e638:	071a      	lsls	r2, r3, #28
 800e63a:	d52f      	bpl.n	800e69c <__swbuf_r+0x84>
 800e63c:	6923      	ldr	r3, [r4, #16]
 800e63e:	b36b      	cbz	r3, 800e69c <__swbuf_r+0x84>
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	6820      	ldr	r0, [r4, #0]
 800e644:	1ac0      	subs	r0, r0, r3
 800e646:	6963      	ldr	r3, [r4, #20]
 800e648:	b2f6      	uxtb	r6, r6
 800e64a:	4283      	cmp	r3, r0
 800e64c:	4637      	mov	r7, r6
 800e64e:	dc04      	bgt.n	800e65a <__swbuf_r+0x42>
 800e650:	4621      	mov	r1, r4
 800e652:	4628      	mov	r0, r5
 800e654:	f7ff fcec 	bl	800e030 <_fflush_r>
 800e658:	bb30      	cbnz	r0, 800e6a8 <__swbuf_r+0x90>
 800e65a:	68a3      	ldr	r3, [r4, #8]
 800e65c:	3b01      	subs	r3, #1
 800e65e:	60a3      	str	r3, [r4, #8]
 800e660:	6823      	ldr	r3, [r4, #0]
 800e662:	1c5a      	adds	r2, r3, #1
 800e664:	6022      	str	r2, [r4, #0]
 800e666:	701e      	strb	r6, [r3, #0]
 800e668:	6963      	ldr	r3, [r4, #20]
 800e66a:	3001      	adds	r0, #1
 800e66c:	4283      	cmp	r3, r0
 800e66e:	d004      	beq.n	800e67a <__swbuf_r+0x62>
 800e670:	89a3      	ldrh	r3, [r4, #12]
 800e672:	07db      	lsls	r3, r3, #31
 800e674:	d506      	bpl.n	800e684 <__swbuf_r+0x6c>
 800e676:	2e0a      	cmp	r6, #10
 800e678:	d104      	bne.n	800e684 <__swbuf_r+0x6c>
 800e67a:	4621      	mov	r1, r4
 800e67c:	4628      	mov	r0, r5
 800e67e:	f7ff fcd7 	bl	800e030 <_fflush_r>
 800e682:	b988      	cbnz	r0, 800e6a8 <__swbuf_r+0x90>
 800e684:	4638      	mov	r0, r7
 800e686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e688:	4b0a      	ldr	r3, [pc, #40]	; (800e6b4 <__swbuf_r+0x9c>)
 800e68a:	429c      	cmp	r4, r3
 800e68c:	d101      	bne.n	800e692 <__swbuf_r+0x7a>
 800e68e:	68ac      	ldr	r4, [r5, #8]
 800e690:	e7cf      	b.n	800e632 <__swbuf_r+0x1a>
 800e692:	4b09      	ldr	r3, [pc, #36]	; (800e6b8 <__swbuf_r+0xa0>)
 800e694:	429c      	cmp	r4, r3
 800e696:	bf08      	it	eq
 800e698:	68ec      	ldreq	r4, [r5, #12]
 800e69a:	e7ca      	b.n	800e632 <__swbuf_r+0x1a>
 800e69c:	4621      	mov	r1, r4
 800e69e:	4628      	mov	r0, r5
 800e6a0:	f000 f80c 	bl	800e6bc <__swsetup_r>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d0cb      	beq.n	800e640 <__swbuf_r+0x28>
 800e6a8:	f04f 37ff 	mov.w	r7, #4294967295
 800e6ac:	e7ea      	b.n	800e684 <__swbuf_r+0x6c>
 800e6ae:	bf00      	nop
 800e6b0:	0800efbc 	.word	0x0800efbc
 800e6b4:	0800efdc 	.word	0x0800efdc
 800e6b8:	0800ef9c 	.word	0x0800ef9c

0800e6bc <__swsetup_r>:
 800e6bc:	4b32      	ldr	r3, [pc, #200]	; (800e788 <__swsetup_r+0xcc>)
 800e6be:	b570      	push	{r4, r5, r6, lr}
 800e6c0:	681d      	ldr	r5, [r3, #0]
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	b125      	cbz	r5, 800e6d2 <__swsetup_r+0x16>
 800e6c8:	69ab      	ldr	r3, [r5, #24]
 800e6ca:	b913      	cbnz	r3, 800e6d2 <__swsetup_r+0x16>
 800e6cc:	4628      	mov	r0, r5
 800e6ce:	f7ff fd43 	bl	800e158 <__sinit>
 800e6d2:	4b2e      	ldr	r3, [pc, #184]	; (800e78c <__swsetup_r+0xd0>)
 800e6d4:	429c      	cmp	r4, r3
 800e6d6:	d10f      	bne.n	800e6f8 <__swsetup_r+0x3c>
 800e6d8:	686c      	ldr	r4, [r5, #4]
 800e6da:	89a3      	ldrh	r3, [r4, #12]
 800e6dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6e0:	0719      	lsls	r1, r3, #28
 800e6e2:	d42c      	bmi.n	800e73e <__swsetup_r+0x82>
 800e6e4:	06dd      	lsls	r5, r3, #27
 800e6e6:	d411      	bmi.n	800e70c <__swsetup_r+0x50>
 800e6e8:	2309      	movs	r3, #9
 800e6ea:	6033      	str	r3, [r6, #0]
 800e6ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e6f0:	81a3      	strh	r3, [r4, #12]
 800e6f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e6f6:	e03e      	b.n	800e776 <__swsetup_r+0xba>
 800e6f8:	4b25      	ldr	r3, [pc, #148]	; (800e790 <__swsetup_r+0xd4>)
 800e6fa:	429c      	cmp	r4, r3
 800e6fc:	d101      	bne.n	800e702 <__swsetup_r+0x46>
 800e6fe:	68ac      	ldr	r4, [r5, #8]
 800e700:	e7eb      	b.n	800e6da <__swsetup_r+0x1e>
 800e702:	4b24      	ldr	r3, [pc, #144]	; (800e794 <__swsetup_r+0xd8>)
 800e704:	429c      	cmp	r4, r3
 800e706:	bf08      	it	eq
 800e708:	68ec      	ldreq	r4, [r5, #12]
 800e70a:	e7e6      	b.n	800e6da <__swsetup_r+0x1e>
 800e70c:	0758      	lsls	r0, r3, #29
 800e70e:	d512      	bpl.n	800e736 <__swsetup_r+0x7a>
 800e710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e712:	b141      	cbz	r1, 800e726 <__swsetup_r+0x6a>
 800e714:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e718:	4299      	cmp	r1, r3
 800e71a:	d002      	beq.n	800e722 <__swsetup_r+0x66>
 800e71c:	4630      	mov	r0, r6
 800e71e:	f7fe fd4f 	bl	800d1c0 <_free_r>
 800e722:	2300      	movs	r3, #0
 800e724:	6363      	str	r3, [r4, #52]	; 0x34
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e72c:	81a3      	strh	r3, [r4, #12]
 800e72e:	2300      	movs	r3, #0
 800e730:	6063      	str	r3, [r4, #4]
 800e732:	6923      	ldr	r3, [r4, #16]
 800e734:	6023      	str	r3, [r4, #0]
 800e736:	89a3      	ldrh	r3, [r4, #12]
 800e738:	f043 0308 	orr.w	r3, r3, #8
 800e73c:	81a3      	strh	r3, [r4, #12]
 800e73e:	6923      	ldr	r3, [r4, #16]
 800e740:	b94b      	cbnz	r3, 800e756 <__swsetup_r+0x9a>
 800e742:	89a3      	ldrh	r3, [r4, #12]
 800e744:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e748:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e74c:	d003      	beq.n	800e756 <__swsetup_r+0x9a>
 800e74e:	4621      	mov	r1, r4
 800e750:	4630      	mov	r0, r6
 800e752:	f000 f84d 	bl	800e7f0 <__smakebuf_r>
 800e756:	89a0      	ldrh	r0, [r4, #12]
 800e758:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e75c:	f010 0301 	ands.w	r3, r0, #1
 800e760:	d00a      	beq.n	800e778 <__swsetup_r+0xbc>
 800e762:	2300      	movs	r3, #0
 800e764:	60a3      	str	r3, [r4, #8]
 800e766:	6963      	ldr	r3, [r4, #20]
 800e768:	425b      	negs	r3, r3
 800e76a:	61a3      	str	r3, [r4, #24]
 800e76c:	6923      	ldr	r3, [r4, #16]
 800e76e:	b943      	cbnz	r3, 800e782 <__swsetup_r+0xc6>
 800e770:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e774:	d1ba      	bne.n	800e6ec <__swsetup_r+0x30>
 800e776:	bd70      	pop	{r4, r5, r6, pc}
 800e778:	0781      	lsls	r1, r0, #30
 800e77a:	bf58      	it	pl
 800e77c:	6963      	ldrpl	r3, [r4, #20]
 800e77e:	60a3      	str	r3, [r4, #8]
 800e780:	e7f4      	b.n	800e76c <__swsetup_r+0xb0>
 800e782:	2000      	movs	r0, #0
 800e784:	e7f7      	b.n	800e776 <__swsetup_r+0xba>
 800e786:	bf00      	nop
 800e788:	20000024 	.word	0x20000024
 800e78c:	0800efbc 	.word	0x0800efbc
 800e790:	0800efdc 	.word	0x0800efdc
 800e794:	0800ef9c 	.word	0x0800ef9c

0800e798 <abort>:
 800e798:	b508      	push	{r3, lr}
 800e79a:	2006      	movs	r0, #6
 800e79c:	f000 f898 	bl	800e8d0 <raise>
 800e7a0:	2001      	movs	r0, #1
 800e7a2:	f7f3 fe57 	bl	8002454 <_exit>

0800e7a6 <__swhatbuf_r>:
 800e7a6:	b570      	push	{r4, r5, r6, lr}
 800e7a8:	460e      	mov	r6, r1
 800e7aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7ae:	2900      	cmp	r1, #0
 800e7b0:	b096      	sub	sp, #88	; 0x58
 800e7b2:	4614      	mov	r4, r2
 800e7b4:	461d      	mov	r5, r3
 800e7b6:	da08      	bge.n	800e7ca <__swhatbuf_r+0x24>
 800e7b8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7bc:	2200      	movs	r2, #0
 800e7be:	602a      	str	r2, [r5, #0]
 800e7c0:	061a      	lsls	r2, r3, #24
 800e7c2:	d410      	bmi.n	800e7e6 <__swhatbuf_r+0x40>
 800e7c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7c8:	e00e      	b.n	800e7e8 <__swhatbuf_r+0x42>
 800e7ca:	466a      	mov	r2, sp
 800e7cc:	f000 f89c 	bl	800e908 <_fstat_r>
 800e7d0:	2800      	cmp	r0, #0
 800e7d2:	dbf1      	blt.n	800e7b8 <__swhatbuf_r+0x12>
 800e7d4:	9a01      	ldr	r2, [sp, #4]
 800e7d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7de:	425a      	negs	r2, r3
 800e7e0:	415a      	adcs	r2, r3
 800e7e2:	602a      	str	r2, [r5, #0]
 800e7e4:	e7ee      	b.n	800e7c4 <__swhatbuf_r+0x1e>
 800e7e6:	2340      	movs	r3, #64	; 0x40
 800e7e8:	2000      	movs	r0, #0
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	b016      	add	sp, #88	; 0x58
 800e7ee:	bd70      	pop	{r4, r5, r6, pc}

0800e7f0 <__smakebuf_r>:
 800e7f0:	898b      	ldrh	r3, [r1, #12]
 800e7f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e7f4:	079d      	lsls	r5, r3, #30
 800e7f6:	4606      	mov	r6, r0
 800e7f8:	460c      	mov	r4, r1
 800e7fa:	d507      	bpl.n	800e80c <__smakebuf_r+0x1c>
 800e7fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e800:	6023      	str	r3, [r4, #0]
 800e802:	6123      	str	r3, [r4, #16]
 800e804:	2301      	movs	r3, #1
 800e806:	6163      	str	r3, [r4, #20]
 800e808:	b002      	add	sp, #8
 800e80a:	bd70      	pop	{r4, r5, r6, pc}
 800e80c:	ab01      	add	r3, sp, #4
 800e80e:	466a      	mov	r2, sp
 800e810:	f7ff ffc9 	bl	800e7a6 <__swhatbuf_r>
 800e814:	9900      	ldr	r1, [sp, #0]
 800e816:	4605      	mov	r5, r0
 800e818:	4630      	mov	r0, r6
 800e81a:	f7fe fd3d 	bl	800d298 <_malloc_r>
 800e81e:	b948      	cbnz	r0, 800e834 <__smakebuf_r+0x44>
 800e820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e824:	059a      	lsls	r2, r3, #22
 800e826:	d4ef      	bmi.n	800e808 <__smakebuf_r+0x18>
 800e828:	f023 0303 	bic.w	r3, r3, #3
 800e82c:	f043 0302 	orr.w	r3, r3, #2
 800e830:	81a3      	strh	r3, [r4, #12]
 800e832:	e7e3      	b.n	800e7fc <__smakebuf_r+0xc>
 800e834:	4b0d      	ldr	r3, [pc, #52]	; (800e86c <__smakebuf_r+0x7c>)
 800e836:	62b3      	str	r3, [r6, #40]	; 0x28
 800e838:	89a3      	ldrh	r3, [r4, #12]
 800e83a:	6020      	str	r0, [r4, #0]
 800e83c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e840:	81a3      	strh	r3, [r4, #12]
 800e842:	9b00      	ldr	r3, [sp, #0]
 800e844:	6163      	str	r3, [r4, #20]
 800e846:	9b01      	ldr	r3, [sp, #4]
 800e848:	6120      	str	r0, [r4, #16]
 800e84a:	b15b      	cbz	r3, 800e864 <__smakebuf_r+0x74>
 800e84c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e850:	4630      	mov	r0, r6
 800e852:	f000 f86b 	bl	800e92c <_isatty_r>
 800e856:	b128      	cbz	r0, 800e864 <__smakebuf_r+0x74>
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	f023 0303 	bic.w	r3, r3, #3
 800e85e:	f043 0301 	orr.w	r3, r3, #1
 800e862:	81a3      	strh	r3, [r4, #12]
 800e864:	89a0      	ldrh	r0, [r4, #12]
 800e866:	4305      	orrs	r5, r0
 800e868:	81a5      	strh	r5, [r4, #12]
 800e86a:	e7cd      	b.n	800e808 <__smakebuf_r+0x18>
 800e86c:	0800e0f1 	.word	0x0800e0f1

0800e870 <_malloc_usable_size_r>:
 800e870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e874:	1f18      	subs	r0, r3, #4
 800e876:	2b00      	cmp	r3, #0
 800e878:	bfbc      	itt	lt
 800e87a:	580b      	ldrlt	r3, [r1, r0]
 800e87c:	18c0      	addlt	r0, r0, r3
 800e87e:	4770      	bx	lr

0800e880 <_raise_r>:
 800e880:	291f      	cmp	r1, #31
 800e882:	b538      	push	{r3, r4, r5, lr}
 800e884:	4604      	mov	r4, r0
 800e886:	460d      	mov	r5, r1
 800e888:	d904      	bls.n	800e894 <_raise_r+0x14>
 800e88a:	2316      	movs	r3, #22
 800e88c:	6003      	str	r3, [r0, #0]
 800e88e:	f04f 30ff 	mov.w	r0, #4294967295
 800e892:	bd38      	pop	{r3, r4, r5, pc}
 800e894:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e896:	b112      	cbz	r2, 800e89e <_raise_r+0x1e>
 800e898:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e89c:	b94b      	cbnz	r3, 800e8b2 <_raise_r+0x32>
 800e89e:	4620      	mov	r0, r4
 800e8a0:	f000 f830 	bl	800e904 <_getpid_r>
 800e8a4:	462a      	mov	r2, r5
 800e8a6:	4601      	mov	r1, r0
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8ae:	f000 b817 	b.w	800e8e0 <_kill_r>
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d00a      	beq.n	800e8cc <_raise_r+0x4c>
 800e8b6:	1c59      	adds	r1, r3, #1
 800e8b8:	d103      	bne.n	800e8c2 <_raise_r+0x42>
 800e8ba:	2316      	movs	r3, #22
 800e8bc:	6003      	str	r3, [r0, #0]
 800e8be:	2001      	movs	r0, #1
 800e8c0:	e7e7      	b.n	800e892 <_raise_r+0x12>
 800e8c2:	2400      	movs	r4, #0
 800e8c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	4798      	blx	r3
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	e7e0      	b.n	800e892 <_raise_r+0x12>

0800e8d0 <raise>:
 800e8d0:	4b02      	ldr	r3, [pc, #8]	; (800e8dc <raise+0xc>)
 800e8d2:	4601      	mov	r1, r0
 800e8d4:	6818      	ldr	r0, [r3, #0]
 800e8d6:	f7ff bfd3 	b.w	800e880 <_raise_r>
 800e8da:	bf00      	nop
 800e8dc:	20000024 	.word	0x20000024

0800e8e0 <_kill_r>:
 800e8e0:	b538      	push	{r3, r4, r5, lr}
 800e8e2:	4d07      	ldr	r5, [pc, #28]	; (800e900 <_kill_r+0x20>)
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	4608      	mov	r0, r1
 800e8ea:	4611      	mov	r1, r2
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	f7f3 fda1 	bl	8002434 <_kill>
 800e8f2:	1c43      	adds	r3, r0, #1
 800e8f4:	d102      	bne.n	800e8fc <_kill_r+0x1c>
 800e8f6:	682b      	ldr	r3, [r5, #0]
 800e8f8:	b103      	cbz	r3, 800e8fc <_kill_r+0x1c>
 800e8fa:	6023      	str	r3, [r4, #0]
 800e8fc:	bd38      	pop	{r3, r4, r5, pc}
 800e8fe:	bf00      	nop
 800e900:	20001344 	.word	0x20001344

0800e904 <_getpid_r>:
 800e904:	f7f3 bd8e 	b.w	8002424 <_getpid>

0800e908 <_fstat_r>:
 800e908:	b538      	push	{r3, r4, r5, lr}
 800e90a:	4d07      	ldr	r5, [pc, #28]	; (800e928 <_fstat_r+0x20>)
 800e90c:	2300      	movs	r3, #0
 800e90e:	4604      	mov	r4, r0
 800e910:	4608      	mov	r0, r1
 800e912:	4611      	mov	r1, r2
 800e914:	602b      	str	r3, [r5, #0]
 800e916:	f7f3 fdec 	bl	80024f2 <_fstat>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	d102      	bne.n	800e924 <_fstat_r+0x1c>
 800e91e:	682b      	ldr	r3, [r5, #0]
 800e920:	b103      	cbz	r3, 800e924 <_fstat_r+0x1c>
 800e922:	6023      	str	r3, [r4, #0]
 800e924:	bd38      	pop	{r3, r4, r5, pc}
 800e926:	bf00      	nop
 800e928:	20001344 	.word	0x20001344

0800e92c <_isatty_r>:
 800e92c:	b538      	push	{r3, r4, r5, lr}
 800e92e:	4d06      	ldr	r5, [pc, #24]	; (800e948 <_isatty_r+0x1c>)
 800e930:	2300      	movs	r3, #0
 800e932:	4604      	mov	r4, r0
 800e934:	4608      	mov	r0, r1
 800e936:	602b      	str	r3, [r5, #0]
 800e938:	f7f3 fdeb 	bl	8002512 <_isatty>
 800e93c:	1c43      	adds	r3, r0, #1
 800e93e:	d102      	bne.n	800e946 <_isatty_r+0x1a>
 800e940:	682b      	ldr	r3, [r5, #0]
 800e942:	b103      	cbz	r3, 800e946 <_isatty_r+0x1a>
 800e944:	6023      	str	r3, [r4, #0]
 800e946:	bd38      	pop	{r3, r4, r5, pc}
 800e948:	20001344 	.word	0x20001344

0800e94c <_init>:
 800e94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e94e:	bf00      	nop
 800e950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e952:	bc08      	pop	{r3}
 800e954:	469e      	mov	lr, r3
 800e956:	4770      	bx	lr

0800e958 <_fini>:
 800e958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95a:	bf00      	nop
 800e95c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e95e:	bc08      	pop	{r3}
 800e960:	469e      	mov	lr, r3
 800e962:	4770      	bx	lr
